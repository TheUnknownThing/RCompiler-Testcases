USE compiler;
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (1, "comprehensive1", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (2, "comprehensive2", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (3, "comprehensive3", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (4, "comprehensive4", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (5, "comprehensive5", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (6, "comprehensive6", 2, "LyoKVGVzdCBQYWNrYWdlOiBTZW1hbnRpYy0yClRlc3QgVGFyZ2V0OiBjb21wcmVoZW5zaXZlCkF1dGhvcjogV2VueGluIFpoZW5nClRpbWU6IDIwMjUtMDgtMTcKVmVyZGljdDogUGFzcwpUZXN0IE5hbWU6IENvbXByZWhlbnNpdmUgVGVzdCA2OiBTdHJpbmcgUHJvY2Vzc2luZyBhbmQgUGF0dGVybiBNYXRjaGluZwpTdW1tYXJ5OiBUaGlzIHRlc3QgZm9jdXNlcyBvbiBjb21waWxlciBvcHRpbWl6YXRpb24gb2Y6CkRldGFpbHM6ClN0cmluZyBtYW5pcHVsYXRpb24gYWxnb3JpdGhtcyB1c2luZyBpbnRlZ2VyIGFycmF5cwpQYXR0ZXJuIG1hdGNoaW5nIGFuZCBzZWFyY2hpbmcgb3B0aW1pemF0aW9ucwpDaGFyYWN0ZXIgcHJvY2Vzc2luZyBsb29wIG9wdGltaXphdGlvbnMKVGV4dCBwcm9jZXNzaW5nIGFsZ29yaXRobSBvcHRpbWl6YXRpb25zClNlcXVlbnRpYWwgZGF0YSBwcm9jZXNzaW5nIHBhdHRlcm5zCkNoYXJhY3Rlci1iYXNlZCBjb25kaXRpb25hbCBsb2dpYyBvcHRpbWl6YXRpb24KKi8KCi8vIGNvbXByZWhlbnNpdmU2LnJ4IC0gQ29tcHJlaGVuc2l2ZSBUZXN0IDY6IFN0cmluZyBQcm9jZXNzaW5nIGFuZCBQYXR0ZXJuIE1hdGNoaW5nCi8vIFRoaXMgdGVzdCBmb2N1c2VzIG9uIGNvbXBpbGVyIG9wdGltaXphdGlvbiBvZjoKLy8gLSBTdHJpbmcgbWFuaXB1bGF0aW9uIGFsZ29yaXRobXMgdXNpbmcgaW50ZWdlciBhcnJheXMKLy8gLSBQYXR0ZXJuIG1hdGNoaW5nIGFuZCBzZWFyY2hpbmcgb3B0aW1pemF0aW9ucwovLyAtIENoYXJhY3RlciBwcm9jZXNzaW5nIGxvb3Agb3B0aW1pemF0aW9ucwovLyAtIFRleHQgcHJvY2Vzc2luZyBhbGdvcml0aG0gb3B0aW1pemF0aW9ucwovLyAtIFNlcXVlbnRpYWwgZGF0YSBwcm9jZXNzaW5nIHBhdHRlcm5zCi8vIC0gQ2hhcmFjdGVyLWJhc2VkIGNvbmRpdGlvbmFsIGxvZ2ljIG9wdGltaXphdGlvbgoKZm4gbWFpbigpIHsKICAgIC8vIFBlcmZvcm1hbmNlIHRlc3QgbWFya2VyIC0gc3RhcnQKICAgIHByaW50bG5JbnQoMTYwMCk7CgogICAgLy8gVGVzdCAxOiBTdHJpbmcgc2VhcmNoaW5nIGFuZCBwYXR0ZXJuIG1hdGNoaW5nIGFsZ29yaXRobXMKICAgIC8vIFRlc3RzIG9wdGltaXphdGlvbiBvZiBzdHJpbmcgc2VhcmNoIHBhdHRlcm5zIGFuZCBjaGFyYWN0ZXIgY29tcGFyaXNvbnMKICAgIHRlc3RTdHJpbmdTZWFyY2hBbGdvcml0aG1zKCk7CgogICAgLy8gVGVzdCAyOiBUZXh0IHByb2Nlc3NpbmcgYW5kIGNoYXJhY3RlciBtYW5pcHVsYXRpb24KICAgIC8vIFRlc3RzIG9wdGltaXphdGlvbiBvZiBjaGFyYWN0ZXItbGV2ZWwgb3BlcmF0aW9ucyBhbmQgdHJhbnNmb3JtYXRpb25zCiAgICB0ZXN0VGV4dFByb2Nlc3NpbmdBbGdvcml0aG1zKCk7CgogICAgLy8gVGVzdCAzOiBTdHJpbmcgcGFyc2luZyBhbmQgdG9rZW5pemF0aW9uCiAgICAvLyBUZXN0cyBvcHRpbWl6YXRpb24gb2YgcGFyc2luZyBsb2dpYyBhbmQgc3RhdGUgbWFjaGluZXMKICAgIHRlc3RTdHJpbmdQYXJzaW5nQWxnb3JpdGhtcygpOwoKICAgIC8vIFRlc3QgNDogU3RyaW5nIGNvbXByZXNzaW9uIGFuZCBlbmNvZGluZwogICAgLy8gVGVzdHMgb3B0aW1pemF0aW9uIG9mIGRhdGEgdHJhbnNmb3JtYXRpb24gYWxnb3JpdGhtcwogICAgdGVzdFN0cmluZ0NvbXByZXNzaW9uQWxnb3JpdGhtcygpOwoKICAgIC8vIFRlc3QgNTogQWR2YW5jZWQgc3RyaW5nIGFsZ29yaXRobXMKICAgIC8vIFRlc3RzIG9wdGltaXphdGlvbiBvZiBjb21wbGV4IHN0cmluZyBwcm9jZXNzaW5nIHBhdHRlcm5zCiAgICB0ZXN0QWR2YW5jZWRTdHJpbmdBbGdvcml0aG1zKCk7CgogICAgLy8gUGVyZm9ybWFuY2UgdGVzdCBtYXJrZXIgLSBlbmQKICAgIHByaW50bG5JbnQoMTY5OSk7CiAgICBleGl0KDApOwp9CgovLyBUZXN0IDE6IFN0cmluZyBTZWFyY2ggQWxnb3JpdGhtcwpmbiB0ZXN0U3RyaW5nU2VhcmNoQWxnb3JpdGhtcygpIHsKICAgIHByaW50bG5JbnQoMTYwMSk7IC8vIFN0YXJ0IHN0cmluZyBzZWFyY2ggdGVzdAoKICAgIC8vIENyZWF0ZSB0ZXN0IHN0cmluZ3MgdXNpbmcgaW50ZWdlciBhcnJheXMgKEFTQ0lJIHZhbHVlcykKICAgIGxldCBtdXQgdGV4dDogW2kzMjsgMTAwMF0gPSBbMDsgMTAwMF07CiAgICBsZXQgbXV0IHBhdHRlcm46IFtpMzI7IDEwXSA9IFswOyAxMF07CgogICAgaW5pdGlhbGl6ZVRleHRTdHJpbmcoJm11dCB0ZXh0KTsKICAgIGluaXRpYWxpemVQYXR0ZXJuU3RyaW5nKCZtdXQgcGF0dGVybik7CgogICAgLy8gVGVzdCBuYWl2ZSBzdHJpbmcgc2VhcmNoCiAgICBsZXQgbmFpdmVfbWF0Y2hlczogaTMyID0gbmFpdmVTdHJpbmdTZWFyY2goJnRleHQsIDEwMDAsICZwYXR0ZXJuLCAxMCk7CiAgICBwcmludGxuSW50KG5haXZlX21hdGNoZXMpOwoKICAgIC8vIFRlc3QgS01QIHN0cmluZyBzZWFyY2ggYWxnb3JpdGhtCiAgICBsZXQga21wX21hdGNoZXM6IGkzMiA9IGttcFN0cmluZ1NlYXJjaCgmdGV4dCwgMTAwMCwgJnBhdHRlcm4sIDEwKTsKICAgIHByaW50bG5JbnQoa21wX21hdGNoZXMpOwoKICAgIC8vIFRlc3QgQm95ZXItTW9vcmUtbGlrZSBzdHJpbmcgc2VhcmNoCiAgICBsZXQgYm95ZXJfbW9vcmVfbWF0Y2hlczogaTMyID0gYm95ZXJNb29yZVN0cmluZ1NlYXJjaCgmdGV4dCwgMTAwMCwgJnBhdHRlcm4sIDEwKTsKICAgIHByaW50bG5JbnQoYm95ZXJfbW9vcmVfbWF0Y2hlcyk7CgogICAgLy8gVGVzdCBtdWx0aXBsZSBwYXR0ZXJuIHNlYXJjaAogICAgbGV0IG11bHRpX3BhdHRlcm5fbWF0Y2hlczogaTMyID0gbXVsdGlwbGVQYXR0ZXJuU2VhcmNoKCZ0ZXh0LCAxMDAwKTsKICAgIHByaW50bG5JbnQobXVsdGlfcGF0dGVybl9tYXRjaGVzKTsKCiAgICBwcmludGxuSW50KDE2MDIpOyAvLyBFbmQgc3RyaW5nIHNlYXJjaCB0ZXN0Cn0KCi8vIEluaXRpYWxpemUgdGV4dCBzdHJpbmcgd2l0aCBBU0NJSSB2YWx1ZXMKZm4gaW5pdGlhbGl6ZVRleHRTdHJpbmcodGV4dDogJm11dCBbaTMyOyAxMDAwXSkgewogICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgbGV0IG11dCBzZWVkOiBpMzIgPSAxMjU7CgogICAgd2hpbGUgKGkgPCAxMDAwKSB7CiAgICAgICAgc2VlZCA9IChzZWVkICogMTY2ICsgMTAxMykgJSAyMTQ3NDM7CiAgICAgICAgLy8gR2VuZXJhdGUgQVNDSUkgdmFsdWVzIGZvciBwcmludGFibGUgY2hhcmFjdGVycyAoMzItMTI2KQogICAgICAgIHRleHRbaSBhcyB1c2l6ZV0gPSAzMiArIChzZWVkICUgOTUpOwogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICAvLyBJbnNlcnQga25vd24gcGF0dGVybnMgZm9yIHRlc3RpbmcKICAgIHRleHRbMTAwXSA9IDY1OyAvLyAnQScKICAgIHRleHRbMTAxXSA9IDY2OyAvLyAnQicKICAgIHRleHRbMTAyXSA9IDY3OyAvLyAnQycKICAgIHRleHRbMTAzXSA9IDY4OyAvLyAnRCcKCiAgICB0ZXh0WzUwMF0gPSA2NTsgLy8gJ0EnCiAgICB0ZXh0WzUwMV0gPSA2NjsgLy8gJ0InCiAgICB0ZXh0WzUwMl0gPSA2NzsgLy8gJ0MnCiAgICB0ZXh0WzUwM10gPSA2ODsgLy8gJ0QnCn0KCi8vIEluaXRpYWxpemUgcGF0dGVybiBzdHJpbmcKZm4gaW5pdGlhbGl6ZVBhdHRlcm5TdHJpbmcocGF0dGVybjogJm11dCBbaTMyOyAxMF0pIHsKICAgIHBhdHRlcm5bMF0gPSA2NTsgLy8gJ0EnCiAgICBwYXR0ZXJuWzFdID0gNjY7IC8vICdCJwogICAgcGF0dGVyblsyXSA9IDY3OyAvLyAnQycKICAgIHBhdHRlcm5bM10gPSA2ODsgLy8gJ0QnCiAgICBsZXQgbXV0IGk6IGkzMiA9IDQ7CiAgICB3aGlsZSAoaSA8IDEwKSB7CiAgICAgICAgcGF0dGVybltpIGFzIHVzaXplXSA9IDA7IC8vIE51bGwgdGVybWluYXRvciBzaW11bGF0aW9uCiAgICAgICAgaSA9IGkgKyAxOwogICAgfQp9CgovLyBOYWl2ZSBzdHJpbmcgc2VhcmNoIGFsZ29yaXRobQpmbiBuYWl2ZVN0cmluZ1NlYXJjaCgKICAgIHRleHQ6ICZbaTMyOyAxMDAwXSwKICAgIHRleHRfbGVuOiBpMzIsCiAgICBwYXR0ZXJuOiAmW2kzMjsgMTBdLAogICAgcGF0dGVybl9sZW46IGkzMiwKKSAtPiBpMzIgewogICAgbGV0IG11dCBtYXRjaGVzOiBpMzIgPSAwOwogICAgbGV0IG11dCBpOiBpMzIgPSAwOwoKICAgIHdoaWxlIChpIDw9IHRleHRfbGVuIC0gcGF0dGVybl9sZW4pIHsKICAgICAgICBsZXQgbXV0IGo6IGkzMiA9IDA7CiAgICAgICAgbGV0IG11dCBtYXRjaF9mb3VuZDogYm9vbCA9IHRydWU7CgogICAgICAgIHdoaWxlIChqIDwgcGF0dGVybl9sZW4pIHsKICAgICAgICAgICAgaWYgKHRleHRbKGkgKyBqKSBhcyB1c2l6ZV0gIT0gcGF0dGVybltqIGFzIHVzaXplXSkgewogICAgICAgICAgICAgICAgbWF0Y2hfZm91bmQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGogPSBqICsgMTsKICAgICAgICB9CgogICAgICAgIGlmIChtYXRjaF9mb3VuZCkgewogICAgICAgICAgICBtYXRjaGVzID0gbWF0Y2hlcyArIDE7CiAgICAgICAgfQoKICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgcmV0dXJuIG1hdGNoZXM7Cn0KCi8vIEtNUCBzdHJpbmcgc2VhcmNoIGFsZ29yaXRobQpmbiBrbXBTdHJpbmdTZWFyY2goCiAgICB0ZXh0OiAmW2kzMjsgMTAwMF0sCiAgICB0ZXh0X2xlbjogaTMyLAogICAgcGF0dGVybjogJltpMzI7IDEwXSwKICAgIHBhdHRlcm5fbGVuOiBpMzIsCikgLT4gaTMyIHsKICAgIGxldCBtdXQgbHBzOiBbaTMyOyAyMF0gPSBbMDsgMjBdOyAvLyBMb25nZXN0IHByb3BlciBwcmVmaXggc3VmZml4IGFycmF5CiAgICBjb21wdXRlTFBTQXJyYXkocGF0dGVybiwgcGF0dGVybl9sZW4sICZtdXQgbHBzKTsKCiAgICBsZXQgbXV0IG1hdGNoZXM6IGkzMiA9IDA7CiAgICBsZXQgbXV0IGk6IGkzMiA9IDA7IC8vIEluZGV4IGZvciB0ZXh0CiAgICBsZXQgbXV0IGo6IGkzMiA9IDA7IC8vIEluZGV4IGZvciBwYXR0ZXJuCgogICAgd2hpbGUgKGkgPCB0ZXh0X2xlbikgewogICAgICAgIGlmIChwYXR0ZXJuW2ogYXMgdXNpemVdID09IHRleHRbaSBhcyB1c2l6ZV0pIHsKICAgICAgICAgICAgaSA9IGkgKyAxOwogICAgICAgICAgICBqID0gaiArIDE7CiAgICAgICAgfQoKICAgICAgICBpZiAoaiA9PSBwYXR0ZXJuX2xlbikgewogICAgICAgICAgICBtYXRjaGVzID0gbWF0Y2hlcyArIDE7CiAgICAgICAgICAgIGogPSBscHNbaiBhcyB1c2l6ZSAtIDFdOwogICAgICAgIH0gZWxzZSBpZiAoaSA8IHRleHRfbGVuICYmIHBhdHRlcm5baiBhcyB1c2l6ZV0gIT0gdGV4dFtpIGFzIHVzaXplXSkgewogICAgICAgICAgICBpZiAoaiAhPSAwKSB7CiAgICAgICAgICAgICAgICBqID0gbHBzW2ogYXMgdXNpemUgLSAxXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGkgPSBpICsgMTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gbWF0Y2hlczsKfQoKLy8gQ29tcHV0ZSBMUFMgYXJyYXkgZm9yIEtNUCBhbGdvcml0aG0KZm4gY29tcHV0ZUxQU0FycmF5KHBhdHRlcm46ICZbaTMyOyAxMF0sIHBhdHRlcm5fbGVuOiBpMzIsIGxwczogJm11dCBbaTMyOyAyMF0pIHsKICAgIGxldCBtdXQgbGVuOiBpMzIgPSAwOwogICAgbGV0IG11dCBpOiBpMzIgPSAxOwoKICAgIGxwc1swXSA9IDA7CgogICAgd2hpbGUgKGkgPCBwYXR0ZXJuX2xlbikgewogICAgICAgIGlmIChwYXR0ZXJuW2kgYXMgdXNpemVdID09IHBhdHRlcm5bbGVuIGFzIHVzaXplXSkgewogICAgICAgICAgICBsZW4gPSBsZW4gKyAxOwogICAgICAgICAgICBscHNbaSBhcyB1c2l6ZV0gPSBsZW47CiAgICAgICAgICAgIGkgPSBpICsgMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAobGVuICE9IDApIHsKICAgICAgICAgICAgICAgIGxlbiA9IGxwc1tsZW4gYXMgdXNpemUgLSAxXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGxwc1tpIGFzIHVzaXplXSA9IDA7CiAgICAgICAgICAgICAgICBpID0gaSArIDE7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCi8vIEJveWVyLU1vb3JlLWxpa2Ugc3RyaW5nIHNlYXJjaCAoc2ltcGxpZmllZCkKZm4gYm95ZXJNb29yZVN0cmluZ1NlYXJjaCgKICAgIHRleHQ6ICZbaTMyOyAxMDAwXSwKICAgIHRleHRfbGVuOiBpMzIsCiAgICBwYXR0ZXJuOiAmW2kzMjsgMTBdLAogICAgcGF0dGVybl9sZW46IGkzMiwKKSAtPiBpMzIgewogICAgbGV0IG11dCBiYWRfY2hhcjogW2kzMjsgMjU2XSA9IFstMTsgMjU2XTsgLy8gQmFkIGNoYXJhY3RlciB0YWJsZQoKICAgIC8vIFByZXByb2Nlc3MgcGF0dGVybiBmb3IgYmFkIGNoYXJhY3RlciBoZXVyaXN0aWMKICAgIGxldCBtdXQgaTogaTMyID0gMDsKICAgIHdoaWxlIChpIDwgcGF0dGVybl9sZW4pIHsKICAgICAgICBpZiAocGF0dGVybltpIGFzIHVzaXplXSA+PSAwICYmIHBhdHRlcm5baSBhcyB1c2l6ZV0gPCAyNTYpIHsKICAgICAgICAgICAgYmFkX2NoYXJbcGF0dGVybltpIGFzIHVzaXplXSBhcyB1c2l6ZV0gPSBpOwogICAgICAgIH0KICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgbGV0IG11dCBtYXRjaGVzOiBpMzIgPSAwOwogICAgbGV0IG11dCBzaGlmdDogaTMyID0gMDsKCiAgICB3aGlsZSAoc2hpZnQgPD0gdGV4dF9sZW4gLSBwYXR0ZXJuX2xlbikgewogICAgICAgIGxldCBtdXQgajogaTMyID0gcGF0dGVybl9sZW4gLSAxOwoKICAgICAgICB3aGlsZSAoaiA+PSAwICYmIHBhdHRlcm5baiBhcyB1c2l6ZV0gPT0gdGV4dFsoc2hpZnQgKyBqKSBhcyB1c2l6ZV0pIHsKICAgICAgICAgICAgaiA9IGogLSAxOwogICAgICAgIH0KCiAgICAgICAgaWYgKGogPCAwKSB7CiAgICAgICAgICAgIG1hdGNoZXMgPSBtYXRjaGVzICsgMTsKICAgICAgICAgICAgaWYgKHNoaWZ0ICsgcGF0dGVybl9sZW4gPCB0ZXh0X2xlbikgewogICAgICAgICAgICAgICAgc2hpZnQgPQogICAgICAgICAgICAgICAgICAgIHNoaWZ0ICsgcGF0dGVybl9sZW4gLSBiYWRfY2hhclt0ZXh0WyhzaGlmdCArIHBhdHRlcm5fbGVuKSBhcyB1c2l6ZV0gYXMgdXNpemVdOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc2hpZnQgPSBzaGlmdCArIDE7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsZXQgYmFkX2NoYXJfc2hpZnQ6IGkzMiA9CiAgICAgICAgICAgICAgICBpZiAodGV4dFsoc2hpZnQgKyBqKSBhcyB1c2l6ZV0gPj0gMCAmJiB0ZXh0WyhzaGlmdCArIGopIGFzIHVzaXplXSA8IDI1NikgewogICAgICAgICAgICAgICAgICAgIGogLSBiYWRfY2hhclt0ZXh0WyhzaGlmdCArIGopIGFzIHVzaXplXSBhcyB1c2l6ZV0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIGlmIChiYWRfY2hhcl9zaGlmdCA+IDEpIHsKICAgICAgICAgICAgICAgIHNoaWZ0ID0gc2hpZnQgKyBiYWRfY2hhcl9zaGlmdDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHNoaWZ0ID0gc2hpZnQgKyAxOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiBtYXRjaGVzOwp9CgovLyBNdWx0aXBsZSBwYXR0ZXJuIHNlYXJjaApmbiBtdWx0aXBsZVBhdHRlcm5TZWFyY2godGV4dDogJltpMzI7IDEwMDBdLCB0ZXh0X2xlbjogaTMyKSAtPiBpMzIgewogICAgbGV0IG11dCB0b3RhbF9tYXRjaGVzOiBpMzIgPSAwOwoKICAgIC8vIERlZmluZSBtdWx0aXBsZSBwYXR0ZXJucyB0byBzZWFyY2ggZm9yCiAgICBsZXQgbXV0IHBhdHRlcm4xOiBbaTMyOyAxMF0gPSBbNjUsIDY2LCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXTsgLy8gIkFCIgogICAgbGV0IG11dCBwYXR0ZXJuMjogW2kzMjsgMTBdID0gWzY3LCA2OCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF07IC8vICJDRCIKICAgIGxldCBtdXQgcGF0dGVybjM6IFtpMzI7IDEwXSA9IFs2OSwgNzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdOyAvLyAiRUYiCgogICAgdG90YWxfbWF0Y2hlcyA9IHRvdGFsX21hdGNoZXMgKyBuYWl2ZVN0cmluZ1NlYXJjaCh0ZXh0LCB0ZXh0X2xlbiwgJnBhdHRlcm4xLCAyKTsKICAgIHRvdGFsX21hdGNoZXMgPSB0b3RhbF9tYXRjaGVzICsgbmFpdmVTdHJpbmdTZWFyY2godGV4dCwgdGV4dF9sZW4sICZwYXR0ZXJuMiwgMik7CiAgICB0b3RhbF9tYXRjaGVzID0gdG90YWxfbWF0Y2hlcyArIG5haXZlU3RyaW5nU2VhcmNoKHRleHQsIHRleHRfbGVuLCAmcGF0dGVybjMsIDIpOwoKICAgIHJldHVybiB0b3RhbF9tYXRjaGVzOwp9CgovLyBUZXN0IDI6IFRleHQgUHJvY2Vzc2luZyBBbGdvcml0aG1zCmZuIHRlc3RUZXh0UHJvY2Vzc2luZ0FsZ29yaXRobXMoKSB7CiAgICBwcmludGxuSW50KDE2MDMpOyAvLyBTdGFydCB0ZXh0IHByb2Nlc3NpbmcgdGVzdAoKICAgIGxldCBtdXQgdGV4dDogW2kzMjsgMjAwMF0gPSBbMDsgMjAwMF07CiAgICBpbml0aWFsaXplTGFyZ2VUZXh0KCZtdXQgdGV4dCk7CgogICAgLy8gVGVzdCBjaGFyYWN0ZXIgZnJlcXVlbmN5IGNvdW50aW5nCiAgICBsZXQgZnJlcV9yZXN1bHQ6IGkzMiA9IGNoYXJhY3RlckZyZXF1ZW5jeUFuYWx5c2lzKCZ0ZXh0LCAyMDAwKTsKICAgIHByaW50bG5JbnQoZnJlcV9yZXN1bHQpOwoKICAgIC8vIFRlc3QgdGV4dCB0cmFuc2Zvcm1hdGlvbiBhbGdvcml0aG1zCiAgICBsZXQgdHJhbnNmb3JtX3Jlc3VsdDogaTMyID0gdGV4dFRyYW5zZm9ybWF0aW9uQWxnb3JpdGhtcygmbXV0IHRleHQsIDIwMDApOwogICAgcHJpbnRsbkludCh0cmFuc2Zvcm1fcmVzdWx0KTsKCiAgICAvLyBUZXN0IHdvcmQgY291bnRpbmcgYW5kIGFuYWx5c2lzCiAgICBsZXQgd29yZF9jb3VudF9yZXN1bHQ6IGkzMiA9IHdvcmRDb3VudGluZ0FsZ29yaXRobXMoJnRleHQsIDIwMDApOwogICAgcHJpbnRsbkludCh3b3JkX2NvdW50X3Jlc3VsdCk7CgogICAgLy8gVGVzdCB0ZXh0IGZpbHRlcmluZyBhbmQgY2xlYW5pbmcKICAgIGxldCBmaWx0ZXJfcmVzdWx0OiBpMzIgPSB0ZXh0RmlsdGVyaW5nQWxnb3JpdGhtcygmbXV0IHRleHQsIDIwMDApOwogICAgcHJpbnRsbkludChmaWx0ZXJfcmVzdWx0KTsKCiAgICBwcmludGxuSW50KDE2MDQpOyAvLyBFbmQgdGV4dCBwcm9jZXNzaW5nIHRlc3QKfQoKLy8gSW5pdGlhbGl6ZSBsYXJnZSB0ZXh0IGZvciBwcm9jZXNzaW5nCmZuIGluaXRpYWxpemVMYXJnZVRleHQodGV4dDogJm11dCBbaTMyOyAyMDAwXSkgewogICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgbGV0IG11dCBzZWVkOiBpMzIgPSA1MjE7CgogICAgd2hpbGUgKGkgPCAyMDAwKSB7CiAgICAgICAgc2VlZCA9IChzZWVkICogMTY2ICsgMTk0MjIzKSAlIDIxNDc0NDc7CiAgICAgICAgaWYgKHNlZWQgPCAwKSB7CiAgICAgICAgICAgIHNlZWQgPSAtc2VlZDsKICAgICAgICB9CgogICAgICAgIC8vIEdlbmVyYXRlIG1vc3RseSBsb3dlcmNhc2UgbGV0dGVycyB3aXRoIHNvbWUgc3BhY2VzIGFuZCBwdW5jdHVhdGlvbgogICAgICAgIGxldCBjaGFyX3R5cGU6IGkzMiA9IHNlZWQgJSAxMDA7CiAgICAgICAgaWYgKGNoYXJfdHlwZSA8IDcwKSB7CiAgICAgICAgICAgIHRleHRbaSBhcyB1c2l6ZV0gPSA5NyArIChzZWVkICUgMjYpOyAvLyBsb3dlcmNhc2UgYS16CiAgICAgICAgfSBlbHNlIGlmIChjaGFyX3R5cGUgPCA4NSkgewogICAgICAgICAgICB0ZXh0W2kgYXMgdXNpemVdID0gNjUgKyAoc2VlZCAlIDI2KTsgLy8gdXBwZXJjYXNlIEEtWgogICAgICAgIH0gZWxzZSBpZiAoY2hhcl90eXBlIDwgOTUpIHsKICAgICAgICAgICAgdGV4dFtpIGFzIHVzaXplXSA9IDMyOyAvLyBzcGFjZQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRleHRbaSBhcyB1c2l6ZV0gPSAzMyArIChzZWVkICUgMTUpOyAvLyBwdW5jdHVhdGlvbgogICAgICAgIH0KCiAgICAgICAgaSA9IGkgKyAxOwogICAgfQp9CgovLyBDaGFyYWN0ZXIgZnJlcXVlbmN5IGFuYWx5c2lzCmZuIGNoYXJhY3RlckZyZXF1ZW5jeUFuYWx5c2lzKHRleHQ6ICZbaTMyOyAyMDAwXSwgdGV4dF9sZW46IGkzMikgLT4gaTMyIHsKICAgIGxldCBtdXQgZnJlcV90YWJsZTogW2kzMjsgMjU2XSA9IFswOyAyNTZdOwogICAgbGV0IG11dCBpOiBpMzIgPSAwOwoKICAgIC8vIENvdW50IGNoYXJhY3RlciBmcmVxdWVuY2llcwogICAgd2hpbGUgKGkgPCB0ZXh0X2xlbikgewogICAgICAgIGlmICh0ZXh0W2kgYXMgdXNpemVdID49IDAgJiYgdGV4dFtpIGFzIHVzaXplXSA8IDI1NikgewogICAgICAgICAgICBmcmVxX3RhYmxlW3RleHRbaSBhcyB1c2l6ZV0gYXMgdXNpemVdID0gZnJlcV90YWJsZVt0ZXh0W2kgYXMgdXNpemVdIGFzIHVzaXplXSArIDE7CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICAvLyBGaW5kIG1vc3QgZnJlcXVlbnQgY2hhcmFjdGVyCiAgICBsZXQgbXV0IG1heF9mcmVxOiBpMzIgPSAwOwogICAgbGV0IG11dCBtb3N0X2ZyZXF1ZW50X2NoYXI6IGkzMiA9IDA7CiAgICBpID0gMDsKICAgIHdoaWxlIChpIDwgMjU2KSB7CiAgICAgICAgaWYgKGZyZXFfdGFibGVbaSBhcyB1c2l6ZV0gPiBtYXhfZnJlcSkgewogICAgICAgICAgICBtYXhfZnJlcSA9IGZyZXFfdGFibGVbaSBhcyB1c2l6ZV07CiAgICAgICAgICAgIG1vc3RfZnJlcXVlbnRfY2hhciA9IGk7CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICByZXR1cm4gbW9zdF9mcmVxdWVudF9jaGFyICsgbWF4X2ZyZXE7Cn0KCi8vIFRleHQgdHJhbnNmb3JtYXRpb24gYWxnb3JpdGhtcwpmbiB0ZXh0VHJhbnNmb3JtYXRpb25BbGdvcml0aG1zKHRleHQ6ICZtdXQgW2kzMjsgMjAwMF0sIHRleHRfbGVuOiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgbXV0IHRyYW5zZm9ybWF0aW9uczogaTMyID0gMDsKICAgIGxldCBtdXQgaTogaTMyID0gMDsKCiAgICAvLyBDb252ZXJ0IHRvIHVwcGVyY2FzZQogICAgd2hpbGUgKGkgPCB0ZXh0X2xlbikgewogICAgICAgIGlmICh0ZXh0W2kgYXMgdXNpemVdID49IDk3ICYmIHRleHRbaSBhcyB1c2l6ZV0gPD0gMTIyKSB7CiAgICAgICAgICAgIC8vIGxvd2VyY2FzZSBhLXoKICAgICAgICAgICAgdGV4dFtpIGFzIHVzaXplXSA9IHRleHRbaSBhcyB1c2l6ZV0gLSAzMjsgLy8gQ29udmVydCB0byB1cHBlcmNhc2UKICAgICAgICAgICAgdHJhbnNmb3JtYXRpb25zID0gdHJhbnNmb3JtYXRpb25zICsgMTsKICAgICAgICB9CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQoKICAgIC8vIENhZXNhciBjaXBoZXIgdHJhbnNmb3JtYXRpb24KICAgIGkgPSAwOwogICAgd2hpbGUgKGkgPCB0ZXh0X2xlbikgewogICAgICAgIGlmICh0ZXh0W2kgYXMgdXNpemVdID49IDY1ICYmIHRleHRbaSBhcyB1c2l6ZV0gPD0gOTApIHsKICAgICAgICAgICAgLy8gdXBwZXJjYXNlIEEtWgogICAgICAgICAgICB0ZXh0W2kgYXMgdXNpemVdID0gNjUgKyAoKHRleHRbaSBhcyB1c2l6ZV0gLSA2NSArIDMpICUgMjYpOyAvLyBTaGlmdCBieSAzCiAgICAgICAgICAgIHRyYW5zZm9ybWF0aW9ucyA9IHRyYW5zZm9ybWF0aW9ucyArIDE7CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICAvLyBST1QxMyB0cmFuc2Zvcm1hdGlvbgogICAgaSA9IDA7CiAgICB3aGlsZSAoaSA8IHRleHRfbGVuKSB7CiAgICAgICAgaWYgKHRleHRbaSBhcyB1c2l6ZV0gPj0gNjUgJiYgdGV4dFtpIGFzIHVzaXplXSA8PSA5MCkgewogICAgICAgICAgICAvLyB1cHBlcmNhc2UgQS1aCiAgICAgICAgICAgIHRleHRbaSBhcyB1c2l6ZV0gPSA2NSArICgodGV4dFtpIGFzIHVzaXplXSAtIDY1ICsgMTMpICUgMjYpOyAvLyBST1QxMwogICAgICAgICAgICB0cmFuc2Zvcm1hdGlvbnMgPSB0cmFuc2Zvcm1hdGlvbnMgKyAxOwogICAgICAgIH0KICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgcmV0dXJuIHRyYW5zZm9ybWF0aW9uczsKfQoKLy8gV29yZCBjb3VudGluZyBhbGdvcml0aG1zCmZuIHdvcmRDb3VudGluZ0FsZ29yaXRobXModGV4dDogJltpMzI7IDIwMDBdLCB0ZXh0X2xlbjogaTMyKSAtPiBpMzIgewogICAgbGV0IG11dCB3b3JkX2NvdW50OiBpMzIgPSAwOwogICAgbGV0IG11dCBpbl93b3JkOiBib29sID0gZmFsc2U7CiAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CgogICAgLy8gQ291bnQgd29yZHMgKHNlcXVlbmNlcyBvZiBub24tc3BhY2UgY2hhcmFjdGVycykKICAgIHdoaWxlIChpIDwgdGV4dF9sZW4pIHsKICAgICAgICBpZiAodGV4dFtpIGFzIHVzaXplXSA9PSAzMiB8fCB0ZXh0W2kgYXMgdXNpemVdID09IDkgfHwgdGV4dFtpIGFzIHVzaXplXSA9PSAxMCkgewogICAgICAgICAgICAvLyBzcGFjZSwgdGFiLCBuZXdsaW5lCiAgICAgICAgICAgIGluX3dvcmQgPSBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAoIWluX3dvcmQpIHsKICAgICAgICAgICAgICAgIHdvcmRfY291bnQgPSB3b3JkX2NvdW50ICsgMTsKICAgICAgICAgICAgICAgIGluX3dvcmQgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICAvLyBDb3VudCBzcGVjaWZpYyBjaGFyYWN0ZXIgcGF0dGVybnMKICAgIGxldCBtdXQgcGF0dGVybl9jb3VudDogaTMyID0gMDsKICAgIGkgPSAwOwogICAgd2hpbGUgKGkgPCB0ZXh0X2xlbiAtIDIpIHsKICAgICAgICAvLyBDb3VudCAiVEhFIiBwYXR0ZXJucwogICAgICAgIGlmICgodGV4dFtpIGFzIHVzaXplXSA9PSA4NCB8fCB0ZXh0W2kgYXMgdXNpemVdID09IDExNikgJiYgLy8gVCBvciB0CiAgICAgICAgICAgKHRleHRbaSBhcyB1c2l6ZSArIDFdID09IDcyIHx8IHRleHRbaSBhcyB1c2l6ZSArIDFdID09IDEwNCkgJiYgLy8gSCBvciBoCiAgICAgICAgICAgKHRleHRbaSBhcyB1c2l6ZSArIDJdID09IDY5IHx8IHRleHRbaSBhcyB1c2l6ZSArIDJdID09IDEwMSkpCiAgICAgICAgewogICAgICAgICAgICAvLyBFIG9yIGUKICAgICAgICAgICAgcGF0dGVybl9jb3VudCA9IHBhdHRlcm5fY291bnQgKyAxOwogICAgICAgIH0KICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgcmV0dXJuIHdvcmRfY291bnQgKyBwYXR0ZXJuX2NvdW50Owp9CgovLyBUZXh0IGZpbHRlcmluZyBhbGdvcml0aG1zCmZuIHRleHRGaWx0ZXJpbmdBbGdvcml0aG1zKHRleHQ6ICZtdXQgW2kzMjsgMjAwMF0sIHRleHRfbGVuOiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgbXV0IGZpbHRlcmVkX2NoYXJzOiBpMzIgPSAwOwogICAgbGV0IG11dCBpOiBpMzIgPSAwOwoKICAgIC8vIFJlbW92ZSBub24tcHJpbnRhYmxlIGNoYXJhY3RlcnMKICAgIHdoaWxlIChpIDwgdGV4dF9sZW4pIHsKICAgICAgICBpZiAodGV4dFtpIGFzIHVzaXplXSA8IDMyIHx8IHRleHRbaSBhcyB1c2l6ZV0gPiAxMjYpIHsKICAgICAgICAgICAgdGV4dFtpIGFzIHVzaXplXSA9IDMyOyAvLyBSZXBsYWNlIHdpdGggc3BhY2UKICAgICAgICAgICAgZmlsdGVyZWRfY2hhcnMgPSBmaWx0ZXJlZF9jaGFycyArIDE7CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICAvLyBSZW1vdmUgY29uc2VjdXRpdmUgc3BhY2VzCiAgICBpID0gMDsKICAgIHdoaWxlIChpIDwgdGV4dF9sZW4gLSAxKSB7CiAgICAgICAgaWYgKHRleHRbaSBhcyB1c2l6ZV0gPT0gMzIgJiYgdGV4dFtpIGFzIHVzaXplICsgMV0gPT0gMzIpIHsKICAgICAgICAgICAgLy8gU2hpZnQgcmVtYWluaW5nIGNoYXJhY3RlcnMgbGVmdAogICAgICAgICAgICBsZXQgbXV0IGo6IGkzMiA9IGkgKyAxOwogICAgICAgICAgICB3aGlsZSAoaiA8IHRleHRfbGVuIC0gMSkgewogICAgICAgICAgICAgICAgdGV4dFtqIGFzIHVzaXplXSA9IHRleHRbaiBhcyB1c2l6ZSArIDFdOwogICAgICAgICAgICAgICAgaiA9IGogKyAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRleHRbdGV4dF9sZW4gYXMgdXNpemUgLSAxXSA9IDA7CiAgICAgICAgICAgIGZpbHRlcmVkX2NoYXJzID0gZmlsdGVyZWRfY2hhcnMgKyAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGkgPSBpICsgMTsKICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuIGZpbHRlcmVkX2NoYXJzOwp9CgovLyBUZXN0IDM6IFN0cmluZyBQYXJzaW5nIEFsZ29yaXRobXMKZm4gdGVzdFN0cmluZ1BhcnNpbmdBbGdvcml0aG1zKCkgewogICAgcHJpbnRsbkludCgxNjA1KTsgLy8gU3RhcnQgcGFyc2luZyB0ZXN0CgogICAgbGV0IG11dCBpbnB1dF90ZXh0OiBbaTMyOyAxMDAwXSA9IFswOyAxMDAwXTsKICAgIGluaXRpYWxpemVQYXJzaW5nVGV4dCgmbXV0IGlucHV0X3RleHQpOwoKICAgIC8vIFRlc3QgbnVtYmVyIHBhcnNpbmcgZnJvbSB0ZXh0CiAgICBsZXQgbnVtYmVyX3BhcnNpbmdfcmVzdWx0OiBpMzIgPSBwYXJzZU51bWJlcnNGcm9tVGV4dCgmaW5wdXRfdGV4dCwgMTAwMCk7CiAgICBwcmludGxuSW50KG51bWJlcl9wYXJzaW5nX3Jlc3VsdCk7CgogICAgLy8gVGVzdCBDU1YtbGlrZSBwYXJzaW5nCiAgICBsZXQgY3N2X3BhcnNpbmdfcmVzdWx0OiBpMzIgPSBwYXJzZUNTVkxpa2VEYXRhKCZpbnB1dF90ZXh0LCAxMDAwKTsKICAgIHByaW50bG5JbnQoY3N2X3BhcnNpbmdfcmVzdWx0KTsKCiAgICAvLyBUZXN0IHRva2VuaXphdGlvbiBhbGdvcml0aG1zCiAgICBsZXQgdG9rZW5pemF0aW9uX3Jlc3VsdDogaTMyID0gdG9rZW5pemVUZXh0KCZpbnB1dF90ZXh0LCAxMDAwKTsKICAgIHByaW50bG5JbnQodG9rZW5pemF0aW9uX3Jlc3VsdCk7CgogICAgLy8gVGVzdCBleHByZXNzaW9uIHBhcnNpbmcKICAgIGxldCBleHByZXNzaW9uX3Jlc3VsdDogaTMyID0gcGFyc2VTaW1wbGVFeHByZXNzaW9ucygmaW5wdXRfdGV4dCwgMTAwMCk7CiAgICBwcmludGxuSW50KGV4cHJlc3Npb25fcmVzdWx0KTsKCiAgICBwcmludGxuSW50KDE2MDYpOyAvLyBFbmQgcGFyc2luZyB0ZXN0Cn0KCi8vIEluaXRpYWxpemUgdGV4dCBmb3IgcGFyc2luZyB0ZXN0cwpmbiBpbml0aWFsaXplUGFyc2luZ1RleHQodGV4dDogJm11dCBbaTMyOyAxMDAwXSkgewogICAgLy8gQ3JlYXRlIHRleHQgd2l0aCBudW1iZXJzLCBjb21tYXMsIGFuZCBleHByZXNzaW9ucwogICAgbGV0IHNhbXBsZV90ZXh0OiBbaTMyOyA1MF0gPSBbCiAgICAgICAgNDksIDUwLCA1MSwgNDQsIDUyLCA1MywgNTQsIDQ0LCA1NSwgNTYsIDU3LCAzMiwgLy8gIjEyMyw0NTYsNzg5ICIKICAgICAgICA0MywgMzIsIDQ5LCA1MCwgNTEsIDMyLCA0NSwgMzIsIDUyLCA1MywgNTQsIDMyLCAvLyAiKyAxMjMgLSA0NTYgIgogICAgICAgIDQyLCAzMiwgNTUsIDU2LCAzMiwgNDcsIDMyLCA1NywgMzIsIDYxLCAzMiwgNDksIDQ4LCA0OCwgMCwgLy8gIiogNzggLyA5ID0gMTAwIgogICAgICAgIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsCiAgICBdOwoKICAgIGxldCBtdXQgaTogaTMyID0gMDsKICAgIHdoaWxlIChpIDwgNTAgJiYgaSA8IDEwMDApIHsKICAgICAgICB0ZXh0W2kgYXMgdXNpemVdID0gc2FtcGxlX3RleHRbaSBhcyB1c2l6ZV07CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQoKICAgIC8vIEZpbGwgcmVzdCB3aXRoIGdlbmVyYXRlZCBjb250ZW50CiAgICBsZXQgbXV0IHNlZWQ6IGkzMiA9IDk5OwogICAgd2hpbGUgKGkgPCAxMDAwKSB7CiAgICAgICAgc2VlZCA9IChzZWVkICogNTI1ICsgNTQyMjMpICUgNDgzNjQ3OwogICAgICAgIGlmIChzZWVkIDwgMCkgewogICAgICAgICAgICBzZWVkID0gLXNlZWQ7CiAgICAgICAgfQoKICAgICAgICBsZXQgY2hhcl90eXBlOiBpMzIgPSBzZWVkICUgMTAwOwogICAgICAgIGlmIChjaGFyX3R5cGUgPCA0MCkgewogICAgICAgICAgICB0ZXh0W2kgYXMgdXNpemVdID0gNDggKyAoc2VlZCAlIDEwKTsgLy8gZGlnaXRzIDAtOQogICAgICAgIH0gZWxzZSBpZiAoY2hhcl90eXBlIDwgNTApIHsKICAgICAgICAgICAgdGV4dFtpIGFzIHVzaXplXSA9IDQ0OyAvLyBjb21tYQogICAgICAgIH0gZWxzZSBpZiAoY2hhcl90eXBlIDwgNjApIHsKICAgICAgICAgICAgdGV4dFtpIGFzIHVzaXplXSA9IDMyOyAvLyBzcGFjZQogICAgICAgIH0gZWxzZSBpZiAoY2hhcl90eXBlIDwgNzApIHsKICAgICAgICAgICAgdGV4dFtpIGFzIHVzaXplXSA9IDQzICsgKHNlZWQgJSA0KTsgLy8gKywgLSwgKiwgLwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRleHRbaSBhcyB1c2l6ZV0gPSA5NyArIChzZWVkICUgMjYpOyAvLyBsb3dlcmNhc2UgbGV0dGVycwogICAgICAgIH0KCiAgICAgICAgaSA9IGkgKyAxOwogICAgfQp9CgovLyBQYXJzZSBudW1iZXJzIGZyb20gdGV4dApmbiBwYXJzZU51bWJlcnNGcm9tVGV4dCh0ZXh0OiAmW2kzMjsgMTAwMF0sIHRleHRfbGVuOiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgbXV0IG51bWJlcnNfZm91bmQ6IGkzMiA9IDA7CiAgICBsZXQgbXV0IGN1cnJlbnRfbnVtYmVyOiBpMzIgPSAwOwogICAgbGV0IG11dCBpbl9udW1iZXI6IGJvb2wgPSBmYWxzZTsKICAgIGxldCBtdXQgaTogaTMyID0gMDsKCiAgICB3aGlsZSAoaSA8IHRleHRfbGVuKSB7CiAgICAgICAgaWYgKHRleHRbaSBhcyB1c2l6ZV0gPj0gNDggJiYgdGV4dFtpIGFzIHVzaXplXSA8PSA1NykgewogICAgICAgICAgICAvLyBkaWdpdCAwLTkKICAgICAgICAgICAgaWYgKCFpbl9udW1iZXIpIHsKICAgICAgICAgICAgICAgIGN1cnJlbnRfbnVtYmVyID0gMDsKICAgICAgICAgICAgICAgIGluX251bWJlciA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY3VycmVudF9udW1iZXIgPSBjdXJyZW50X251bWJlciAqIDEwICsgKHRleHRbaSBhcyB1c2l6ZV0gLSA0OCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKGluX251bWJlcikgewogICAgICAgICAgICAgICAgbnVtYmVyc19mb3VuZCA9IG51bWJlcnNfZm91bmQgKyAxOwogICAgICAgICAgICAgICAgaW5fbnVtYmVyID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQoKICAgIGlmIChpbl9udW1iZXIpIHsKICAgICAgICBudW1iZXJzX2ZvdW5kID0gbnVtYmVyc19mb3VuZCArIDE7CiAgICB9CgogICAgcmV0dXJuIG51bWJlcnNfZm91bmQ7Cn0KCi8vIFBhcnNlIENTVi1saWtlIGRhdGEKZm4gcGFyc2VDU1ZMaWtlRGF0YSh0ZXh0OiAmW2kzMjsgMTAwMF0sIHRleHRfbGVuOiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgbXV0IGZpZWxkczogaTMyID0gMDsKICAgIGxldCBtdXQgcm93czogaTMyID0gMDsKICAgIGxldCBtdXQgaW5fZmllbGQ6IGJvb2wgPSBmYWxzZTsKICAgIGxldCBtdXQgaTogaTMyID0gMDsKCiAgICB3aGlsZSAoaSA8IHRleHRfbGVuKSB7CiAgICAgICAgaWYgKHRleHRbaSBhcyB1c2l6ZV0gPT0gNDQpIHsKICAgICAgICAgICAgLy8gY29tbWEKICAgICAgICAgICAgaWYgKGluX2ZpZWxkKSB7CiAgICAgICAgICAgICAgICBmaWVsZHMgPSBmaWVsZHMgKyAxOwogICAgICAgICAgICAgICAgaW5fZmllbGQgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAodGV4dFtpIGFzIHVzaXplXSA9PSAxMCB8fCB0ZXh0W2kgYXMgdXNpemVdID09IDEzKSB7CiAgICAgICAgICAgIC8vIG5ld2xpbmUgb3IgY2FycmlhZ2UgcmV0dXJuCiAgICAgICAgICAgIGlmIChpbl9maWVsZCkgewogICAgICAgICAgICAgICAgZmllbGRzID0gZmllbGRzICsgMTsKICAgICAgICAgICAgICAgIGluX2ZpZWxkID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcm93cyA9IHJvd3MgKyAxOwogICAgICAgIH0gZWxzZSBpZiAodGV4dFtpIGFzIHVzaXplXSAhPSAzMikgewogICAgICAgICAgICAvLyBub3Qgc3BhY2UKICAgICAgICAgICAgaWYgKCFpbl9maWVsZCkgewogICAgICAgICAgICAgICAgaW5fZmllbGQgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICBpZiAoaW5fZmllbGQpIHsKICAgICAgICBmaWVsZHMgPSBmaWVsZHMgKyAxOwogICAgfQoKICAgIHJldHVybiBmaWVsZHMgKyByb3dzOwp9CgovLyBUb2tlbml6ZSB0ZXh0IGludG8gZGlmZmVyZW50IHRva2VuIHR5cGVzCmZuIHRva2VuaXplVGV4dCh0ZXh0OiAmW2kzMjsgMTAwMF0sIHRleHRfbGVuOiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgbXV0IHRva2VuczogaTMyID0gMDsKICAgIGxldCBtdXQgY3VycmVudF90b2tlbl90eXBlOiBpMzIgPSAwOyAvLyAwOiBub25lLCAxOiBudW1iZXIsIDI6IGxldHRlciwgMzogb3BlcmF0b3IsIDQ6IHB1bmN0dWF0aW9uCiAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CgogICAgd2hpbGUgKGkgPCB0ZXh0X2xlbikgewogICAgICAgIGxldCBuZXdfdG9rZW5fdHlwZTogaTMyID0gaWYgKHRleHRbaSBhcyB1c2l6ZV0gPj0gNDggJiYgdGV4dFtpIGFzIHVzaXplXSA8PSA1NykgewogICAgICAgICAgICAxIC8vIGRpZ2l0CiAgICAgICAgfSBlbHNlIGlmICgodGV4dFtpIGFzIHVzaXplXSA+PSA2NSAmJiB0ZXh0W2kgYXMgdXNpemVdIDw9IDkwKQogICAgICAgICAgICB8fCAodGV4dFtpIGFzIHVzaXplXSA+PSA5NyAmJiB0ZXh0W2kgYXMgdXNpemVdIDw9IDEyMikpCiAgICAgICAgewogICAgICAgICAgICAyIC8vIGxldHRlcgogICAgICAgIH0gZWxzZSBpZiAodGV4dFtpIGFzIHVzaXplXSA9PSA0MwogICAgICAgICAgICB8fCB0ZXh0W2kgYXMgdXNpemVdID09IDQ1CiAgICAgICAgICAgIHx8IHRleHRbaSBhcyB1c2l6ZV0gPT0gNDIKICAgICAgICAgICAgfHwgdGV4dFtpIGFzIHVzaXplXSA9PSA0NykKICAgICAgICB7CiAgICAgICAgICAgIDMgLy8gKywgLSwgKiwgLwogICAgICAgIH0gZWxzZSBpZiAodGV4dFtpIGFzIHVzaXplXSA9PSA0NCB8fCB0ZXh0W2kgYXMgdXNpemVdID09IDQ2IHx8IHRleHRbaSBhcyB1c2l6ZV0gPT0gNTkpIHsKICAgICAgICAgICAgNCAvLyBjb21tYSwgcGVyaW9kLCBzZW1pY29sb24KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAwIC8vIHdoaXRlc3BhY2Ugb3Igb3RoZXIKICAgICAgICB9OwoKICAgICAgICBpZiAobmV3X3Rva2VuX3R5cGUgIT0gMCAmJiBuZXdfdG9rZW5fdHlwZSAhPSBjdXJyZW50X3Rva2VuX3R5cGUpIHsKICAgICAgICAgICAgaWYgKGN1cnJlbnRfdG9rZW5fdHlwZSAhPSAwKSB7CiAgICAgICAgICAgICAgICB0b2tlbnMgPSB0b2tlbnMgKyAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGN1cnJlbnRfdG9rZW5fdHlwZSA9IG5ld190b2tlbl90eXBlOwogICAgICAgIH0gZWxzZSBpZiAobmV3X3Rva2VuX3R5cGUgPT0gMCkgewogICAgICAgICAgICBpZiAoY3VycmVudF90b2tlbl90eXBlICE9IDApIHsKICAgICAgICAgICAgICAgIHRva2VucyA9IHRva2VucyArIDE7CiAgICAgICAgICAgICAgICBjdXJyZW50X3Rva2VuX3R5cGUgPSAwOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgaWYgKGN1cnJlbnRfdG9rZW5fdHlwZSAhPSAwKSB7CiAgICAgICAgdG9rZW5zID0gdG9rZW5zICsgMTsKICAgIH0KCiAgICByZXR1cm4gdG9rZW5zOwp9CgovLyBQYXJzZSBzaW1wbGUgbWF0aGVtYXRpY2FsIGV4cHJlc3Npb25zCmZuIHBhcnNlU2ltcGxlRXhwcmVzc2lvbnModGV4dDogJltpMzI7IDEwMDBdLCB0ZXh0X2xlbjogaTMyKSAtPiBpMzIgewogICAgbGV0IG11dCBleHByZXNzaW9uczogaTMyID0gMDsKICAgIGxldCBtdXQgb3BlcmF0b3JzOiBpMzIgPSAwOwogICAgbGV0IG11dCBudW1iZXJzOiBpMzIgPSAwOwogICAgbGV0IG11dCBpOiBpMzIgPSAwOwoKICAgIHdoaWxlIChpIDwgdGV4dF9sZW4pIHsKICAgICAgICBpZiAodGV4dFtpIGFzIHVzaXplXSA+PSA0OCAmJiB0ZXh0W2kgYXMgdXNpemVdIDw9IDU3KSB7CiAgICAgICAgICAgIC8vIGRpZ2l0CiAgICAgICAgICAgIC8vIFNraXAgdGhyb3VnaCB0aGUgZW50aXJlIG51bWJlcgogICAgICAgICAgICB3aGlsZSAoaSA8IHRleHRfbGVuICYmIHRleHRbaSBhcyB1c2l6ZV0gPj0gNDggJiYgdGV4dFtpIGFzIHVzaXplXSA8PSA1NykgewogICAgICAgICAgICAgICAgaSA9IGkgKyAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG51bWJlcnMgPSBudW1iZXJzICsgMTsKICAgICAgICAgICAgaSA9IGkgLSAxOyAvLyBBZGp1c3QgZm9yIGxvb3AgaW5jcmVtZW50CiAgICAgICAgfSBlbHNlIGlmICh0ZXh0W2kgYXMgdXNpemVdID09IDQzCiAgICAgICAgICAgIHx8IHRleHRbaSBhcyB1c2l6ZV0gPT0gNDUKICAgICAgICAgICAgfHwgdGV4dFtpIGFzIHVzaXplXSA9PSA0MgogICAgICAgICAgICB8fCB0ZXh0W2kgYXMgdXNpemVdID09IDQ3KQogICAgICAgIHsKICAgICAgICAgICAgLy8gb3BlcmF0b3JzCiAgICAgICAgICAgIG9wZXJhdG9ycyA9IG9wZXJhdG9ycyArIDE7CiAgICAgICAgfSBlbHNlIGlmICh0ZXh0W2kgYXMgdXNpemVdID09IDYxKSB7CiAgICAgICAgICAgIC8vIGVxdWFscyBzaWduCiAgICAgICAgICAgIGlmIChudW1iZXJzID4gMCAmJiBvcGVyYXRvcnMgPiAwKSB7CiAgICAgICAgICAgICAgICBleHByZXNzaW9ucyA9IGV4cHJlc3Npb25zICsgMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBudW1iZXJzID0gMDsKICAgICAgICAgICAgb3BlcmF0b3JzID0gMDsKICAgICAgICB9CgogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICByZXR1cm4gZXhwcmVzc2lvbnM7Cn0KCi8vIFRlc3QgNDogU3RyaW5nIENvbXByZXNzaW9uIEFsZ29yaXRobXMKZm4gdGVzdFN0cmluZ0NvbXByZXNzaW9uQWxnb3JpdGhtcygpIHsKICAgIHByaW50bG5JbnQoMTYwNyk7IC8vIFN0YXJ0IGNvbXByZXNzaW9uIHRlc3QKCiAgICBsZXQgbXV0IHRleHQ6IFtpMzI7IDE1MDBdID0gWzA7IDE1MDBdOwogICAgaW5pdGlhbGl6ZUNvbXByZXNzaW9uVGV4dCgmbXV0IHRleHQpOwoKICAgIC8vIFRlc3QgcnVuLWxlbmd0aCBlbmNvZGluZwogICAgbGV0IHJsZV9yZXN1bHQ6IGkzMiA9IHJ1bkxlbmd0aEVuY29kaW5nKCZ0ZXh0LCAxNTAwKTsKICAgIHByaW50bG5JbnQocmxlX3Jlc3VsdCk7CgogICAgLy8gVGVzdCBzaW1wbGUgZGljdGlvbmFyeSBjb21wcmVzc2lvbgogICAgbGV0IGRpY3RfcmVzdWx0OiBpMzIgPSBzaW1wbGVEaWN0aW9uYXJ5Q29tcHJlc3Npb24oJnRleHQsIDE1MDApOwogICAgcHJpbnRsbkludChkaWN0X3Jlc3VsdCk7CgogICAgLy8gVGVzdCBwYXR0ZXJuLWJhc2VkIGNvbXByZXNzaW9uCiAgICBsZXQgcGF0dGVybl9yZXN1bHQ6IGkzMiA9IHBhdHRlcm5CYXNlZENvbXByZXNzaW9uKCZ0ZXh0LCAxNTAwKTsKICAgIHByaW50bG5JbnQocGF0dGVybl9yZXN1bHQpOwoKICAgIC8vIFRlc3QgaHVmZm1hbi1saWtlIGZyZXF1ZW5jeSBlbmNvZGluZwogICAgbGV0IGZyZXF1ZW5jeV9yZXN1bHQ6IGkzMiA9IGZyZXF1ZW5jeUJhc2VkRW5jb2RpbmcoJnRleHQsIDE1MDApOwogICAgcHJpbnRsbkludChmcmVxdWVuY3lfcmVzdWx0KTsKCiAgICBwcmludGxuSW50KDE2MDgpOyAvLyBFbmQgY29tcHJlc3Npb24gdGVzdAp9CgovLyBJbml0aWFsaXplIHRleHQgd2l0aCBwYXR0ZXJucyBzdWl0YWJsZSBmb3IgY29tcHJlc3Npb24KZm4gaW5pdGlhbGl6ZUNvbXByZXNzaW9uVGV4dCh0ZXh0OiAmbXV0IFtpMzI7IDE1MDBdKSB7CiAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CgogICAgLy8gQ3JlYXRlIHRleHQgd2l0aCByZXBlYXRpbmcgcGF0dGVybnMKICAgIHdoaWxlIChpIDwgMTUwMCkgewogICAgICAgIGlmIChpICUgMTAwIDwgMjApIHsKICAgICAgICAgICAgdGV4dFtpIGFzIHVzaXplXSA9IDY1OyAvLyAnQScgLSBmcmVxdWVudCBjaGFyYWN0ZXIKICAgICAgICB9IGVsc2UgaWYgKGkgJSAxMDAgPCA0MCkgewogICAgICAgICAgICB0ZXh0W2kgYXMgdXNpemVdID0gNjY7IC8vICdCJwogICAgICAgIH0gZWxzZSBpZiAoaSAlIDEwMCA8IDYwKSB7CiAgICAgICAgICAgIHRleHRbaSBhcyB1c2l6ZV0gPSA2NzsgLy8gJ0MnCiAgICAgICAgfSBlbHNlIGlmIChpICUgMTAwIDwgODApIHsKICAgICAgICAgICAgdGV4dFtpIGFzIHVzaXplXSA9IDMyOyAvLyBTcGFjZQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRleHRbaSBhcyB1c2l6ZV0gPSA2OCArIChpICUgNSk7IC8vIEQsIEUsIEYsIEcsIEgKICAgICAgICB9CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQp9CgovLyBSdW4tbGVuZ3RoIGVuY29kaW5nCmZuIHJ1bkxlbmd0aEVuY29kaW5nKHRleHQ6ICZbaTMyOyAxNTAwXSwgdGV4dF9sZW46IGkzMikgLT4gaTMyIHsKICAgIGxldCBtdXQgY29tcHJlc3NlZF9zaXplOiBpMzIgPSAwOwogICAgbGV0IG11dCBpOiBpMzIgPSAwOwoKICAgIHdoaWxlIChpIDwgdGV4dF9sZW4pIHsKICAgICAgICBsZXQgY3VycmVudF9jaGFyOiBpMzIgPSB0ZXh0W2kgYXMgdXNpemVdOwogICAgICAgIGxldCBtdXQgY291bnQ6IGkzMiA9IDE7CgogICAgICAgIC8vIENvdW50IGNvbnNlY3V0aXZlIG9jY3VycmVuY2VzCiAgICAgICAgd2hpbGUgKGkgKyBjb3VudCA8IHRleHRfbGVuICYmIHRleHRbKGkgKyBjb3VudCkgYXMgdXNpemVdID09IGN1cnJlbnRfY2hhcikgewogICAgICAgICAgICBjb3VudCA9IGNvdW50ICsgMTsKICAgICAgICB9CgogICAgICAgIC8vIEluIGFjdHVhbCBSTEUsIHdlJ2Qgc3RvcmUgY2hhciArIGNvdW50CiAgICAgICAgLy8gSGVyZSB3ZSBqdXN0IGNhbGN1bGF0ZSBjb21wcmVzc2VkIHNpemUKICAgICAgICBpZiAoY291bnQgPiAzKSB7CiAgICAgICAgICAgIGNvbXByZXNzZWRfc2l6ZSA9IGNvbXByZXNzZWRfc2l6ZSArIDI7IC8vIGNoYXIgKyBjb3VudAogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbXByZXNzZWRfc2l6ZSA9IGNvbXByZXNzZWRfc2l6ZSArIGNvdW50OyAvLyBzdG9yZSBhcyBpcwogICAgICAgIH0KCiAgICAgICAgaSA9IGkgKyBjb3VudDsKICAgIH0KCiAgICByZXR1cm4gY29tcHJlc3NlZF9zaXplOwp9CgovLyBTaW1wbGUgZGljdGlvbmFyeSBjb21wcmVzc2lvbgpmbiBzaW1wbGVEaWN0aW9uYXJ5Q29tcHJlc3Npb24odGV4dDogJltpMzI7IDE1MDBdLCB0ZXh0X2xlbjogaTMyKSAtPiBpMzIgewogICAgbGV0IG11dCBkaWN0aW9uYXJ5OiBbaTMyOyAyNTZdID0gWzA7IDI1Nl07IC8vIGZyZXF1ZW5jeSBjb3VudAogICAgbGV0IG11dCB1bmlxdWVfY2hhcnM6IGkzMiA9IDA7CiAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CgogICAgLy8gQnVpbGQgZnJlcXVlbmN5IGRpY3Rpb25hcnkKICAgIHdoaWxlIChpIDwgdGV4dF9sZW4pIHsKICAgICAgICBpZiAodGV4dFtpIGFzIHVzaXplXSA+PSAwICYmIHRleHRbaSBhcyB1c2l6ZV0gPCAyNTYpIHsKICAgICAgICAgICAgaWYgKGRpY3Rpb25hcnlbdGV4dFtpIGFzIHVzaXplXSBhcyB1c2l6ZV0gPT0gMCkgewogICAgICAgICAgICAgICAgdW5pcXVlX2NoYXJzID0gdW5pcXVlX2NoYXJzICsgMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBkaWN0aW9uYXJ5W3RleHRbaSBhcyB1c2l6ZV0gYXMgdXNpemVdID0gZGljdGlvbmFyeVt0ZXh0W2kgYXMgdXNpemVdIGFzIHVzaXplXSArIDE7CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICAvLyBDYWxjdWxhdGUgY29tcHJlc3Npb24gcmF0aW8gYmFzZWQgb24gdW5pcXVlIGNoYXJhY3RlcnMKICAgIGxldCBiaXRzX3Blcl9jaGFyOiBpMzIgPSBpZiAodW5pcXVlX2NoYXJzIDw9IDIpIHsKICAgICAgICAxCiAgICB9IGVsc2UgaWYgKHVuaXF1ZV9jaGFycyA8PSA0KSB7CiAgICAgICAgMgogICAgfSBlbHNlIGlmICh1bmlxdWVfY2hhcnMgPD0gMTYpIHsKICAgICAgICA0CiAgICB9IGVsc2UgewogICAgICAgIDgKICAgIH07CgogICAgcmV0dXJuICh0ZXh0X2xlbiAqIGJpdHNfcGVyX2NoYXIpIC8gODsgLy8gY29tcHJlc3NlZCBzaXplIGluIGJ5dGVzCn0KCi8vIFBhdHRlcm4tYmFzZWQgY29tcHJlc3Npb24KZm4gcGF0dGVybkJhc2VkQ29tcHJlc3Npb24odGV4dDogJltpMzI7IDE1MDBdLCB0ZXh0X2xlbjogaTMyKSAtPiBpMzIgewogICAgbGV0IG11dCBwYXR0ZXJuc19mb3VuZDogaTMyID0gMDsKICAgIGxldCBtdXQgc2F2aW5nczogaTMyID0gMDsKICAgIGxldCBtdXQgaTogaTMyID0gMDsKCiAgICAvLyBMb29rIGZvciBjb21tb24gMi1jaGFyYWN0ZXIgcGF0dGVybnMKICAgIHdoaWxlIChpIDwgdGV4dF9sZW4gLSAxKSB7CiAgICAgICAgbGV0IHBhdHRlcm46IGkzMiA9IHRleHRbaSBhcyB1c2l6ZV0gKiAyNTYgKyB0ZXh0W2kgYXMgdXNpemUgKyAxXTsgLy8gQ29tYmluZSB0d28gY2hhcnMKICAgICAgICBsZXQgbXV0IHBhdHRlcm5fY291bnQ6IGkzMiA9IDE7CiAgICAgICAgbGV0IG11dCBqOiBpMzIgPSBpICsgMjsKCiAgICAgICAgLy8gQ291bnQgb2NjdXJyZW5jZXMgb2YgdGhpcyBwYXR0ZXJuCiAgICAgICAgd2hpbGUgKGogPCB0ZXh0X2xlbiAtIDEpIHsKICAgICAgICAgICAgaWYgKHRleHRbaiBhcyB1c2l6ZV0gKiAyNTYgKyB0ZXh0W2ogYXMgdXNpemUgKyAxXSA9PSBwYXR0ZXJuKSB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuX2NvdW50ID0gcGF0dGVybl9jb3VudCArIDE7CiAgICAgICAgICAgICAgICBqID0gaiArIDI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBqID0gaiArIDE7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChwYXR0ZXJuX2NvdW50ID4gMikgewogICAgICAgICAgICBwYXR0ZXJuc19mb3VuZCA9IHBhdHRlcm5zX2ZvdW5kICsgMTsKICAgICAgICAgICAgc2F2aW5ncyA9IHNhdmluZ3MgKyBwYXR0ZXJuX2NvdW50OyAvLyBFYWNoIHBhdHRlcm4gaW5zdGFuY2Ugc2F2ZXMgc3BhY2UKICAgICAgICB9CgogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICByZXR1cm4gcGF0dGVybnNfZm91bmQgKyBzYXZpbmdzOwp9CgovLyBGcmVxdWVuY3ktYmFzZWQgZW5jb2RpbmcgKEh1ZmZtYW4tbGlrZSkKZm4gZnJlcXVlbmN5QmFzZWRFbmNvZGluZyh0ZXh0OiAmW2kzMjsgMTUwMF0sIHRleHRfbGVuOiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgbXV0IGZyZXF1ZW5jaWVzOiBbaTMyOyAyNTZdID0gWzA7IDI1Nl07CiAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CgogICAgLy8gQ2FsY3VsYXRlIGNoYXJhY3RlciBmcmVxdWVuY2llcwogICAgd2hpbGUgKGkgPCB0ZXh0X2xlbikgewogICAgICAgIGlmICh0ZXh0W2kgYXMgdXNpemVdID49IDAgJiYgdGV4dFtpIGFzIHVzaXplXSA8IDI1NikgewogICAgICAgICAgICBmcmVxdWVuY2llc1t0ZXh0W2kgYXMgdXNpemVdIGFzIHVzaXplXSA9IGZyZXF1ZW5jaWVzW3RleHRbaSBhcyB1c2l6ZV0gYXMgdXNpemVdICsgMTsKICAgICAgICB9CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQoKICAgIC8vIENhbGN1bGF0ZSB3ZWlnaHRlZCBiaXQgbGVuZ3RoIChzaW1wbGlmaWVkIEh1ZmZtYW4pCiAgICBsZXQgbXV0IHRvdGFsX2JpdHM6IGkzMiA9IDA7CiAgICBpID0gMDsKICAgIHdoaWxlIChpIDwgMjU2KSB7CiAgICAgICAgaWYgKGZyZXF1ZW5jaWVzW2kgYXMgdXNpemVdID4gMCkgewogICAgICAgICAgICBsZXQgYml0X2xlbmd0aDogaTMyID0gaWYgKGZyZXF1ZW5jaWVzW2kgYXMgdXNpemVdID4gdGV4dF9sZW4gLyAyKSB7CiAgICAgICAgICAgICAgICAxIC8vIE1vc3QgZnJlcXVlbnQgZ2V0cyAxIGJpdAogICAgICAgICAgICB9IGVsc2UgaWYgKGZyZXF1ZW5jaWVzW2kgYXMgdXNpemVdID4gdGV4dF9sZW4gLyA4KSB7CiAgICAgICAgICAgICAgICAzIC8vIENvbW1vbiBjaGFycyBnZXQgMyBiaXRzCiAgICAgICAgICAgIH0gZWxzZSBpZiAoZnJlcXVlbmNpZXNbaSBhcyB1c2l6ZV0gPiB0ZXh0X2xlbiAvIDMyKSB7CiAgICAgICAgICAgICAgICA1IC8vIExlc3MgY29tbW9uIGdldCA1IGJpdHMKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIDggLy8gUmFyZSBjaGFycyBnZXQgOCBiaXRzCiAgICAgICAgICAgIH07CgogICAgICAgICAgICB0b3RhbF9iaXRzID0gdG90YWxfYml0cyArIGZyZXF1ZW5jaWVzW2kgYXMgdXNpemVdICogYml0X2xlbmd0aDsKICAgICAgICB9CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQoKICAgIHJldHVybiB0b3RhbF9iaXRzIC8gODsgLy8gQ29udmVydCB0byBieXRlcwp9CgovLyBUZXN0IDU6IEFkdmFuY2VkIFN0cmluZyBBbGdvcml0aG1zCmZuIHRlc3RBZHZhbmNlZFN0cmluZ0FsZ29yaXRobXMoKSB7CiAgICBwcmludGxuSW50KDE2MDkpOyAvLyBTdGFydCBhZHZhbmNlZCB0ZXN0CgogICAgbGV0IG11dCB0ZXh0MTogW2kzMjsgODAwXSA9IFswOyA4MDBdOwogICAgbGV0IG11dCB0ZXh0MjogW2kzMjsgODAwXSA9IFswOyA4MDBdOwogICAgaW5pdGlhbGl6ZUFkdmFuY2VkVGVzdFN0cmluZ3MoJm11dCB0ZXh0MSwgJm11dCB0ZXh0Mik7CgogICAgLy8gVGVzdCBsb25nZXN0IGNvbW1vbiBzdWJzZXF1ZW5jZQogICAgbGV0IGxjc19yZXN1bHQ6IGkzMiA9IGxvbmdlc3RDb21tb25TdWJzZXF1ZW5jZSgmdGV4dDEsICZ0ZXh0MiwgMjAwLCAyMDApOwogICAgcHJpbnRsbkludChsY3NfcmVzdWx0KTsKCiAgICAvLyBUZXN0IGVkaXQgZGlzdGFuY2UgY2FsY3VsYXRpb24KICAgIGxldCBlZGl0X2Rpc3RhbmNlOiBpMzIgPSBjYWxjdWxhdGVFZGl0RGlzdGFuY2UoJnRleHQxLCAmdGV4dDIsIDEwMCwgMTAwKTsKICAgIHByaW50bG5JbnQoZWRpdF9kaXN0YW5jZSk7CgogICAgLy8gVGVzdCBwYWxpbmRyb21lIGRldGVjdGlvbgogICAgbGV0IHBhbGluZHJvbWVfcmVzdWx0OiBpMzIgPSBmaW5kTG9uZ2VzdFBhbGluZHJvbWUoJnRleHQxLCA0MDApOwogICAgcHJpbnRsbkludChwYWxpbmRyb21lX3Jlc3VsdCk7CgogICAgLy8gVGVzdCBzdHJpbmcgcm90YXRpb24gZGV0ZWN0aW9uCiAgICBsZXQgcm90YXRpb25fcmVzdWx0OiBpMzIgPSBkZXRlY3RTdHJpbmdSb3RhdGlvbnMoJnRleHQxLCAmdGV4dDIsIDIwMCwgMjAwKTsKICAgIHByaW50bG5JbnQocm90YXRpb25fcmVzdWx0KTsKCiAgICBwcmludGxuSW50KDE2MTApOyAvLyBFbmQgYWR2YW5jZWQgdGVzdAp9CgovLyBJbml0aWFsaXplIHN0cmluZ3MgZm9yIGFkdmFuY2VkIHRlc3RpbmcKZm4gaW5pdGlhbGl6ZUFkdmFuY2VkVGVzdFN0cmluZ3ModGV4dDE6ICZtdXQgW2kzMjsgODAwXSwgdGV4dDI6ICZtdXQgW2kzMjsgODAwXSkgewogICAgbGV0IG11dCBpOiBpMzIgPSAwOwoKICAgIC8vIENyZWF0ZSBzaW1pbGFyIGJ1dCBub3QgaWRlbnRpY2FsIHN0cmluZ3MKICAgIHdoaWxlIChpIDwgNDAwKSB7CiAgICAgICAgdGV4dDFbaSBhcyB1c2l6ZV0gPSA2NSArIChpICUgMjYpOyAvLyBBLVogcGF0dGVybgogICAgICAgIHRleHQyW2kgYXMgdXNpemVdID0gNjUgKyAoKGkgKyAzKSAlIDI2KTsgLy8gU2hpZnRlZCBwYXR0ZXJuCiAgICAgICAgaSA9IGkgKyAxOwogICAgfQoKICAgIC8vIEFkZCBzb21lIGNvbW1vbiBzdWJzZXF1ZW5jZXMKICAgIHRleHQxWzEwMF0gPSA4ODsgLy8gJ1gnCiAgICB0ZXh0MVsxMDFdID0gODk7IC8vICdZJwogICAgdGV4dDFbMTAyXSA9IDkwOyAvLyAnWicKCiAgICB0ZXh0MlsxNTBdID0gODg7IC8vICdYJwogICAgdGV4dDJbMTUxXSA9IDg5OyAvLyAnWScKICAgIHRleHQyWzE1Ml0gPSA5MDsgLy8gJ1onCn0KCi8vIExvbmdlc3QgQ29tbW9uIFN1YnNlcXVlbmNlIHVzaW5nIGR5bmFtaWMgcHJvZ3JhbW1pbmcKZm4gbG9uZ2VzdENvbW1vblN1YnNlcXVlbmNlKHRleHQxOiAmW2kzMjsgODAwXSwgdGV4dDI6ICZbaTMyOyA4MDBdLCBsZW4xOiBpMzIsIGxlbjI6IGkzMikgLT4gaTMyIHsKICAgIC8vIFVzZSBhIHNpbXBsaWZpZWQgYXBwcm9hY2ggZHVlIHRvIGFycmF5IHNpemUgbGltaXRhdGlvbnMKICAgIGxldCBtdXQgcHJldl9yb3c6IFtpMzI7IDIwMV0gPSBbMDsgMjAxXTsKICAgIGxldCBtdXQgY3Vycl9yb3c6IFtpMzI7IDIwMV0gPSBbMDsgMjAxXTsKCiAgICBsZXQgbXV0IGk6IGkzMiA9IDE7CiAgICB3aGlsZSAoaSA8PSBsZW4xICYmIGkgPD0gMjAwKSB7CiAgICAgICAgbGV0IG11dCBqOiBpMzIgPSAxOwogICAgICAgIHdoaWxlIChqIDw9IGxlbjIgJiYgaiA8PSAyMDApIHsKICAgICAgICAgICAgaWYgKHRleHQxW2kgYXMgdXNpemUgLSAxXSA9PSB0ZXh0MltqIGFzIHVzaXplIC0gMV0pIHsKICAgICAgICAgICAgICAgIGN1cnJfcm93W2ogYXMgdXNpemVdID0gcHJldl9yb3dbaiBhcyB1c2l6ZSAtIDFdICsgMTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmIChwcmV2X3Jvd1tqIGFzIHVzaXplXSA+IGN1cnJfcm93W2ogYXMgdXNpemUgLSAxXSkgewogICAgICAgICAgICAgICAgICAgIGN1cnJfcm93W2ogYXMgdXNpemVdID0gcHJldl9yb3dbaiBhcyB1c2l6ZV07CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGN1cnJfcm93W2ogYXMgdXNpemVdID0gY3Vycl9yb3dbaiBhcyB1c2l6ZSAtIDFdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGogPSBqICsgMTsKICAgICAgICB9CgogICAgICAgIC8vIFN3YXAgcm93cwogICAgICAgIGogPSAwOwogICAgICAgIHdoaWxlIChqIDw9IGxlbjIgJiYgaiA8PSAyMDApIHsKICAgICAgICAgICAgcHJldl9yb3dbaiBhcyB1c2l6ZV0gPSBjdXJyX3Jvd1tqIGFzIHVzaXplXTsKICAgICAgICAgICAgY3Vycl9yb3dbaiBhcyB1c2l6ZV0gPSAwOwogICAgICAgICAgICBqID0gaiArIDE7CiAgICAgICAgfQoKICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgaWYgKGxlbjIgPD0gMjAwKSB7CiAgICAgICAgcHJldl9yb3dbbGVuMiBhcyB1c2l6ZV0KICAgIH0gZWxzZSB7CiAgICAgICAgcHJldl9yb3dbMjAwXQogICAgfQp9CgovLyBDYWxjdWxhdGUgZWRpdCBkaXN0YW5jZSAoTGV2ZW5zaHRlaW4gZGlzdGFuY2UpCmZuIGNhbGN1bGF0ZUVkaXREaXN0YW5jZSh0ZXh0MTogJltpMzI7IDgwMF0sIHRleHQyOiAmW2kzMjsgODAwXSwgbGVuMTogaTMyLCBsZW4yOiBpMzIpIC0+IGkzMiB7CiAgICAvLyBVc2Ugc2ltcGxpZmllZCBhcHByb2FjaCBmb3Igc21hbGxlciBzdHJpbmdzCiAgICBsZXQgbWF4X2xlbjogaTMyID0gMTAwOwogICAgbGV0IGFjdHVhbF9sZW4xOiBpMzIgPSBpZiAobGVuMSA+IG1heF9sZW4pIHsgbWF4X2xlbiB9IGVsc2UgeyBsZW4xIH07CgogICAgbGV0IGFjdHVhbF9sZW4yOiBpMzIgPSBpZiAobGVuMiA+IG1heF9sZW4pIHsgbWF4X2xlbiB9IGVsc2UgeyBsZW4yIH07CgogICAgbGV0IG11dCBwcmV2X3JvdzogW2kzMjsgMTAxXSA9IFswOyAxMDFdOwogICAgbGV0IG11dCBjdXJyX3JvdzogW2kzMjsgMTAxXSA9IFswOyAxMDFdOwoKICAgIC8vIEluaXRpYWxpemUgZmlyc3Qgcm93CiAgICBsZXQgbXV0IGo6IGkzMiA9IDA7CiAgICB3aGlsZSAoaiA8PSBhY3R1YWxfbGVuMikgewogICAgICAgIHByZXZfcm93W2ogYXMgdXNpemVdID0gajsKICAgICAgICBqID0gaiArIDE7CiAgICB9CgogICAgbGV0IG11dCBpOiBpMzIgPSAxOwogICAgd2hpbGUgKGkgPD0gYWN0dWFsX2xlbjEpIHsKICAgICAgICBjdXJyX3Jvd1swXSA9IGk7CiAgICAgICAgaiA9IDE7CiAgICAgICAgd2hpbGUgKGogPD0gYWN0dWFsX2xlbjIpIHsKICAgICAgICAgICAgbGV0IGNvc3Q6IGkzMiA9IGlmICh0ZXh0MVtpIGFzIHVzaXplIC0gMV0gPT0gdGV4dDJbaiBhcyB1c2l6ZSAtIDFdKSB7CiAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBsZXQgZGVsZXRlX2Nvc3Q6IGkzMiA9IHByZXZfcm93W2ogYXMgdXNpemVdICsgMTsKICAgICAgICAgICAgbGV0IGluc2VydF9jb3N0OiBpMzIgPSBjdXJyX3Jvd1tqIGFzIHVzaXplIC0gMV0gKyAxOwogICAgICAgICAgICBsZXQgc3Vic3RpdHV0ZV9jb3N0OiBpMzIgPSBwcmV2X3Jvd1tqIGFzIHVzaXplIC0gMV0gKyBjb3N0OwoKICAgICAgICAgICAgbGV0IG1pbl9jb3N0OiBpMzIgPSBpZiAoZGVsZXRlX2Nvc3QgPCBpbnNlcnRfY29zdCkgewogICAgICAgICAgICAgICAgZGVsZXRlX2Nvc3QKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGluc2VydF9jb3N0CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBpZiAoc3Vic3RpdHV0ZV9jb3N0IDwgbWluX2Nvc3QpIHsKICAgICAgICAgICAgICAgIGN1cnJfcm93W2ogYXMgdXNpemVdID0gc3Vic3RpdHV0ZV9jb3N0OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY3Vycl9yb3dbaiBhcyB1c2l6ZV0gPSBtaW5fY29zdDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaiA9IGogKyAxOwogICAgICAgIH0KCiAgICAgICAgLy8gU3dhcCByb3dzCiAgICAgICAgaiA9IDA7CiAgICAgICAgd2hpbGUgKGogPD0gYWN0dWFsX2xlbjIpIHsKICAgICAgICAgICAgcHJldl9yb3dbaiBhcyB1c2l6ZV0gPSBjdXJyX3Jvd1tqIGFzIHVzaXplXTsKICAgICAgICAgICAgaiA9IGogKyAxOwogICAgICAgIH0KCiAgICAgICAgaSA9IGkgKyAxOwogICAgfQoKICAgIHJldHVybiBwcmV2X3Jvd1thY3R1YWxfbGVuMiBhcyB1c2l6ZV07Cn0KCi8vIEZpbmQgbG9uZ2VzdCBwYWxpbmRyb21lIGluIHN0cmluZwpmbiBmaW5kTG9uZ2VzdFBhbGluZHJvbWUodGV4dDogJltpMzI7IDgwMF0sIHRleHRfbGVuOiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgbXV0IG1heF9sZW5ndGg6IGkzMiA9IDE7CiAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CgogICAgLy8gQ2hlY2sgZm9yIG9kZC1sZW5ndGggcGFsaW5kcm9tZXMKICAgIHdoaWxlIChpIDwgdGV4dF9sZW4pIHsKICAgICAgICBsZXQgbXV0IGxlZnQ6IGkzMiA9IGk7CiAgICAgICAgbGV0IG11dCByaWdodDogaTMyID0gaTsKCiAgICAgICAgd2hpbGUgKGxlZnQgPj0gMCAmJiByaWdodCA8IHRleHRfbGVuICYmIHRleHRbbGVmdCBhcyB1c2l6ZV0gPT0gdGV4dFtyaWdodCBhcyB1c2l6ZV0pIHsKICAgICAgICAgICAgbGV0IGN1cnJlbnRfbGVuZ3RoOiBpMzIgPSByaWdodCAtIGxlZnQgKyAxOwogICAgICAgICAgICBpZiAoY3VycmVudF9sZW5ndGggPiBtYXhfbGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBtYXhfbGVuZ3RoID0gY3VycmVudF9sZW5ndGg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGVmdCA9IGxlZnQgLSAxOwogICAgICAgICAgICByaWdodCA9IHJpZ2h0ICsgMTsKICAgICAgICB9CgogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICAvLyBDaGVjayBmb3IgZXZlbi1sZW5ndGggcGFsaW5kcm9tZXMKICAgIGkgPSAwOwogICAgd2hpbGUgKGkgPCB0ZXh0X2xlbiAtIDEpIHsKICAgICAgICBsZXQgbXV0IGxlZnQ6IGkzMiA9IGk7CiAgICAgICAgbGV0IG11dCByaWdodDogaTMyID0gaSArIDE7CgogICAgICAgIHdoaWxlIChsZWZ0ID49IDAgJiYgcmlnaHQgPCB0ZXh0X2xlbiAmJiB0ZXh0W2xlZnQgYXMgdXNpemVdID09IHRleHRbcmlnaHQgYXMgdXNpemVdKSB7CiAgICAgICAgICAgIGxldCBjdXJyZW50X2xlbmd0aDogaTMyID0gcmlnaHQgLSBsZWZ0ICsgMTsKICAgICAgICAgICAgaWYgKGN1cnJlbnRfbGVuZ3RoID4gbWF4X2xlbmd0aCkgewogICAgICAgICAgICAgICAgbWF4X2xlbmd0aCA9IGN1cnJlbnRfbGVuZ3RoOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGxlZnQgPSBsZWZ0IC0gMTsKICAgICAgICAgICAgcmlnaHQgPSByaWdodCArIDE7CiAgICAgICAgfQoKICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgcmV0dXJuIG1heF9sZW5ndGg7Cn0KCi8vIERldGVjdCBpZiBvbmUgc3RyaW5nIGlzIGEgcm90YXRpb24gb2YgYW5vdGhlcgpmbiBkZXRlY3RTdHJpbmdSb3RhdGlvbnModGV4dDE6ICZbaTMyOyA4MDBdLCB0ZXh0MjogJltpMzI7IDgwMF0sIGxlbjE6IGkzMiwgbGVuMjogaTMyKSAtPiBpMzIgewogICAgaWYgKGxlbjEgIT0gbGVuMikgewogICAgICAgIHJldHVybiAwOyAvLyBEaWZmZXJlbnQgbGVuZ3RocyBjYW5ub3QgYmUgcm90YXRpb25zCiAgICB9CgogICAgbGV0IG11dCByb3RhdGlvbnNfZm91bmQ6IGkzMiA9IDA7CiAgICBsZXQgbXV0IHNoaWZ0OiBpMzIgPSAwOwoKICAgIC8vIFRyeSBhbGwgcG9zc2libGUgcm90YXRpb25zCiAgICB3aGlsZSAoc2hpZnQgPCBsZW4xICYmIHNoaWZ0IDwgMjAwKSB7CiAgICAgICAgLy8gTGltaXQgZm9yIHBlcmZvcm1hbmNlCiAgICAgICAgbGV0IG11dCBpc19yb3RhdGlvbjogYm9vbCA9IHRydWU7CiAgICAgICAgbGV0IG11dCBpOiBpMzIgPSAwOwoKICAgICAgICB3aGlsZSAoaSA8IGxlbjEgJiYgaSA8IDIwMCkgewogICAgICAgICAgICBsZXQgcm90YXRlZF9pbmRleDogaTMyID0gKGkgKyBzaGlmdCkgJSBsZW4xOwogICAgICAgICAgICBpZiAodGV4dDFbaSBhcyB1c2l6ZV0gIT0gdGV4dDJbcm90YXRlZF9pbmRleCBhcyB1c2l6ZV0pIHsKICAgICAgICAgICAgICAgIGlzX3JvdGF0aW9uID0gZmFsc2U7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBpID0gaSArIDE7CiAgICAgICAgfQoKICAgICAgICBpZiAoaXNfcm90YXRpb24pIHsKICAgICAgICAgICAgcm90YXRpb25zX2ZvdW5kID0gcm90YXRpb25zX2ZvdW5kICsgMTsKICAgICAgICB9CgogICAgICAgIHNoaWZ0ID0gc2hpZnQgKyAxOwogICAgfQoKICAgIHJldHVybiByb3RhdGlvbnNfZm91bmQ7Cn0K", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (7, "comprehensive7", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (8, "comprehensive8", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (9, "comprehensive9", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (10, "comprehensive10", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (11, "comprehensive11", 2, "LyoKVGVzdCBQYWNrYWdlOiBTZW1hbnRpYy0yClRlc3QgVGFyZ2V0OiBjb21wcmVoZW5zaXZlCkF1dGhvcjogV2VueGluIFpoZW5nClRpbWU6IDIwMjUtMDgtMTcKVmVyZGljdDogUGFzcwpUZXN0IE5hbWU6IENvbXByZWhlbnNpdmUgVGVzdCAxMTogQm9vbGVhbiBMb2dpYyBhbmQgT3B0aW1pemF0aW9uIFRlc3QKU3VtbWFyeTogVGhpcyB0ZXN0IGZvY3VzZXMgb24gY29tcGlsZXIgb3B0aW1pemF0aW9uIG9mIEJvb2xlYW4gb3BlcmF0aW9ucyBpbmNsdWRpbmc6CkRldGFpbHM6CkJvb2xlYW4gZXhwcmVzc2lvbiBvcHRpbWl6YXRpb24gYW5kIHNob3J0LWNpcmN1aXRpbmcKQnJhbmNoIHByZWRpY3Rpb24gb3B0aW1pemF0aW9uIGZvciBCb29sZWFuIGNvbmRpdGlvbnMKQm9vbGVhbiBhcnJheSBvcGVyYXRpb25zIGFuZCBiaXQgbWFuaXB1bGF0aW9uIHNpbXVsYXRpb24KQ29tcGxleCBjb25kaXRpb25hbCBsb2dpYyBvcHRpbWl6YXRpb24KQm9vbGVhbiBmdW5jdGlvbiBpbmxpbmluZyBhbmQgb3B0aW1pemF0aW9uClRydXRoIHRhYmxlIGNvbXB1dGF0aW9uIG9wdGltaXphdGlvbgoqLwoKLy8gVW5pZmllZCBSTkc6IFBhcmvigJNNaWxsZXIgKGE9MTY4MDcsIG09MjE0NzQ4MzY0NykgdXNpbmcgU2NocmFnZSBtZXRob2QgdG8gYXZvaWQgb3ZlcmZsb3cKZm4gcG1fcmFuZF91cGRhdGUoeDogaTMyKSAtPiBpMzIgewogICAgbGV0IGE6IGkzMiA9IDE2ODA3OwogICAgbGV0IG06IGkzMiA9IDIxNDc0ODM2NDc7CiAgICBsZXQgcTogaTMyID0gMTI3NzczOyAvLyBtIC8gYQogICAgbGV0IHI6IGkzMiA9IDI4MzY7IC8vIG0gJSBhCiAgICBsZXQgbXV0IGs6IGkzMiA9IHggLyBxOwogICAgbGV0IG11dCBuZXdfeDogaTMyID0gYSAqICh4IC0gayAqIHEpIC0gciAqIGs7CiAgICBpZiAobmV3X3ggPD0gMCkgewogICAgICAgIG5ld194ICs9IG07CiAgICB9CiAgICByZXR1cm4gbmV3X3g7Cn0KCi8vIGNvbXByZWhlbnNpdmUxMS5yeCAtIENvbXByZWhlbnNpdmUgVGVzdCAxMTogQm9vbGVhbiBMb2dpYyBhbmQgT3B0aW1pemF0aW9uIFRlc3QKLy8gVGhpcyB0ZXN0IGZvY3VzZXMgb24gY29tcGlsZXIgb3B0aW1pemF0aW9uIG9mIEJvb2xlYW4gb3BlcmF0aW9ucyBpbmNsdWRpbmc6Ci8vIC0gQm9vbGVhbiBleHByZXNzaW9uIG9wdGltaXphdGlvbiBhbmQgc2hvcnQtY2lyY3VpdGluZwovLyAtIEJyYW5jaCBwcmVkaWN0aW9uIG9wdGltaXphdGlvbiBmb3IgQm9vbGVhbiBjb25kaXRpb25zCi8vIC0gQm9vbGVhbiBhcnJheSBvcGVyYXRpb25zIGFuZCBiaXQgbWFuaXB1bGF0aW9uIHNpbXVsYXRpb24KLy8gLSBDb21wbGV4IGNvbmRpdGlvbmFsIGxvZ2ljIG9wdGltaXphdGlvbgovLyAtIEJvb2xlYW4gZnVuY3Rpb24gaW5saW5pbmcgYW5kIG9wdGltaXphdGlvbgovLyAtIFRydXRoIHRhYmxlIGNvbXB1dGF0aW9uIG9wdGltaXphdGlvbgoKZm4gbWFpbigpIHsKICAgIC8vIFBlcmZvcm1hbmNlIHRlc3QgbWFya2VyIC0gc3RhcnQKICAgIHByaW50bG5JbnQoMTEwMCk7CgogICAgLy8gVGVzdCAxOiBDb21wbGV4IEJvb2xlYW4gZXhwcmVzc2lvbiBldmFsdWF0aW9uCiAgICAvLyBUZXN0cyBjb21waWxlcidzIGFiaWxpdHkgdG8gb3B0aW1pemUgQm9vbGVhbiBsb2dpYyBhbmQgc2hvcnQtY2lyY3VpdGluZwogICAgdGVzdEJvb2xlYW5FeHByZXNzaW9uT3B0aW1pemF0aW9uKCk7CgogICAgLy8gVGVzdCAyOiBCb29sZWFuIGFycmF5IG9wZXJhdGlvbnMgYW5kIHBhdHRlcm4gbWF0Y2hpbmcKICAgIC8vIFRlc3RzIG9wdGltaXphdGlvbiBvZiBCb29sZWFuIGFycmF5IGFjY2VzcyBhbmQgbWFuaXB1bGF0aW9uCiAgICB0ZXN0Qm9vbGVhbkFycmF5T3BlcmF0aW9ucygpOwoKICAgIC8vIFRlc3QgMzogTG9naWNhbCBhbGdvcml0aG0gaW1wbGVtZW50YXRpb25zCiAgICAvLyBUZXN0cyBvcHRpbWl6YXRpb24gb2YgYWxnb3JpdGhtcyBoZWF2aWx5IHVzaW5nIEJvb2xlYW4gbG9naWMKICAgIHRlc3RMb2dpY2FsQWxnb3JpdGhtcygpOwoKICAgIC8vIFRlc3QgNDogQm9vbGVhbi1iYXNlZCBzZWFyY2ggYW5kIGZpbHRlcmluZwogICAgLy8gVGVzdHMgb3B0aW1pemF0aW9uIG9mIEJvb2xlYW4tY29uZGl0aW9uYWwgY29udHJvbCBmbG93CiAgICB0ZXN0Qm9vbGVhblNlYXJjaEFuZEZpbHRlcigpOwoKICAgIC8vIFRlc3QgNTogQm9vbGVhbiBzdGF0ZSBtYWNoaW5lIHNpbXVsYXRpb24KICAgIC8vIFRlc3RzIG9wdGltaXphdGlvbiBvZiBjb21wbGV4IEJvb2xlYW4gc3RhdGUgdHJhbnNpdGlvbnMKICAgIHRlc3RCb29sZWFuU3RhdGVNYWNoaW5lKCk7CgogICAgLy8gUGVyZm9ybWFuY2UgdGVzdCBtYXJrZXIgLSBlbmQKICAgIHByaW50bG5JbnQoMTE5OSk7CiAgICBleGl0KDApOwp9CgovLyBUZXN0IDE6IEJvb2xlYW4gRXhwcmVzc2lvbiBPcHRpbWl6YXRpb24KLy8gVGVzdHMgY29tcGlsZXIncyBzaG9ydC1jaXJjdWl0IGV2YWx1YXRpb24gYW5kIEJvb2xlYW4gZXhwcmVzc2lvbiBzaW1wbGlmaWNhdGlvbgpmbiB0ZXN0Qm9vbGVhbkV4cHJlc3Npb25PcHRpbWl6YXRpb24oKSB7CiAgICBwcmludGxuSW50KDExMDEpOyAvLyBTdGFydCBCb29sZWFuIGV4cHJlc3Npb24gdGVzdAoKICAgIGxldCBtdXQgcmVzdWx0X2NvdW50OiBpMzIgPSAwOwogICAgbGV0IG11dCBpOiBpMzIgPSAwOwoKICAgIC8vIFRlc3QgY29tcGxleCBCb29sZWFuIGV4cHJlc3Npb25zIHdpdGggcG90ZW50aWFsIGZvciBvcHRpbWl6YXRpb24KICAgIHdoaWxlIChpIDwgMTAwMDApIHsKICAgICAgICBsZXQgYTogYm9vbCA9IChpICUgMiA9PSAwKTsKICAgICAgICBsZXQgYjogYm9vbCA9IChpICUgMyA9PSAwKTsKICAgICAgICBsZXQgYzogYm9vbCA9IChpICUgNSA9PSAwKTsKICAgICAgICBsZXQgZDogYm9vbCA9IChpICUgNyA9PSAwKTsKCiAgICAgICAgLy8gQ29tcGxleCBCb29sZWFuIGV4cHJlc3Npb24gdGhhdCBjYW4gYmVuZWZpdCBmcm9tIG9wdGltaXphdGlvbgogICAgICAgIGxldCBjb21wbGV4X3Jlc3VsdDogYm9vbCA9IChhICYmIGIpIHx8IChjICYmICFkKSB8fCAoIWEgJiYgYiAmJiBjKSB8fCAoYSAmJiAhYiAmJiAhYyAmJiBkKTsKCiAgICAgICAgaWYgKGNvbXBsZXhfcmVzdWx0KSB7CiAgICAgICAgICAgIHJlc3VsdF9jb3VudCA9IHJlc3VsdF9jb3VudCArIDE7CiAgICAgICAgfQoKICAgICAgICAvLyBUZXN0IEJvb2xlYW4gZXhwcmVzc2lvbnMgd2l0aCBmdW5jdGlvbiBjYWxscwogICAgICAgIGlmIChldmFsdWF0ZUNvbXBsZXhDb25kaXRpb24oaSkgJiYgKGkgJSAxMDAgPT0gMCkpIHsKICAgICAgICAgICAgcmVzdWx0X2NvdW50ID0gcmVzdWx0X2NvdW50ICsgMjsKICAgICAgICB9CgogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICBwcmludGxuSW50KHJlc3VsdF9jb3VudCk7CiAgICBwcmludGxuSW50KDExMDIpOyAvLyBFbmQgQm9vbGVhbiBleHByZXNzaW9uIHRlc3QKfQoKLy8gSGVscGVyIGZ1bmN0aW9uIGZvciBjb21wbGV4IEJvb2xlYW4gZXZhbHVhdGlvbgpmbiBldmFsdWF0ZUNvbXBsZXhDb25kaXRpb24odmFsdWU6IGkzMikgLT4gYm9vbCB7CiAgICBsZXQgY29uZGl0aW9uMTogYm9vbCA9IGlzUHJpbWUodmFsdWUpOwogICAgbGV0IGNvbmRpdGlvbjI6IGJvb2wgPSAodmFsdWUgJSA0ID09IDApOwogICAgbGV0IGNvbmRpdGlvbjM6IGJvb2wgPSAodmFsdWUgPiAxMDApICYmICh2YWx1ZSA8IDk5MDApOwoKICAgIC8vIFJldHVybiBjb21wbGV4IEJvb2xlYW4gZXhwcmVzc2lvbgogICAgcmV0dXJuIChjb25kaXRpb24xIHx8IGNvbmRpdGlvbjIpICYmIGNvbmRpdGlvbjM7Cn0KCi8vIFRlc3QgMjogQm9vbGVhbiBBcnJheSBPcGVyYXRpb25zCi8vIFRlc3RzIG9wdGltaXphdGlvbiBvZiBCb29sZWFuIGFycmF5IG1hbmlwdWxhdGlvbiBhbmQgcGF0dGVybiBkZXRlY3Rpb24KZm4gdGVzdEJvb2xlYW5BcnJheU9wZXJhdGlvbnMoKSB7CiAgICBwcmludGxuSW50KDExMDMpOyAvLyBTdGFydCBCb29sZWFuIGFycmF5IHRlc3QKCiAgICBsZXQgbXV0IGJvb2xfZ3JpZDogW2Jvb2w7IDEwMDAwXSA9IFtmYWxzZTsgMTAwMDBdOyAvLyAxMDB4MTAwIEJvb2xlYW4gZ3JpZAogICAgbGV0IG11dCBwYXR0ZXJuX2NvdW50OiBpMzIgPSAwOwogICAgbGV0IG11dCByb3c6IGkzMiA9IDA7CgogICAgLy8gSW5pdGlhbGl6ZSBCb29sZWFuIGdyaWQgd2l0aCBwYXR0ZXJucwogICAgd2hpbGUgKHJvdyA8IDEwMCkgewogICAgICAgIGxldCBtdXQgY29sOiBpMzIgPSAwOwogICAgICAgIHdoaWxlIChjb2wgPCAxMDApIHsKICAgICAgICAgICAgbGV0IGluZGV4OiBpMzIgPSByb3cgKiAxMDAgKyBjb2w7CiAgICAgICAgICAgIC8vIENyZWF0ZSBjaGVja2VyYm9hcmQgcGF0dGVybiB3aXRoIG1vZGlmaWNhdGlvbnMKICAgICAgICAgICAgYm9vbF9ncmlkW2luZGV4IGFzIHVzaXplXSA9ICgocm93ICsgY29sKSAlIDIgPT0gMCkgJiYgKHJvdyAlIDMgIT0gMCk7CiAgICAgICAgICAgIGNvbCA9IGNvbCArIDE7CiAgICAgICAgfQogICAgICAgIHJvdyA9IHJvdyArIDE7CiAgICB9CgogICAgLy8gUGVyZm9ybSBCb29sZWFuIG9wZXJhdGlvbnMgb24gdGhlIGdyaWQKICAgIHBlcmZvcm1Cb29sZWFuR3JpZE9wZXJhdGlvbnMoYm9vbF9ncmlkLCAmbXV0IHBhdHRlcm5fY291bnQpOwoKICAgIC8vIENvdW50IHNwZWNpZmljIEJvb2xlYW4gcGF0dGVybnMKICAgIHBhdHRlcm5fY291bnQgPSBwYXR0ZXJuX2NvdW50ICsgY291bnRCb29sZWFuUGF0dGVybnMoYm9vbF9ncmlkKTsKCiAgICBwcmludGxuSW50KHBhdHRlcm5fY291bnQpOwogICAgcHJpbnRsbkludCgxMTA0KTsgLy8gRW5kIEJvb2xlYW4gYXJyYXkgdGVzdAp9CgovLyBQZXJmb3JtIHZhcmlvdXMgQm9vbGVhbiBvcGVyYXRpb25zIG9uIGdyaWQKZm4gcGVyZm9ybUJvb2xlYW5HcmlkT3BlcmF0aW9ucyhtdXQgZ3JpZDogW2Jvb2w7IDEwMDAwXSwgcGF0dGVybl9jb3VudDogJm11dCBpMzIpIHsKICAgIGxldCBtdXQgb3BlcmF0aW9uczogaTMyID0gMDsKICAgIGxldCBtdXQgcm93OiBpMzIgPSAxOwoKICAgIC8vIEFwcGx5IEJvb2xlYW4gY2VsbHVsYXIgYXV0b21hdG9uIHJ1bGVzCiAgICB3aGlsZSAocm93IDwgOTkpIHsKICAgICAgICBsZXQgbXV0IGNvbDogaTMyID0gMTsKICAgICAgICB3aGlsZSAoY29sIDwgOTkpIHsKICAgICAgICAgICAgbGV0IGluZGV4OiBpMzIgPSByb3cgKiAxMDAgKyBjb2w7CgogICAgICAgICAgICAvLyBDb3VudCBCb29sZWFuIG5laWdoYm9ycwogICAgICAgICAgICBsZXQgbmVpZ2hib3JfY291bnQ6IGkzMiA9IGNvdW50Qm9vbGVhbk5laWdoYm9ycyhncmlkLCByb3csIGNvbCk7CgogICAgICAgICAgICAvLyBBcHBseSBCb29sZWFuIHJ1bGVzIGJhc2VkIG9uIG5laWdoYm9ycwogICAgICAgICAgICBpZiAoZ3JpZFtpbmRleCBhcyB1c2l6ZV0gJiYgKG5laWdoYm9yX2NvdW50IDwgMiB8fCBuZWlnaGJvcl9jb3VudCA+IDMpKSB7CiAgICAgICAgICAgICAgICBncmlkW2luZGV4IGFzIHVzaXplXSA9IGZhbHNlOwogICAgICAgICAgICAgICAgb3BlcmF0aW9ucyA9IG9wZXJhdGlvbnMgKyAxOwogICAgICAgICAgICB9IGVsc2UgaWYgKCFncmlkW2luZGV4IGFzIHVzaXplXSAmJiBuZWlnaGJvcl9jb3VudCA9PSAzKSB7CiAgICAgICAgICAgICAgICBncmlkW2luZGV4IGFzIHVzaXplXSA9IHRydWU7CiAgICAgICAgICAgICAgICBvcGVyYXRpb25zID0gb3BlcmF0aW9ucyArIDE7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbCA9IGNvbCArIDE7CiAgICAgICAgfQogICAgICAgIHJvdyA9IHJvdyArIDE7CiAgICB9CgogICAgKnBhdHRlcm5fY291bnQgPSAqcGF0dGVybl9jb3VudCArIG9wZXJhdGlvbnM7Cn0KCi8vIENvdW50IEJvb2xlYW4gbmVpZ2hib3JzIGluIGdyaWQKZm4gY291bnRCb29sZWFuTmVpZ2hib3JzKGdyaWQ6IFtib29sOyAxMDAwMF0sIHJvdzogaTMyLCBjb2w6IGkzMikgLT4gaTMyIHsKICAgIGxldCBtdXQgY291bnQ6IGkzMiA9IDA7CiAgICBsZXQgbXV0IGRyOiBpMzIgPSAtMTsKCiAgICB3aGlsZSAoZHIgPD0gMSkgewogICAgICAgIGxldCBtdXQgZGM6IGkzMiA9IC0xOwogICAgICAgIHdoaWxlIChkYyA8PSAxKSB7CiAgICAgICAgICAgIGlmIChkciAhPSAwIHx8IGRjICE9IDApIHsKICAgICAgICAgICAgICAgIGxldCBucjogaTMyID0gcm93ICsgZHI7CiAgICAgICAgICAgICAgICBsZXQgbmM6IGkzMiA9IGNvbCArIGRjOwogICAgICAgICAgICAgICAgaWYgKG5yID49IDAgJiYgbnIgPCAxMDAgJiYgbmMgPj0gMCAmJiBuYyA8IDEwMCkgewogICAgICAgICAgICAgICAgICAgIGxldCBuZWlnaGJvcl9pbmRleDogaTMyID0gbnIgKiAxMDAgKyBuYzsKICAgICAgICAgICAgICAgICAgICBpZiAoZ3JpZFtuZWlnaGJvcl9pbmRleCBhcyB1c2l6ZV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgPSBjb3VudCArIDE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGRjID0gZGMgKyAxOwogICAgICAgIH0KICAgICAgICBkciA9IGRyICsgMTsKICAgIH0KCiAgICByZXR1cm4gY291bnQ7Cn0KCi8vIENvdW50IHNwZWNpZmljIEJvb2xlYW4gcGF0dGVybnMgaW4gZ3JpZApmbiBjb3VudEJvb2xlYW5QYXR0ZXJucyhncmlkOiBbYm9vbDsgMTAwMDBdKSAtPiBpMzIgewogICAgbGV0IG11dCBwYXR0ZXJuX2NvdW50OiBpMzIgPSAwOwogICAgbGV0IG11dCByb3c6IGkzMiA9IDA7CgogICAgLy8gTG9vayBmb3Igc3BlY2lmaWMgQm9vbGVhbiBwYXR0ZXJucwogICAgd2hpbGUgKHJvdyA8IDk4KSB7CiAgICAgICAgbGV0IG11dCBjb2w6IGkzMiA9IDA7CiAgICAgICAgd2hpbGUgKGNvbCA8IDk4KSB7CiAgICAgICAgICAgIC8vIENoZWNrIGZvciAyeDIgQm9vbGVhbiBwYXR0ZXJucwogICAgICAgICAgICBpZiAoY2hlY2tCb29sZWFuUGF0dGVybjJ4MihncmlkLCByb3csIGNvbCkpIHsKICAgICAgICAgICAgICAgIHBhdHRlcm5fY291bnQgPSBwYXR0ZXJuX2NvdW50ICsgMTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIDN4MyBCb29sZWFuIHBhdHRlcm5zCiAgICAgICAgICAgIGlmIChjaGVja0Jvb2xlYW5QYXR0ZXJuM3gzKGdyaWQsIHJvdywgY29sKSkgewogICAgICAgICAgICAgICAgcGF0dGVybl9jb3VudCA9IHBhdHRlcm5fY291bnQgKyAyOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb2wgPSBjb2wgKyAxOwogICAgICAgIH0KICAgICAgICByb3cgPSByb3cgKyAxOwogICAgfQoKICAgIHJldHVybiBwYXR0ZXJuX2NvdW50Owp9CgovLyBDaGVjayBmb3Igc3BlY2lmaWMgMngyIEJvb2xlYW4gcGF0dGVybgpmbiBjaGVja0Jvb2xlYW5QYXR0ZXJuMngyKGdyaWQ6IFtib29sOyAxMDAwMF0sIHJvdzogaTMyLCBjb2w6IGkzMikgLT4gYm9vbCB7CiAgICBsZXQgdGw6IGJvb2wgPSBncmlkWyhyb3cgKiAxMDAgKyBjb2wpIGFzIHVzaXplXTsKICAgIGxldCB0cjogYm9vbCA9IGdyaWRbKHJvdyAqIDEwMCArIGNvbCArIDEpIGFzIHVzaXplXTsKICAgIGxldCBibDogYm9vbCA9IGdyaWRbKChyb3cgKyAxKSAqIDEwMCArIGNvbCkgYXMgdXNpemVdOwogICAgbGV0IGJyOiBib29sID0gZ3JpZFsoKHJvdyArIDEpICogMTAwICsgY29sICsgMSkgYXMgdXNpemVdOwoKICAgIC8vIExvb2sgZm9yIHNwZWNpZmljIHBhdHRlcm5zCiAgICByZXR1cm4gKHRsICYmICF0ciAmJiAhYmwgJiYgYnIpIHx8ICghdGwgJiYgdHIgJiYgYmwgJiYgIWJyKTsKfQoKLy8gQ2hlY2sgZm9yIHNwZWNpZmljIDN4MyBCb29sZWFuIHBhdHRlcm4KZm4gY2hlY2tCb29sZWFuUGF0dGVybjN4MyhncmlkOiBbYm9vbDsgMTAwMDBdLCByb3c6IGkzMiwgY29sOiBpMzIpIC0+IGJvb2wgewogICAgaWYgKHJvdyArIDIgPj0gMTAwIHx8IGNvbCArIDIgPj0gMTAwKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIGxldCBtdXQgdHJ1ZV9jb3VudDogaTMyID0gMDsKICAgIGxldCBtdXQgcjogaTMyID0gMDsKCiAgICB3aGlsZSAociA8IDMpIHsKICAgICAgICBsZXQgbXV0IGM6IGkzMiA9IDA7CiAgICAgICAgd2hpbGUgKGMgPCAzKSB7CiAgICAgICAgICAgIGlmIChncmlkWygocm93ICsgcikgKiAxMDAgKyAoY29sICsgYykpIGFzIHVzaXplXSkgewogICAgICAgICAgICAgICAgdHJ1ZV9jb3VudCA9IHRydWVfY291bnQgKyAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGMgPSBjICsgMTsKICAgICAgICB9CiAgICAgICAgciA9IHIgKyAxOwogICAgfQoKICAgIC8vIFBhdHRlcm46IGV4YWN0bHkgNSB0cnVlIHZhbHVlcyBpbiAzeDMgZ3JpZAogICAgcmV0dXJuIHRydWVfY291bnQgPT0gNTsKfQoKLy8gVGVzdCAzOiBMb2dpY2FsIEFsZ29yaXRobXMKLy8gVGVzdHMgb3B0aW1pemF0aW9uIG9mIGFsZ29yaXRobXMgdGhhdCBoZWF2aWx5IHVzZSBCb29sZWFuIGxvZ2ljCmZuIHRlc3RMb2dpY2FsQWxnb3JpdGhtcygpIHsKICAgIHByaW50bG5JbnQoMTEwNSk7IC8vIFN0YXJ0IGxvZ2ljYWwgYWxnb3JpdGhtcyB0ZXN0CgogICAgbGV0IG11dCByZXN1bHRfc3VtOiBpMzIgPSAwOwoKICAgIC8vIFRlc3QgQm9vbGVhbiBzYXRpc2ZpYWJpbGl0eSBzb2x2ZXIgc2ltdWxhdGlvbgogICAgcmVzdWx0X3N1bSA9IHJlc3VsdF9zdW0gKyB0ZXN0Qm9vbGVhblNBVFNvbHZlcigpOwoKICAgIC8vIFRlc3QgQm9vbGVhbiBmdW5jdGlvbiBldmFsdWF0aW9uCiAgICByZXN1bHRfc3VtID0gcmVzdWx0X3N1bSArIHRlc3RCb29sZWFuRnVuY3Rpb25FdmFsdWF0aW9uKCk7CgogICAgLy8gVGVzdCBsb2dpY2FsIHB1enpsZXMgc29sdmluZwogICAgcmVzdWx0X3N1bSA9IHJlc3VsdF9zdW0gKyBzb2x2ZUJvb2xlYW5QdXp6bGVzKCk7CgogICAgcHJpbnRsbkludChyZXN1bHRfc3VtKTsKICAgIHByaW50bG5JbnQoMTEwNik7IC8vIEVuZCBsb2dpY2FsIGFsZ29yaXRobXMgdGVzdAp9CgovLyBTaW11bGF0ZSBCb29sZWFuIHNhdGlzZmlhYmlsaXR5IHNvbHZlcgpmbiB0ZXN0Qm9vbGVhblNBVFNvbHZlcigpIC0+IGkzMiB7CiAgICBsZXQgbXV0IHNhdGlzZmlhYmxlX2NvdW50OiBpMzIgPSAwOwogICAgbGV0IG11dCBhc3NpZ25tZW50OiBpMzIgPSAwOwoKICAgIC8vIFRlc3QgYWxsIHBvc3NpYmxlIEJvb2xlYW4gYXNzaWdubWVudHMgZm9yIGEgMTAtdmFyaWFibGUgcHJvYmxlbQogICAgd2hpbGUgKGFzc2lnbm1lbnQgPCAxMDI0KSB7CiAgICAgICAgLy8gMl4xMCA9IDEwMjQKICAgICAgICBpZiAoZXZhbHVhdGVCb29sZWFuRm9ybXVsYShhc3NpZ25tZW50KSkgewogICAgICAgICAgICBzYXRpc2ZpYWJsZV9jb3VudCA9IHNhdGlzZmlhYmxlX2NvdW50ICsgMTsKICAgICAgICB9CiAgICAgICAgYXNzaWdubWVudCA9IGFzc2lnbm1lbnQgKyAxOwogICAgfQoKICAgIHJldHVybiBzYXRpc2ZpYWJsZV9jb3VudDsKfQoKLy8gRXZhbHVhdGUgQm9vbGVhbiBmb3JtdWxhIHdpdGggZ2l2ZW4gdmFyaWFibGUgYXNzaWdubWVudApmbiBldmFsdWF0ZUJvb2xlYW5Gb3JtdWxhKGFzc2lnbm1lbnQ6IGkzMikgLT4gYm9vbCB7CiAgICAvLyBFeHRyYWN0IEJvb2xlYW4gdmFyaWFibGVzIGZyb20gYXNzaWdubWVudCAoYml0IHJlcHJlc2VudGF0aW9uKQogICAgbGV0IHgwOiBib29sID0gKGFzc2lnbm1lbnQgJiAxKSAhPSAwOwogICAgbGV0IHgxOiBib29sID0gKGFzc2lnbm1lbnQgJiAyKSAhPSAwOwogICAgbGV0IHgyOiBib29sID0gKGFzc2lnbm1lbnQgJiA0KSAhPSAwOwogICAgbGV0IHgzOiBib29sID0gKGFzc2lnbm1lbnQgJiA4KSAhPSAwOwogICAgbGV0IHg0OiBib29sID0gKGFzc2lnbm1lbnQgJiAxNikgIT0gMDsKICAgIGxldCB4NTogYm9vbCA9IChhc3NpZ25tZW50ICYgMzIpICE9IDA7CiAgICBsZXQgeDY6IGJvb2wgPSAoYXNzaWdubWVudCAmIDY0KSAhPSAwOwogICAgbGV0IHg3OiBib29sID0gKGFzc2lnbm1lbnQgJiAxMjgpICE9IDA7CiAgICBsZXQgeDg6IGJvb2wgPSAoYXNzaWdubWVudCAmIDI1NikgIT0gMDsKICAgIGxldCB4OTogYm9vbCA9IChhc3NpZ25tZW50ICYgNTEyKSAhPSAwOwoKICAgIC8vIENvbXBsZXggQm9vbGVhbiBmb3JtdWxhIChDTkYgLSBDb25qdW5jdGl2ZSBOb3JtYWwgRm9ybSkKICAgIGxldCBjbGF1c2UxOiBib29sID0geDAgfHwgIXgxIHx8IHgyOwogICAgbGV0IGNsYXVzZTI6IGJvb2wgPSAheDAgfHwgeDMgfHwgIXg0OwogICAgbGV0IGNsYXVzZTM6IGJvb2wgPSB4MSB8fCAheDIgfHwgeDU7CiAgICBsZXQgY2xhdXNlNDogYm9vbCA9ICF4MyB8fCB4NCB8fCAheDY7CiAgICBsZXQgY2xhdXNlNTogYm9vbCA9IHgyIHx8IHg3IHx8ICF4ODsKICAgIGxldCBjbGF1c2U2OiBib29sID0gIXg1IHx8ICF4NyB8fCB4OTsKICAgIGxldCBjbGF1c2U3OiBib29sID0geDYgfHwgeDggfHwgIXg5OwogICAgbGV0IGNsYXVzZTg6IGJvb2wgPSAheDAgfHwgIXgxIHx8ICF4MjsKCiAgICByZXR1cm4gY2xhdXNlMSAmJiBjbGF1c2UyICYmIGNsYXVzZTMgJiYgY2xhdXNlNCAmJiBjbGF1c2U1ICYmIGNsYXVzZTYgJiYgY2xhdXNlNyAmJiBjbGF1c2U4Owp9CgovLyBUZXN0IEJvb2xlYW4gZnVuY3Rpb24gZXZhbHVhdGlvbiB3aXRoIHRydXRoIHRhYmxlcwpmbiB0ZXN0Qm9vbGVhbkZ1bmN0aW9uRXZhbHVhdGlvbigpIC0+IGkzMiB7CiAgICBsZXQgbXV0IGV2YWx1YXRpb25fY291bnQ6IGkzMiA9IDA7CiAgICBsZXQgbXV0IGlucHV0OiBpMzIgPSAwOwoKICAgIC8vIEV2YWx1YXRlIHZhcmlvdXMgQm9vbGVhbiBmdW5jdGlvbnMKICAgIHdoaWxlIChpbnB1dCA8IDI1NikgewogICAgICAgIC8vIDJeOCA9IDI1NgogICAgICAgIC8vIEV2YWx1YXRlIG11bHRpcGxlIEJvb2xlYW4gZnVuY3Rpb25zCiAgICAgICAgaWYgKGV2YWx1YXRlUGFyaXR5RnVuY3Rpb24oaW5wdXQpKSB7CiAgICAgICAgICAgIGV2YWx1YXRpb25fY291bnQgPSBldmFsdWF0aW9uX2NvdW50ICsgMTsKICAgICAgICB9CgogICAgICAgIGlmIChldmFsdWF0ZU1ham9yaXR5RnVuY3Rpb24oaW5wdXQpKSB7CiAgICAgICAgICAgIGV2YWx1YXRpb25fY291bnQgPSBldmFsdWF0aW9uX2NvdW50ICsgMjsKICAgICAgICB9CgogICAgICAgIGlmIChldmFsdWF0ZVRocmVzaG9sZEZ1bmN0aW9uKGlucHV0KSkgewogICAgICAgICAgICBldmFsdWF0aW9uX2NvdW50ID0gZXZhbHVhdGlvbl9jb3VudCArIDM7CiAgICAgICAgfQoKICAgICAgICBpbnB1dCA9IGlucHV0ICsgMTsKICAgIH0KCiAgICByZXR1cm4gZXZhbHVhdGlvbl9jb3VudDsKfQoKLy8gRXZhbHVhdGUgcGFyaXR5IGZ1bmN0aW9uIChYT1Igb2YgYWxsIGJpdHMpCmZuIGV2YWx1YXRlUGFyaXR5RnVuY3Rpb24oaW5wdXQ6IGkzMikgLT4gYm9vbCB7CiAgICBsZXQgbXV0IHBhcml0eTogYm9vbCA9IGZhbHNlOwogICAgbGV0IG11dCB0ZW1wOiBpMzIgPSBpbnB1dDsKCiAgICB3aGlsZSAodGVtcCA+IDApIHsKICAgICAgICBpZiAoKHRlbXAgJiAxKSAhPSAwKSB7CiAgICAgICAgICAgIHBhcml0eSA9ICFwYXJpdHk7CiAgICAgICAgfQogICAgICAgIHRlbXAgPSB0ZW1wIC8gMjsKICAgIH0KCiAgICByZXR1cm4gcGFyaXR5Owp9CgovLyBFdmFsdWF0ZSBtYWpvcml0eSBmdW5jdGlvbiAobW9yZSB0aGFuIGhhbGYgYml0cyBhcmUgMSkKZm4gZXZhbHVhdGVNYWpvcml0eUZ1bmN0aW9uKGlucHV0OiBpMzIpIC0+IGJvb2wgewogICAgbGV0IG11dCBjb3VudDogaTMyID0gMDsKICAgIGxldCBtdXQgdGVtcDogaTMyID0gaW5wdXQ7CgogICAgd2hpbGUgKHRlbXAgPiAwKSB7CiAgICAgICAgaWYgKCh0ZW1wICYgMSkgIT0gMCkgewogICAgICAgICAgICBjb3VudCA9IGNvdW50ICsgMTsKICAgICAgICB9CiAgICAgICAgdGVtcCA9IHRlbXAgLyAyOwogICAgfQoKICAgIHJldHVybiBjb3VudCA+IDQ7IC8vIE1vcmUgdGhhbiBoYWxmIG9mIDggYml0cwp9CgovLyBFdmFsdWF0ZSB0aHJlc2hvbGQgZnVuY3Rpb24gKGF0IGxlYXN0IDMgYml0cyBhcmUgMSkKZm4gZXZhbHVhdGVUaHJlc2hvbGRGdW5jdGlvbihpbnB1dDogaTMyKSAtPiBib29sIHsKICAgIGxldCBtdXQgY291bnQ6IGkzMiA9IDA7CiAgICBsZXQgbXV0IHRlbXA6IGkzMiA9IGlucHV0OwoKICAgIHdoaWxlICh0ZW1wID4gMCkgewogICAgICAgIGlmICgodGVtcCAmIDEpICE9IDApIHsKICAgICAgICAgICAgY291bnQgPSBjb3VudCArIDE7CiAgICAgICAgfQogICAgICAgIHRlbXAgPSB0ZW1wIC8gMjsKICAgIH0KCiAgICByZXR1cm4gY291bnQgPj0gMzsKfQoKLy8gU29sdmUgQm9vbGVhbiBwdXp6bGVzCmZuIHNvbHZlQm9vbGVhblB1enpsZXMoKSAtPiBpMzIgewogICAgbGV0IG11dCBzb2x1dGlvbnM6IGkzMiA9IDA7CgogICAgLy8gU29sdmUgTi1RdWVlbnMgcHJvYmxlbSB1c2luZyBCb29sZWFuIHJlcHJlc2VudGF0aW9uCiAgICBzb2x1dGlvbnMgPSBzb2x1dGlvbnMgKyBzb2x2ZU5RdWVlbnNCb29sZWFuVmVyc2lvbig4KTsKCiAgICAvLyBTb2x2ZSBTdWRva3UtbGlrZSBCb29sZWFuIGNvbnN0cmFpbnQgcHJvYmxlbQogICAgc29sdXRpb25zID0gc29sdXRpb25zICsgc29sdmVCb29sZWFuQ29uc3RyYWludHMoKTsKCiAgICByZXR1cm4gc29sdXRpb25zOwp9CgovLyBTb2x2ZSBOLVF1ZWVucyB1c2luZyBCb29sZWFuIHJlcHJlc2VudGF0aW9uCmZuIHNvbHZlTlF1ZWVuc0Jvb2xlYW5WZXJzaW9uKG46IGkzMikgLT4gaTMyIHsKICAgIGxldCBtdXQgYm9hcmQ6IFtib29sOyA2NF0gPSBbZmFsc2U7IDY0XTsgLy8gOHg4IGJvYXJkCiAgICByZXR1cm4gblF1ZWVuc0JhY2t0cmFjayhib2FyZCwgMCwgbik7Cn0KCi8vIEJhY2t0cmFja2luZyBhbGdvcml0aG0gZm9yIE4tUXVlZW5zIHdpdGggQm9vbGVhbiBib2FyZApmbiBuUXVlZW5zQmFja3RyYWNrKG11dCBib2FyZDogW2Jvb2w7IDY0XSwgcm93OiBpMzIsIG46IGkzMikgLT4gaTMyIHsKICAgIGlmIChyb3cgPT0gbikgewogICAgICAgIHJldHVybiAxOyAvLyBGb3VuZCBhIHNvbHV0aW9uCiAgICB9CgogICAgbGV0IG11dCBzb2x1dGlvbnM6IGkzMiA9IDA7CiAgICBsZXQgbXV0IGNvbDogaTMyID0gMDsKCiAgICB3aGlsZSAoY29sIDwgbikgewogICAgICAgIGlmIChpc1NhZmVQb3NpdGlvbihib2FyZCwgcm93LCBjb2wsIG4pKSB7CiAgICAgICAgICAgIGJvYXJkWyhyb3cgKiBuICsgY29sKSBhcyB1c2l6ZV0gPSB0cnVlOwogICAgICAgICAgICBzb2x1dGlvbnMgPSBzb2x1dGlvbnMgKyBuUXVlZW5zQmFja3RyYWNrKGJvYXJkLCByb3cgKyAxLCBuKTsKICAgICAgICAgICAgYm9hcmRbKHJvdyAqIG4gKyBjb2wpIGFzIHVzaXplXSA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICBjb2wgPSBjb2wgKyAxOwogICAgfQoKICAgIHJldHVybiBzb2x1dGlvbnM7Cn0KCi8vIENoZWNrIGlmIHBvc2l0aW9uIGlzIHNhZmUgZm9yIHF1ZWVuIHBsYWNlbWVudApmbiBpc1NhZmVQb3NpdGlvbihib2FyZDogW2Jvb2w7IDY0XSwgcm93OiBpMzIsIGNvbDogaTMyLCBuOiBpMzIpIC0+IGJvb2wgewogICAgbGV0IG11dCBpOiBpMzIgPSAwOwoKICAgIC8vIENoZWNrIGNvbHVtbgogICAgd2hpbGUgKGkgPCByb3cpIHsKICAgICAgICBpZiAoYm9hcmRbKGkgKiBuICsgY29sKSBhcyB1c2l6ZV0pIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgLy8gQ2hlY2sgZGlhZ29uYWwgKHVwcGVyIGxlZnQpCiAgICBpID0gcm93IC0gMTsKICAgIGxldCBtdXQgajogaTMyID0gY29sIC0gMTsKICAgIHdoaWxlIChpID49IDAgJiYgaiA+PSAwKSB7CiAgICAgICAgaWYgKGJvYXJkWyhpICogbiArIGopIGFzIHVzaXplXSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGkgPSBpIC0gMTsKICAgICAgICBqID0gaiAtIDE7CiAgICB9CgogICAgLy8gQ2hlY2sgZGlhZ29uYWwgKHVwcGVyIHJpZ2h0KQogICAgaSA9IHJvdyAtIDE7CiAgICBqID0gY29sICsgMTsKICAgIHdoaWxlIChpID49IDAgJiYgaiA8IG4pIHsKICAgICAgICBpZiAoYm9hcmRbKGkgKiBuICsgaikgYXMgdXNpemVdKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaSA9IGkgLSAxOwogICAgICAgIGogPSBqICsgMTsKICAgIH0KCiAgICByZXR1cm4gdHJ1ZTsKfQoKLy8gU29sdmUgQm9vbGVhbiBjb25zdHJhaW50IHNhdGlzZmFjdGlvbiBwcm9ibGVtCmZuIHNvbHZlQm9vbGVhbkNvbnN0cmFpbnRzKCkgLT4gaTMyIHsKICAgIGxldCBtdXQgc29sdXRpb25fY291bnQ6IGkzMiA9IDA7CiAgICBsZXQgbXV0IGFzc2lnbm1lbnQ6IGkzMiA9IDA7CgogICAgLy8gVHJ5IGFsbCBwb3NzaWJsZSBhc3NpZ25tZW50cyBmb3IgMTYgQm9vbGVhbiB2YXJpYWJsZXMKICAgIHdoaWxlIChhc3NpZ25tZW50IDwgNjU1MzYpIHsKICAgICAgICAvLyAyXjE2CiAgICAgICAgaWYgKHNhdGlzZmllc0FsbEJvb2xlYW5Db25zdHJhaW50cyhhc3NpZ25tZW50KSkgewogICAgICAgICAgICBzb2x1dGlvbl9jb3VudCA9IHNvbHV0aW9uX2NvdW50ICsgMTsKICAgICAgICB9CiAgICAgICAgYXNzaWdubWVudCA9IGFzc2lnbm1lbnQgKyAxOwogICAgfQoKICAgIHJldHVybiBzb2x1dGlvbl9jb3VudDsKfQoKLy8gQ2hlY2sgaWYgYXNzaWdubWVudCBzYXRpc2ZpZXMgYWxsIEJvb2xlYW4gY29uc3RyYWludHMKZm4gc2F0aXNmaWVzQWxsQm9vbGVhbkNvbnN0cmFpbnRzKGFzc2lnbm1lbnQ6IGkzMikgLT4gYm9vbCB7CiAgICAvLyBFeHRyYWN0IDE2IEJvb2xlYW4gdmFyaWFibGVzCiAgICBsZXQgdmFyczogW2Jvb2w7IDE2XSA9IGV4dHJhY3RCb29sZWFuVmFyaWFibGVzKGFzc2lnbm1lbnQpOwoKICAgIC8vIERlZmluZSBjb25zdHJhaW50cwogICAgbGV0IGNvbnN0cmFpbnQxOiBib29sID0gdmFyc1swXSB8fCAoIXZhcnNbMV0gJiYgdmFyc1syXSk7CiAgICBsZXQgY29uc3RyYWludDI6IGJvb2wgPSAhdmFyc1szXSB8fCAodmFyc1s0XSAmJiAhdmFyc1s1XSk7CiAgICBsZXQgY29uc3RyYWludDM6IGJvb2wgPSAodmFyc1s2XSB8fCB2YXJzWzddKSAmJiAoIXZhcnNbOF0gfHwgdmFyc1s5XSk7CiAgICBsZXQgY29uc3RyYWludDQ6IGJvb2wgPSB2YXJzWzEwXSA9PSAodmFyc1sxMV0gJiYgdmFyc1sxMl0pOwogICAgbGV0IGNvbnN0cmFpbnQ1OiBib29sID0gKHZhcnNbMTNdIHx8IHZhcnNbMTRdKSAhPSB2YXJzWzE1XTsKCiAgICByZXR1cm4gY29uc3RyYWludDEgJiYgY29uc3RyYWludDIgJiYgY29uc3RyYWludDMgJiYgY29uc3RyYWludDQgJiYgY29uc3RyYWludDU7Cn0KCi8vIEV4dHJhY3QgQm9vbGVhbiB2YXJpYWJsZXMgZnJvbSBpbnRlZ2VyIGFzc2lnbm1lbnQKZm4gZXh0cmFjdEJvb2xlYW5WYXJpYWJsZXMoYXNzaWdubWVudDogaTMyKSAtPiBbYm9vbDsgMTZdIHsKICAgIGxldCBtdXQgdmFyczogW2Jvb2w7IDE2XSA9IFtmYWxzZTsgMTZdOwogICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgbGV0IG11dCB0ZW1wOiBpMzIgPSBhc3NpZ25tZW50OwoKICAgIHdoaWxlIChpIDwgMTYpIHsKICAgICAgICB2YXJzW2kgYXMgdXNpemVdID0gKHRlbXAgJiAxKSAhPSAwOwogICAgICAgIHRlbXAgPSB0ZW1wIC8gMjsKICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgcmV0dXJuIHZhcnM7Cn0KCi8vIFRlc3QgNDogQm9vbGVhbi1iYXNlZCBTZWFyY2ggYW5kIEZpbHRlcmluZwpmbiB0ZXN0Qm9vbGVhblNlYXJjaEFuZEZpbHRlcigpIHsKICAgIHByaW50bG5JbnQoMTEwNyk7IC8vIFN0YXJ0IEJvb2xlYW4gc2VhcmNoIHRlc3QKCiAgICBsZXQgbXV0IHNlYXJjaF9yZXN1bHRzOiBpMzIgPSAwOwoKICAgIC8vIENyZWF0ZSBsYXJnZSBkYXRhc2V0IGZvciBCb29sZWFuIGZpbHRlcmluZwogICAgbGV0IG11dCBkYXRhOiBbaTMyOyA1MDAwXSA9IFswOyA1MDAwXTsKICAgIGluaXRpYWxpemVTZWFyY2hEYXRhKGRhdGEpOwoKICAgIC8vIFBlcmZvcm0gQm9vbGVhbi1iYXNlZCBmaWx0ZXJpbmcgb3BlcmF0aW9ucwogICAgc2VhcmNoX3Jlc3VsdHMgPSBzZWFyY2hfcmVzdWx0cyArIHBlcmZvcm1Cb29sZWFuRmlsdGVyKGRhdGEpOwogICAgc2VhcmNoX3Jlc3VsdHMgPSBzZWFyY2hfcmVzdWx0cyArIHBlcmZvcm1NdWx0aUNyaXRlcmlhU2VhcmNoKGRhdGEpOwogICAgc2VhcmNoX3Jlc3VsdHMgPSBzZWFyY2hfcmVzdWx0cyArIHBlcmZvcm1Cb29sZWFuUmFuZ2VTZWFyY2goZGF0YSk7CgogICAgcHJpbnRsbkludChzZWFyY2hfcmVzdWx0cyk7CiAgICBwcmludGxuSW50KDExMDgpOyAvLyBFbmQgQm9vbGVhbiBzZWFyY2ggdGVzdAp9CgovLyBJbml0aWFsaXplIHNlYXJjaCBkYXRhCmZuIGluaXRpYWxpemVTZWFyY2hEYXRhKG11dCBkYXRhOiBbaTMyOyA1MDAwXSkgewogICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgbGV0IG11dCBzZWVkOiBpMzIgPSA1NDMyMTsKCiAgICB3aGlsZSAoaSA8IDUwMDApIHsKICAgICAgICBzZWVkID0gcG1fcmFuZF91cGRhdGUoc2VlZCk7CiAgICAgICAgaWYgKHNlZWQgPCAwKSB7CiAgICAgICAgICAgIHNlZWQgPSAtc2VlZDsKICAgICAgICB9CiAgICAgICAgZGF0YVtpIGFzIHVzaXplXSA9IHNlZWQgJSAxMDAwMDsKICAgICAgICBpID0gaSArIDE7CiAgICB9Cn0KCi8vIFBlcmZvcm0gQm9vbGVhbi1iYXNlZCBmaWx0ZXJpbmcKZm4gcGVyZm9ybUJvb2xlYW5GaWx0ZXIoZGF0YTogW2kzMjsgNTAwMF0pIC0+IGkzMiB7CiAgICBsZXQgbXV0IGZpbHRlcmVkX2NvdW50OiBpMzIgPSAwOwogICAgbGV0IG11dCBpOiBpMzIgPSAwOwoKICAgIHdoaWxlIChpIDwgNTAwMCkgewogICAgICAgIGxldCBjb25kaXRpb24xOiBib29sID0gZGF0YVtpIGFzIHVzaXplXSA+IDEwMDA7CiAgICAgICAgbGV0IGNvbmRpdGlvbjI6IGJvb2wgPSBkYXRhW2kgYXMgdXNpemVdICUgMiA9PSAwOwogICAgICAgIGxldCBjb25kaXRpb24zOiBib29sID0gZGF0YVtpIGFzIHVzaXplXSA8IDgwMDA7CiAgICAgICAgbGV0IGNvbmRpdGlvbjQ6IGJvb2wgPSBpc1ByaW1lKGRhdGFbaSBhcyB1c2l6ZV0gJSAxMDApOwoKICAgICAgICAvLyBDb21wbGV4IEJvb2xlYW4gZmlsdGVyIGNvbmRpdGlvbgogICAgICAgIGlmICgoY29uZGl0aW9uMSAmJiBjb25kaXRpb24yKSB8fCAoY29uZGl0aW9uMyAmJiBjb25kaXRpb240KSkgewogICAgICAgICAgICBmaWx0ZXJlZF9jb3VudCA9IGZpbHRlcmVkX2NvdW50ICsgMTsKICAgICAgICB9CgogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICByZXR1cm4gZmlsdGVyZWRfY291bnQ7Cn0KCi8vIFBlcmZvcm0gbXVsdGktY3JpdGVyaWEgQm9vbGVhbiBzZWFyY2gKZm4gcGVyZm9ybU11bHRpQ3JpdGVyaWFTZWFyY2goZGF0YTogW2kzMjsgNTAwMF0pIC0+IGkzMiB7CiAgICBsZXQgbXV0IG1hdGNoX2NvdW50OiBpMzIgPSAwOwogICAgbGV0IG11dCBpOiBpMzIgPSAwOwoKICAgIHdoaWxlIChpIDwgNTAwMCkgewogICAgICAgIGxldCBjcml0ZXJpYV9tZXQ6IGkzMiA9IGNvdW50Q3JpdGVyaWFNZXQoZGF0YVtpIGFzIHVzaXplXSk7CgogICAgICAgIC8vIEJvb2xlYW4gY29uZGl0aW9uIGJhc2VkIG9uIG51bWJlciBvZiBjcml0ZXJpYSBtZXQKICAgICAgICBpZiAoY3JpdGVyaWFfbWV0ID49IDMpIHsKICAgICAgICAgICAgbWF0Y2hfY291bnQgPSBtYXRjaF9jb3VudCArIDE7CiAgICAgICAgfQoKICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgcmV0dXJuIG1hdGNoX2NvdW50Owp9CgovLyBDb3VudCBob3cgbWFueSBzZWFyY2ggY3JpdGVyaWEgYXJlIG1ldApmbiBjb3VudENyaXRlcmlhTWV0KHZhbHVlOiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgbXV0IGNvdW50OiBpMzIgPSAwOwoKICAgIGlmICh2YWx1ZSAlIDMgPT0gMCkgewogICAgICAgIGNvdW50ID0gY291bnQgKyAxOwogICAgfQogICAgaWYgKHZhbHVlID4gNTAwMCkgewogICAgICAgIGNvdW50ID0gY291bnQgKyAxOwogICAgfQogICAgaWYgKHZhbHVlICUgNyA9PSAwKSB7CiAgICAgICAgY291bnQgPSBjb3VudCArIDE7CiAgICB9CiAgICBpZiAodmFsdWUgPCAyMDAwKSB7CiAgICAgICAgY291bnQgPSBjb3VudCArIDE7CiAgICB9CiAgICBpZiAoKHZhbHVlICUgMTAwKSA+IDUwKSB7CiAgICAgICAgY291bnQgPSBjb3VudCArIDE7CiAgICB9CgogICAgcmV0dXJuIGNvdW50Owp9CgovLyBQZXJmb3JtIEJvb2xlYW4gcmFuZ2Ugc2VhcmNoCmZuIHBlcmZvcm1Cb29sZWFuUmFuZ2VTZWFyY2goZGF0YTogW2kzMjsgNTAwMF0pIC0+IGkzMiB7CiAgICBsZXQgbXV0IHJhbmdlX21hdGNoZXM6IGkzMiA9IDA7CiAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CgogICAgd2hpbGUgKGkgPCA1MDAwKSB7CiAgICAgICAgbGV0IGluX3JhbmdlMTogYm9vbCA9IChkYXRhW2kgYXMgdXNpemVdID49IDEwMDApICYmIChkYXRhW2kgYXMgdXNpemVdIDw9IDMwMDApOwogICAgICAgIGxldCBpbl9yYW5nZTI6IGJvb2wgPSAoZGF0YVtpIGFzIHVzaXplXSA+PSA2MDAwKSAmJiAoZGF0YVtpIGFzIHVzaXplXSA8PSA4MDAwKTsKICAgICAgICBsZXQgaW5fcmFuZ2UzOiBib29sID0gKGRhdGFbaSBhcyB1c2l6ZV0gPj0gNTAwKSAmJiAoZGF0YVtpIGFzIHVzaXplXSA8PSAxNTAwKTsKCiAgICAgICAgLy8gQm9vbGVhbiBjb21iaW5hdGlvbiBvZiByYW5nZSBjb25kaXRpb25zCiAgICAgICAgaWYgKGluX3JhbmdlMSB8fCBpbl9yYW5nZTIgfHwgKGluX3JhbmdlMyAmJiAoZGF0YVtpIGFzIHVzaXplXSAlIDIgPT0gMCkpKSB7CiAgICAgICAgICAgIHJhbmdlX21hdGNoZXMgPSByYW5nZV9tYXRjaGVzICsgMTsKICAgICAgICB9CgogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICByZXR1cm4gcmFuZ2VfbWF0Y2hlczsKfQoKLy8gVGVzdCA1OiBCb29sZWFuIFN0YXRlIE1hY2hpbmUgU2ltdWxhdGlvbgpmbiB0ZXN0Qm9vbGVhblN0YXRlTWFjaGluZSgpIHsKICAgIHByaW50bG5JbnQoMTEwOSk7IC8vIFN0YXJ0IHN0YXRlIG1hY2hpbmUgdGVzdAoKICAgIGxldCBtdXQgdHJhbnNpdGlvbnM6IGkzMiA9IDA7CgogICAgLy8gU2ltdWxhdGUgY29tcGxleCBCb29sZWFuIHN0YXRlIG1hY2hpbmUKICAgIHRyYW5zaXRpb25zID0gdHJhbnNpdGlvbnMgKyBzaW11bGF0ZVRyYWZmaWNMaWdodENvbnRyb2xsZXIoKTsKICAgIHRyYW5zaXRpb25zID0gdHJhbnNpdGlvbnMgKyBzaW11bGF0ZURpZ2l0YWxDaXJjdWl0KCk7CiAgICB0cmFuc2l0aW9ucyA9IHRyYW5zaXRpb25zICsgc2ltdWxhdGVCb29sZWFuQXV0b21hdG9uKCk7CgogICAgcHJpbnRsbkludCh0cmFuc2l0aW9ucyk7CiAgICBwcmludGxuSW50KDExMTApOyAvLyBFbmQgc3RhdGUgbWFjaGluZSB0ZXN0Cn0KCi8vIFNpbXVsYXRlIHRyYWZmaWMgbGlnaHQgY29udHJvbGxlciB3aXRoIEJvb2xlYW4gbG9naWMKZm4gc2ltdWxhdGVUcmFmZmljTGlnaHRDb250cm9sbGVyKCkgLT4gaTMyIHsKICAgIGxldCBtdXQgc3RhdGU6IGkzMiA9IDA7IC8vIDA6IFJlZCwgMTogR3JlZW4sIDI6IFllbGxvdwogICAgbGV0IG11dCB0cmFuc2l0aW9uczogaTMyID0gMDsKICAgIGxldCBtdXQgdGltZTogaTMyID0gMDsKCiAgICB3aGlsZSAodGltZSA8IDEwMDAwKSB7CiAgICAgICAgbGV0IHBlZGVzdHJpYW5fYnV0dG9uOiBib29sID0gKHRpbWUgJSAxMDApIDwgMTA7CiAgICAgICAgbGV0IGVtZXJnZW5jeV92ZWhpY2xlOiBib29sID0gKHRpbWUgJSA1MDApIDwgNTsKICAgICAgICBsZXQgdHJhZmZpY19zZW5zb3I6IGJvb2wgPSAodGltZSAlIDUwKSA8IDI1OwoKICAgICAgICBsZXQgb2xkX3N0YXRlOiBpMzIgPSBzdGF0ZTsKICAgICAgICBzdGF0ZSA9IGdldE5leHRUcmFmZmljU3RhdGUoCiAgICAgICAgICAgIHN0YXRlLAogICAgICAgICAgICBwZWRlc3RyaWFuX2J1dHRvbiwKICAgICAgICAgICAgZW1lcmdlbmN5X3ZlaGljbGUsCiAgICAgICAgICAgIHRyYWZmaWNfc2Vuc29yLAogICAgICAgICAgICB0aW1lLAogICAgICAgICk7CgogICAgICAgIGlmIChzdGF0ZSAhPSBvbGRfc3RhdGUpIHsKICAgICAgICAgICAgdHJhbnNpdGlvbnMgPSB0cmFuc2l0aW9ucyArIDE7CiAgICAgICAgfQoKICAgICAgICB0aW1lID0gdGltZSArIDE7CiAgICB9CgogICAgcmV0dXJuIHRyYW5zaXRpb25zOwp9CgovLyBHZXQgbmV4dCB0cmFmZmljIGxpZ2h0IHN0YXRlIGJhc2VkIG9uIEJvb2xlYW4gaW5wdXRzCmZuIGdldE5leHRUcmFmZmljU3RhdGUoCiAgICBjdXJyZW50X3N0YXRlOiBpMzIsCiAgICBwZWRlc3RyaWFuOiBib29sLAogICAgZW1lcmdlbmN5OiBib29sLAogICAgdHJhZmZpYzogYm9vbCwKICAgIHRpbWU6IGkzMiwKKSAtPiBpMzIgewogICAgaWYgKGVtZXJnZW5jeSkgewogICAgICAgIHJldHVybiAxOyAvLyBFbWVyZ2VuY3kgb3ZlcnJpZGUgdG8gZ3JlZW4KICAgIH0KCiAgICBpZiAoY3VycmVudF9zdGF0ZSA9PSAwKSB7CiAgICAgICAgLy8gUmVkCiAgICAgICAgaWYgKCh0aW1lICUgNjApID4gMzAgfHwgKHBlZGVzdHJpYW4gJiYgIXRyYWZmaWMpKSB7CiAgICAgICAgICAgIHJldHVybiAxOyAvLyBDaGFuZ2UgdG8gZ3JlZW4KICAgICAgICB9CiAgICB9IGVsc2UgaWYgKGN1cnJlbnRfc3RhdGUgPT0gMSkgewogICAgICAgIC8vIEdyZWVuCiAgICAgICAgaWYgKCh0aW1lICUgNjApID4gNTAgfHwgKHBlZGVzdHJpYW4gJiYgKHRpbWUgJSAxMjApID4gNjApKSB7CiAgICAgICAgICAgIHJldHVybiAyOyAvLyBDaGFuZ2UgdG8geWVsbG93CiAgICAgICAgfQogICAgfSBlbHNlIGlmIChjdXJyZW50X3N0YXRlID09IDIpIHsKICAgICAgICAvLyBZZWxsb3cKICAgICAgICBpZiAoKHRpbWUgJSA2MCkgPiA1NSkgewogICAgICAgICAgICByZXR1cm4gMDsgLy8gQ2hhbmdlIHRvIHJlZAogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gY3VycmVudF9zdGF0ZTsgLy8gTm8gc3RhdGUgY2hhbmdlCn0KCi8vIFNpbXVsYXRlIGRpZ2l0YWwgY2lyY3VpdCB3aXRoIEJvb2xlYW4gZ2F0ZXMKZm4gc2ltdWxhdGVEaWdpdGFsQ2lyY3VpdCgpIC0+IGkzMiB7CiAgICBsZXQgbXV0IG91dHB1dF9jaGFuZ2VzOiBpMzIgPSAwOwogICAgbGV0IG11dCBjbG9ja19jeWNsZTogaTMyID0gMDsKCiAgICAvLyBJbml0aWFsaXplIEJvb2xlYW4gcmVnaXN0ZXJzCiAgICBsZXQgbXV0IHJlZ19hOiBib29sID0gZmFsc2U7CiAgICBsZXQgbXV0IHJlZ19iOiBib29sID0gZmFsc2U7CiAgICBsZXQgbXV0IHJlZ19jOiBib29sID0gZmFsc2U7CiAgICBsZXQgbXV0IHJlZ19kOiBib29sID0gZmFsc2U7CgogICAgd2hpbGUgKGNsb2NrX2N5Y2xlIDwgMTAwMCkgewogICAgICAgIC8vIEdlbmVyYXRlIEJvb2xlYW4gaW5wdXRzCiAgICAgICAgbGV0IGlucHV0MTogYm9vbCA9IChjbG9ja19jeWNsZSAlIDQpIDwgMjsKICAgICAgICBsZXQgaW5wdXQyOiBib29sID0gKGNsb2NrX2N5Y2xlICUgOCkgPCA0OwogICAgICAgIGxldCBpbnB1dDM6IGJvb2wgPSAoY2xvY2tfY3ljbGUgJSAxNikgPCA4OwoKICAgICAgICAvLyBTYXZlIG9sZCB2YWx1ZXMKICAgICAgICBsZXQgb2xkX2E6IGJvb2wgPSByZWdfYTsKICAgICAgICBsZXQgb2xkX2I6IGJvb2wgPSByZWdfYjsKICAgICAgICBsZXQgb2xkX2M6IGJvb2wgPSByZWdfYzsKICAgICAgICBsZXQgb2xkX2Q6IGJvb2wgPSByZWdfZDsKCiAgICAgICAgLy8gQm9vbGVhbiBsb2dpYyBvcGVyYXRpb25zCiAgICAgICAgcmVnX2EgPSBpbnB1dDEgJiYgaW5wdXQyOwogICAgICAgIHJlZ19iID0gaW5wdXQyIHx8IGlucHV0MzsKICAgICAgICByZWdfYyA9IHJlZ19hICE9IHJlZ19iOyAvLyBYT1Igb3BlcmF0aW9uCiAgICAgICAgcmVnX2QgPSAhKHJlZ19hICYmIHJlZ19iICYmIHJlZ19jKTsKCiAgICAgICAgLy8gQ291bnQgb3V0cHV0IGNoYW5nZXMKICAgICAgICBpZiAob2xkX2EgIT0gcmVnX2EpIHsKICAgICAgICAgICAgb3V0cHV0X2NoYW5nZXMgPSBvdXRwdXRfY2hhbmdlcyArIDE7CiAgICAgICAgfQogICAgICAgIGlmIChvbGRfYiAhPSByZWdfYikgewogICAgICAgICAgICBvdXRwdXRfY2hhbmdlcyA9IG91dHB1dF9jaGFuZ2VzICsgMTsKICAgICAgICB9CiAgICAgICAgaWYgKG9sZF9jICE9IHJlZ19jKSB7CiAgICAgICAgICAgIG91dHB1dF9jaGFuZ2VzID0gb3V0cHV0X2NoYW5nZXMgKyAxOwogICAgICAgIH0KICAgICAgICBpZiAob2xkX2QgIT0gcmVnX2QpIHsKICAgICAgICAgICAgb3V0cHV0X2NoYW5nZXMgPSBvdXRwdXRfY2hhbmdlcyArIDE7CiAgICAgICAgfQoKICAgICAgICBjbG9ja19jeWNsZSA9IGNsb2NrX2N5Y2xlICsgMTsKICAgIH0KCiAgICByZXR1cm4gb3V0cHV0X2NoYW5nZXM7Cn0KCi8vIFNpbXVsYXRlIEJvb2xlYW4gY2VsbHVsYXIgYXV0b21hdG9uCmZuIHNpbXVsYXRlQm9vbGVhbkF1dG9tYXRvbigpIC0+IGkzMiB7CiAgICBsZXQgbXV0IGNlbGxzOiBbYm9vbDsgMTAwXSA9IFtmYWxzZTsgMTAwXTsKICAgIGxldCBtdXQgZ2VuZXJhdGlvbjogaTMyID0gMDsKICAgIGxldCBtdXQgdG90YWxfY2hhbmdlczogaTMyID0gMDsKCiAgICAvLyBJbml0aWFsaXplIHdpdGggc29tZSBCb29sZWFuIHBhdHRlcm4KICAgIGNlbGxzWzQ5XSA9IHRydWU7CiAgICBjZWxsc1s1MF0gPSB0cnVlOwogICAgY2VsbHNbNTFdID0gdHJ1ZTsKCiAgICB3aGlsZSAoZ2VuZXJhdGlvbiA8IDUwMCkgewogICAgICAgIGxldCBtdXQgbmV3X2NlbGxzOiBbYm9vbDsgMTAwXSA9IFtmYWxzZTsgMTAwXTsKICAgICAgICBsZXQgbXV0IGNoYW5nZXM6IGkzMiA9IDA7CiAgICAgICAgbGV0IG11dCBpOiBpMzIgPSAxOwoKICAgICAgICAvLyBBcHBseSBCb29sZWFuIGF1dG9tYXRvbiBydWxlcwogICAgICAgIHdoaWxlIChpIDwgOTkpIHsKICAgICAgICAgICAgbGV0IGxlZnQ6IGJvb2wgPSBjZWxsc1tpIGFzIHVzaXplIC0gMV07CiAgICAgICAgICAgIGxldCBjZW50ZXI6IGJvb2wgPSBjZWxsc1tpIGFzIHVzaXplXTsKICAgICAgICAgICAgbGV0IHJpZ2h0OiBib29sID0gY2VsbHNbaSBhcyB1c2l6ZSArIDFdOwoKICAgICAgICAgICAgLy8gUnVsZSAzMDogQm9vbGVhbiBydWxlIGZvciBjZWxsdWxhciBhdXRvbWF0b24KICAgICAgICAgICAgbmV3X2NlbGxzW2kgYXMgdXNpemVdID0gKGxlZnQgJiYgIWNlbnRlciAmJiAhcmlnaHQpCiAgICAgICAgICAgICAgICB8fCAoIWxlZnQgJiYgY2VudGVyICYmICFyaWdodCkKICAgICAgICAgICAgICAgIHx8ICghbGVmdCAmJiAhY2VudGVyICYmIHJpZ2h0KQogICAgICAgICAgICAgICAgfHwgKCFsZWZ0ICYmIGNlbnRlciAmJiByaWdodCk7CgogICAgICAgICAgICBpZiAobmV3X2NlbGxzW2kgYXMgdXNpemVdICE9IGNlbGxzW2kgYXMgdXNpemVdKSB7CiAgICAgICAgICAgICAgICBjaGFuZ2VzID0gY2hhbmdlcyArIDE7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGkgPSBpICsgMTsKICAgICAgICB9CgogICAgICAgIC8vIENvcHkgbmV3IGdlbmVyYXRpb24KICAgICAgICBpID0gMDsKICAgICAgICB3aGlsZSAoaSA8IDEwMCkgewogICAgICAgICAgICBjZWxsc1tpIGFzIHVzaXplXSA9IG5ld19jZWxsc1tpIGFzIHVzaXplXTsKICAgICAgICAgICAgaSA9IGkgKyAxOwogICAgICAgIH0KCiAgICAgICAgdG90YWxfY2hhbmdlcyA9IHRvdGFsX2NoYW5nZXMgKyBjaGFuZ2VzOwogICAgICAgIGdlbmVyYXRpb24gPSBnZW5lcmF0aW9uICsgMTsKICAgIH0KCiAgICByZXR1cm4gdG90YWxfY2hhbmdlczsKfQoKLy8gSGVscGVyIGZ1bmN0aW9uOiBDaGVjayBpZiBudW1iZXIgaXMgcHJpbWUgKHVzZWQgaW4gQm9vbGVhbiBjb250ZXh0cykKZm4gaXNQcmltZShuOiBpMzIpIC0+IGJvb2wgewogICAgaWYgKG4gPD0gMSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIGlmIChuIDw9IDMpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGlmIChuICUgMiA9PSAwIHx8IG4gJSAzID09IDApIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgbGV0IG11dCBpOiBpMzIgPSA1OwogICAgd2hpbGUgKGkgKiBpIDw9IG4pIHsKICAgICAgICBpZiAobiAlIGkgPT0gMCB8fCBuICUgKGkgKyAyKSA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaSA9IGkgKyA2OwogICAgfQoKICAgIHJldHVybiB0cnVlOwp9Cg==", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (12, "comprehensive12", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (13, "comprehensive13", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (14, "comprehensive14", 2, "LyoKVGVzdCBQYWNrYWdlOiBTZW1hbnRpYy0yClRlc3QgVGFyZ2V0OiBjb21wcmVoZW5zaXZlCkF1dGhvcjogV2VueGluIFpoZW5nClRpbWU6IDIwMjUtMDgtMTcKVmVyZGljdDogUGFzcwpUZXN0IE5hbWU6IENvbXByZWhlbnNpdmUgVGVzdCAxNDogQWR2YW5jZWQgRGF0YSBTdHJ1Y3R1cmVzIGFuZCBNZW1vcnkgTWFuYWdlbWVudCBTaW11bGF0aW9uClN1bW1hcnk6IFRoaXMgdGVzdCBpbXBsZW1lbnRzIGNvbXBsZXggZGF0YSBzdHJ1Y3R1cmVzIGFuZCBzaW11bGF0ZXMgbWVtb3J5IG1hbmFnZW1lbnQ6CkRldGFpbHM6CjEuIEFkdmFuY2VkIEJpbmFyeSBTZWFyY2ggVHJlZSB3aXRoIGJhbGFuY2luZyBvcGVyYXRpb25zCjIuIEhhc2ggVGFibGUgd2l0aCBjb2xsaXNpb24gcmVzb2x1dGlvbiBhbmQgZHluYW1pYyByZXNpemluZwozLiBDb21wbGV4IGxpbmtlZCBsaXN0IG9wZXJhdGlvbnMgd2l0aCBtZXJnZSBhbmQgc3BsaXQKNC4gTWVtb3J5IHBvb2wgc2ltdWxhdGlvbiB3aXRoIGFsbG9jYXRpb24gYW5kIGRlYWxsb2NhdGlvbgo1LiBDYWNoZSBzaW11bGF0aW9uIHdpdGggTFJVIHJlcGxhY2VtZW50IHBvbGljeQo2LiBEYXRhYmFzZS1saWtlIG9wZXJhdGlvbnMgd2l0aCBpbmRleGluZyBhbmQgcXVlcnlpbmcKKi8KCi8vIENvbXByZWhlbnNpdmUgVGVzdCAxNDogQWR2YW5jZWQgRGF0YSBTdHJ1Y3R1cmVzIGFuZCBNZW1vcnkgTWFuYWdlbWVudCBTaW11bGF0aW9uCi8vIFRoaXMgdGVzdCBpbXBsZW1lbnRzIGNvbXBsZXggZGF0YSBzdHJ1Y3R1cmVzIGFuZCBzaW11bGF0ZXMgbWVtb3J5IG1hbmFnZW1lbnQ6Ci8vIDEuIEFkdmFuY2VkIEJpbmFyeSBTZWFyY2ggVHJlZSB3aXRoIGJhbGFuY2luZyBvcGVyYXRpb25zCi8vIDIuIEhhc2ggVGFibGUgd2l0aCBjb2xsaXNpb24gcmVzb2x1dGlvbiBhbmQgZHluYW1pYyByZXNpemluZwovLyAzLiBDb21wbGV4IGxpbmtlZCBsaXN0IG9wZXJhdGlvbnMgd2l0aCBtZXJnZSBhbmQgc3BsaXQKLy8gNC4gTWVtb3J5IHBvb2wgc2ltdWxhdGlvbiB3aXRoIGFsbG9jYXRpb24gYW5kIGRlYWxsb2NhdGlvbgovLyA1LiBDYWNoZSBzaW11bGF0aW9uIHdpdGggTFJVIHJlcGxhY2VtZW50IHBvbGljeQovLyA2LiBEYXRhYmFzZS1saWtlIG9wZXJhdGlvbnMgd2l0aCBpbmRleGluZyBhbmQgcXVlcnlpbmcKCi8vIE5vZGUgc3RydWN0dXJlIGZvciB2YXJpb3VzIGRhdGEgc3RydWN0dXJlcwoKc3RydWN0IE5vZGUgewogICAgdmFsdWU6IGkzMiwKICAgIGtleTogaTMyLAogICAgaGVpZ2h0OiBpMzIsCiAgICBiYWxhbmNlX2ZhY3RvcjogaTMyLAogICAgY29sb3I6IGJvb2wsIC8vIEZvciByZWQtYmxhY2sgdHJlZSBvcGVyYXRpb25zCiAgICBmcmVxdWVuY3k6IGkzMiwKICAgIHRpbWVzdGFtcDogaTMyLAogICAgbmV4dDogaTMyLAogICAgcHJldjogaTMyLAogICAgbGVmdDogaTMyLAogICAgcmlnaHQ6IGkzMiwKICAgIHBhcmVudDogaTMyLAp9CgovLyBBZHZhbmNlZCBBVkwgVHJlZSBpbXBsZW1lbnRhdGlvbgpzdHJ1Y3QgQVZMVHJlZSB7CiAgICBub2RlczogW05vZGU7IDIwMDBdLAogICAgbm9kZV9jb3VudDogaTMyLAogICAgcm9vdDogaTMyLAogICAgZnJlZV9saXN0OiBbaTMyOyAyMDAwXSwKICAgIGZyZWVfY291bnQ6IGkzMiwKICAgIAogICAgLy8gVHJlZSBzdGF0aXN0aWNzCiAgICB0cmVlX2hlaWdodDogaTMyLAogICAgbm9kZV9pbnNlcnRpb25zOiBpMzIsCiAgICBub2RlX2RlbGV0aW9uczogaTMyLAogICAgcm90YXRpb25fY291bnQ6IGkzMiwKICAgIHNlYXJjaF9vcGVyYXRpb25zOiBpMzIsCn0KCmltcGwgTm9kZSB7CiAgICBmbiBuZXcodmFsdWU6IGkzMiwga2V5OiBpMzIpIC0+IE5vZGUgewogICAgICAgIE5vZGUgewogICAgICAgICAgICB2YWx1ZTogdmFsdWUsCiAgICAgICAgICAgIGtleToga2V5LAogICAgICAgICAgICBoZWlnaHQ6IDEsCiAgICAgICAgICAgIGJhbGFuY2VfZmFjdG9yOiAwLAogICAgICAgICAgICBjb2xvcjogdHJ1ZSwgLy8gUmVkIGluaXRpYWxseQogICAgICAgICAgICBmcmVxdWVuY3k6IDEsCiAgICAgICAgICAgIHRpbWVzdGFtcDogMCwKICAgICAgICAgICAgbmV4dDogLTEsCiAgICAgICAgICAgIHByZXY6IC0xLAogICAgICAgICAgICBsZWZ0OiAtMSwKICAgICAgICAgICAgcmlnaHQ6IC0xLAogICAgICAgICAgICBwYXJlbnQ6IC0xLAogICAgICAgIH0KICAgIH0KfQoKaW1wbCBBVkxUcmVlIHsKICAgIGZuIG5ldygpIC0+IEFWTFRyZWUgewogICAgICAgIGxldCBtdXQgdHJlZTogQVZMVHJlZSA9IEFWTFRyZWUgewogICAgICAgICAgICBub2RlczogW05vZGU6Om5ldygwLCAwKTsgMjAwMF0sCiAgICAgICAgICAgIG5vZGVfY291bnQ6IDAsCiAgICAgICAgICAgIHJvb3Q6IC0xLAogICAgICAgICAgICBmcmVlX2xpc3Q6IFswOyAyMDAwXSwKICAgICAgICAgICAgZnJlZV9jb3VudDogMCwKICAgICAgICAgICAgdHJlZV9oZWlnaHQ6IDAsCiAgICAgICAgICAgIG5vZGVfaW5zZXJ0aW9uczogMCwKICAgICAgICAgICAgbm9kZV9kZWxldGlvbnM6IDAsCiAgICAgICAgICAgIHJvdGF0aW9uX2NvdW50OiAwLAogICAgICAgICAgICBzZWFyY2hfb3BlcmF0aW9uczogMCwKICAgICAgICB9OwogICAgICAgIAogICAgICAgIC8vIEluaXRpYWxpemUgZnJlZSBsaXN0CiAgICAgICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgICAgIHdoaWxlIChpIDwgMjAwMCkgewogICAgICAgICAgICB0cmVlLmZyZWVfbGlzdFtpIGFzIHVzaXplXSA9IGk7CiAgICAgICAgICAgIGkgKz0gMTsKICAgICAgICB9CiAgICAgICAgdHJlZS5mcmVlX2NvdW50ID0gMjAwMDsKICAgICAgICAKICAgICAgICByZXR1cm4gdHJlZTsKICAgIH0KICAgIAogICAgZm4gYWxsb2NhdGVfbm9kZSgmbXV0IHNlbGYsIHZhbHVlOiBpMzIsIGtleTogaTMyKSAtPiBpMzIgewogICAgICAgIGlmIChzZWxmLmZyZWVfY291bnQgPT0gMCkgewogICAgICAgICAgICByZXR1cm4gLTE7IC8vIE5vIGZyZWUgbm9kZXMgYXZhaWxhYmxlCiAgICAgICAgfQogICAgICAgIAogICAgICAgIHNlbGYuZnJlZV9jb3VudCAtPSAxOwogICAgICAgIGxldCBub2RlX2luZGV4OiBpMzIgPSBzZWxmLmZyZWVfbGlzdFtzZWxmLmZyZWVfY291bnQgYXMgdXNpemVdOwogICAgICAgIHNlbGYubm9kZXNbbm9kZV9pbmRleCBhcyB1c2l6ZV0gPSBOb2RlOjpuZXcodmFsdWUsIGtleSk7CiAgICAgICAgc2VsZi5ub2RlX2NvdW50ICs9IDE7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIG5vZGVfaW5kZXg7CiAgICB9CiAgICAKICAgIGZuIGRlYWxsb2NhdGVfbm9kZSgmbXV0IHNlbGYsIG5vZGVfaW5kZXg6IGkzMikgewogICAgICAgIGlmIChzZWxmLmZyZWVfY291bnQgPCAyMDAwKSB7CiAgICAgICAgICAgIHNlbGYuZnJlZV9saXN0W3NlbGYuZnJlZV9jb3VudCBhcyB1c2l6ZV0gPSBub2RlX2luZGV4OwogICAgICAgICAgICBzZWxmLmZyZWVfY291bnQgKz0gMTsKICAgICAgICAgICAgc2VsZi5ub2RlX2NvdW50IC09IDE7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmbiBnZXRfaGVpZ2h0KCZzZWxmLCBub2RlOiBpMzIpIC0+IGkzMiB7CiAgICAgICAgaWYgKG5vZGUgPT0gLTEpIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHJldHVybiBzZWxmLm5vZGVzW25vZGUgYXMgdXNpemVdLmhlaWdodDsKICAgIH0KICAgIAogICAgZm4gZ2V0X2JhbGFuY2UoJnNlbGYsIG5vZGU6IGkzMikgLT4gaTMyIHsKICAgICAgICBpZiAobm9kZSA9PSAtMSkgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNlbGYuZ2V0X2hlaWdodChzZWxmLm5vZGVzW25vZGUgYXMgdXNpemVdLmxlZnQpIC0gc2VsZi5nZXRfaGVpZ2h0KHNlbGYubm9kZXNbbm9kZSBhcyB1c2l6ZV0ucmlnaHQpOwogICAgfQogICAgCiAgICBmbiB1cGRhdGVfaGVpZ2h0KCZtdXQgc2VsZiwgbm9kZTogaTMyKSB7CiAgICAgICAgaWYgKG5vZGUgIT0gLTEpIHsKICAgICAgICAgICAgbGV0IGxlZnRfaGVpZ2h0OiBpMzIgPSBzZWxmLmdldF9oZWlnaHQoc2VsZi5ub2Rlc1tub2RlIGFzIHVzaXplXS5sZWZ0KTsKICAgICAgICAgICAgbGV0IHJpZ2h0X2hlaWdodDogaTMyID0gc2VsZi5nZXRfaGVpZ2h0KHNlbGYubm9kZXNbbm9kZSBhcyB1c2l6ZV0ucmlnaHQpOwogICAgICAgICAgICBzZWxmLm5vZGVzW25vZGUgYXMgdXNpemVdLmhlaWdodCA9IDEgKyBpZiAobGVmdF9oZWlnaHQgPiByaWdodF9oZWlnaHQpIHsgbGVmdF9oZWlnaHQgfSBlbHNlIHsgcmlnaHRfaGVpZ2h0IH07CiAgICAgICAgICAgIHNlbGYubm9kZXNbbm9kZSBhcyB1c2l6ZV0uYmFsYW5jZV9mYWN0b3IgPSBzZWxmLmdldF9iYWxhbmNlKG5vZGUpOwogICAgICAgIH0KICAgIH0KICAgIAogICAgZm4gcmlnaHRfcm90YXRlKCZtdXQgc2VsZiwgeTogaTMyKSAtPiBpMzIgewogICAgICAgIGxldCB4OiBpMzIgPSBzZWxmLm5vZGVzW3kgYXMgdXNpemVdLmxlZnQ7CiAgICAgICAgbGV0IHQyOiBpMzIgPSBzZWxmLm5vZGVzW3ggYXMgdXNpemVdLnJpZ2h0OwogICAgICAgIAogICAgICAgIC8vIFBlcmZvcm0gcm90YXRpb24KICAgICAgICBzZWxmLm5vZGVzW3ggYXMgdXNpemVdLnJpZ2h0ID0geTsKICAgICAgICBzZWxmLm5vZGVzW3kgYXMgdXNpemVdLmxlZnQgPSB0MjsKICAgICAgICAKICAgICAgICAvLyBVcGRhdGUgcGFyZW50IHBvaW50ZXJzCiAgICAgICAgc2VsZi5ub2Rlc1t5IGFzIHVzaXplXS5wYXJlbnQgPSB4OwogICAgICAgIGlmICh0MiAhPSAtMSkgewogICAgICAgICAgICBzZWxmLm5vZGVzW3QyIGFzIHVzaXplXS5wYXJlbnQgPSB5OwogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBVcGRhdGUgaGVpZ2h0cwogICAgICAgIHNlbGYudXBkYXRlX2hlaWdodCh5KTsKICAgICAgICBzZWxmLnVwZGF0ZV9oZWlnaHQoeCk7CiAgICAgICAgCiAgICAgICAgc2VsZi5yb3RhdGlvbl9jb3VudCArPSAxOwogICAgICAgIHJldHVybiB4OwogICAgfQogICAgCiAgICBmbiBsZWZ0X3JvdGF0ZSgmbXV0IHNlbGYsIHg6IGkzMikgLT4gaTMyIHsKICAgICAgICBsZXQgeTogaTMyID0gc2VsZi5ub2Rlc1t4IGFzIHVzaXplXS5yaWdodDsKICAgICAgICBsZXQgdDI6IGkzMiA9IHNlbGYubm9kZXNbeSBhcyB1c2l6ZV0ubGVmdDsKICAgICAgICAKICAgICAgICAvLyBQZXJmb3JtIHJvdGF0aW9uCiAgICAgICAgc2VsZi5ub2Rlc1t5IGFzIHVzaXplXS5sZWZ0ID0geDsKICAgICAgICBzZWxmLm5vZGVzW3ggYXMgdXNpemVdLnJpZ2h0ID0gdDI7CiAgICAgICAgCiAgICAgICAgLy8gVXBkYXRlIHBhcmVudCBwb2ludGVycwogICAgICAgIHNlbGYubm9kZXNbeCBhcyB1c2l6ZV0ucGFyZW50ID0geTsKICAgICAgICBpZiAodDIgIT0gLTEpIHsKICAgICAgICAgICAgc2VsZi5ub2Rlc1t0MiBhcyB1c2l6ZV0ucGFyZW50ID0geDsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gVXBkYXRlIGhlaWdodHMKICAgICAgICBzZWxmLnVwZGF0ZV9oZWlnaHQoeCk7CiAgICAgICAgc2VsZi51cGRhdGVfaGVpZ2h0KHkpOwogICAgICAgIAogICAgICAgIHNlbGYucm90YXRpb25fY291bnQgKz0gMTsKICAgICAgICByZXR1cm4geTsKICAgIH0KICAgIAogICAgZm4gaW5zZXJ0KCZtdXQgc2VsZiwgcm9vdDogaTMyLCBrZXk6IGkzMiwgdmFsdWU6IGkzMikgLT4gaTMyIHsKICAgICAgICAvLyBTdGFuZGFyZCBCU1QgaW5zZXJ0aW9uCiAgICAgICAgaWYgKHJvb3QgPT0gLTEpIHsKICAgICAgICAgICAgbGV0IG5ld19ub2RlOiBpMzIgPSBzZWxmLmFsbG9jYXRlX25vZGUodmFsdWUsIGtleSk7CiAgICAgICAgICAgIHNlbGYubm9kZV9pbnNlcnRpb25zICs9IDE7CiAgICAgICAgICAgIHJldHVybiBuZXdfbm9kZTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYgKGtleSA8IHNlbGYubm9kZXNbcm9vdCBhcyB1c2l6ZV0ua2V5KSB7CiAgICAgICAgICAgIGxldCBuZXdfbGVmdDogaTMyID0gc2VsZi5pbnNlcnQoc2VsZi5ub2Rlc1tyb290IGFzIHVzaXplXS5sZWZ0LCBrZXksIHZhbHVlKTsKICAgICAgICAgICAgc2VsZi5ub2Rlc1tyb290IGFzIHVzaXplXS5sZWZ0ID0gbmV3X2xlZnQ7CiAgICAgICAgICAgIGlmIChuZXdfbGVmdCAhPSAtMSkgewogICAgICAgICAgICAgICAgc2VsZi5ub2Rlc1tuZXdfbGVmdCBhcyB1c2l6ZV0ucGFyZW50ID0gcm9vdDsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoa2V5ID4gc2VsZi5ub2Rlc1tyb290IGFzIHVzaXplXS5rZXkpIHsKICAgICAgICAgICAgbGV0IG5ld19yaWdodDogaTMyID0gc2VsZi5pbnNlcnQoc2VsZi5ub2Rlc1tyb290IGFzIHVzaXplXS5yaWdodCwga2V5LCB2YWx1ZSk7CiAgICAgICAgICAgIHNlbGYubm9kZXNbcm9vdCBhcyB1c2l6ZV0ucmlnaHQgPSBuZXdfcmlnaHQ7CiAgICAgICAgICAgIGlmIChuZXdfcmlnaHQgIT0gLTEpIHsKICAgICAgICAgICAgICAgIHNlbGYubm9kZXNbbmV3X3JpZ2h0IGFzIHVzaXplXS5wYXJlbnQgPSByb290OwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gS2V5IGFscmVhZHkgZXhpc3RzLCB1cGRhdGUgdmFsdWUgYW5kIGZyZXF1ZW5jeQogICAgICAgICAgICBzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLnZhbHVlID0gdmFsdWU7CiAgICAgICAgICAgIHNlbGYubm9kZXNbcm9vdCBhcyB1c2l6ZV0uZnJlcXVlbmN5ICs9IDE7CiAgICAgICAgICAgIHJldHVybiByb290OwogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBVcGRhdGUgaGVpZ2h0IGFuZCBiYWxhbmNlIGZhY3RvcgogICAgICAgIHNlbGYudXBkYXRlX2hlaWdodChyb290KTsKICAgICAgICBsZXQgYmFsYW5jZTogaTMyID0gc2VsZi5nZXRfYmFsYW5jZShyb290KTsKICAgICAgICAKICAgICAgICAvLyBMZWZ0IExlZnQgQ2FzZQogICAgICAgIGlmIChiYWxhbmNlID4gMSAmJiBrZXkgPCBzZWxmLm5vZGVzW3NlbGYubm9kZXNbcm9vdCBhcyB1c2l6ZV0ubGVmdCBhcyB1c2l6ZV0ua2V5KSB7CiAgICAgICAgICAgIHJldHVybiBzZWxmLnJpZ2h0X3JvdGF0ZShyb290KTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gUmlnaHQgUmlnaHQgQ2FzZQogICAgICAgIGlmIChiYWxhbmNlIDwgLTEgJiYga2V5ID4gc2VsZi5ub2Rlc1tzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLnJpZ2h0IGFzIHVzaXplXS5rZXkpIHsKICAgICAgICAgICAgcmV0dXJuIHNlbGYubGVmdF9yb3RhdGUocm9vdCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIExlZnQgUmlnaHQgQ2FzZQogICAgICAgIGlmIChiYWxhbmNlID4gMSAmJiBrZXkgPiBzZWxmLm5vZGVzW3NlbGYubm9kZXNbcm9vdCBhcyB1c2l6ZV0ubGVmdCBhcyB1c2l6ZV0ua2V5KSB7CiAgICAgICAgICAgIGxldCBuZXdfbGVmdDogaTMyID0gc2VsZi5sZWZ0X3JvdGF0ZShzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLmxlZnQpOwogICAgICAgICAgICBzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLmxlZnQgPSBuZXdfbGVmdDsKICAgICAgICAgICAgaWYgKG5ld19sZWZ0ICE9IC0xKSB7CiAgICAgICAgICAgICAgICBzZWxmLm5vZGVzW25ld19sZWZ0IGFzIHVzaXplXS5wYXJlbnQgPSByb290OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzZWxmLnJpZ2h0X3JvdGF0ZShyb290KTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gUmlnaHQgTGVmdCBDYXNlCiAgICAgICAgaWYgKGJhbGFuY2UgPCAtMSAmJiBrZXkgPCBzZWxmLm5vZGVzW3NlbGYubm9kZXNbcm9vdCBhcyB1c2l6ZV0ucmlnaHQgYXMgdXNpemVdLmtleSkgewogICAgICAgICAgICBsZXQgbmV3X3JpZ2h0OiBpMzIgPSBzZWxmLnJpZ2h0X3JvdGF0ZShzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLnJpZ2h0KTsKICAgICAgICAgICAgc2VsZi5ub2Rlc1tyb290IGFzIHVzaXplXS5yaWdodCA9IG5ld19yaWdodDsKICAgICAgICAgICAgaWYgKG5ld19yaWdodCAhPSAtMSkgewogICAgICAgICAgICAgICAgc2VsZi5ub2Rlc1tuZXdfcmlnaHQgYXMgdXNpemVdLnBhcmVudCA9IHJvb3Q7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNlbGYubGVmdF9yb3RhdGUocm9vdCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHJldHVybiByb290OwogICAgfQogICAgCiAgICBmbiBzZWFyY2goJm11dCBzZWxmLCByb290OiBpMzIsIGtleTogaTMyKSAtPiBpMzIgewogICAgICAgIHNlbGYuc2VhcmNoX29wZXJhdGlvbnMgKz0gMTsKICAgICAgICAKICAgICAgICBpZiAocm9vdCA9PSAtMSB8fCBzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLmtleSA9PSBrZXkpIHsKICAgICAgICAgICAgcmV0dXJuIHJvb3Q7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmIChrZXkgPCBzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLmtleSkgewogICAgICAgICAgICByZXR1cm4gc2VsZi5zZWFyY2goc2VsZi5ub2Rlc1tyb290IGFzIHVzaXplXS5sZWZ0LCBrZXkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBzZWxmLnNlYXJjaChzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLnJpZ2h0LCBrZXkpOwogICAgICAgIH0KICAgIH0KICAgIAogICAgZm4gZmluZF9taW4oJnNlbGYsIHJvb3Q6IGkzMikgLT4gaTMyIHsKICAgICAgICBpZiAocm9vdCA9PSAtMSkgewogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGxldCBtdXQgY3VycmVudDogaTMyID0gcm9vdDsKICAgICAgICB3aGlsZSAoc2VsZi5ub2Rlc1tjdXJyZW50IGFzIHVzaXplXS5sZWZ0ICE9IC0xKSB7CiAgICAgICAgICAgIGN1cnJlbnQgPSBzZWxmLm5vZGVzW2N1cnJlbnQgYXMgdXNpemVdLmxlZnQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBjdXJyZW50OwogICAgfQogICAgCiAgICBmbiBkZWxldGVfbm9kZSgmbXV0IHNlbGYsIHJvb3Q6IGkzMiwga2V5OiBpMzIpIC0+IGkzMiB7CiAgICAgICAgaWYgKHJvb3QgPT0gLTEpIHsKICAgICAgICAgICAgcmV0dXJuIHJvb3Q7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmIChrZXkgPCBzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLmtleSkgewogICAgICAgICAgICBsZXQgbmV3X2xlZnQ6IGkzMiA9IHNlbGYuZGVsZXRlX25vZGUoc2VsZi5ub2Rlc1tyb290IGFzIHVzaXplXS5sZWZ0LCBrZXkpOwogICAgICAgICAgICBzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLmxlZnQgPSBuZXdfbGVmdDsKICAgICAgICAgICAgaWYgKG5ld19sZWZ0ICE9IC0xKSB7CiAgICAgICAgICAgICAgICBzZWxmLm5vZGVzW25ld19sZWZ0IGFzIHVzaXplXS5wYXJlbnQgPSByb290OwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChrZXkgPiBzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLmtleSkgewogICAgICAgICAgICBsZXQgbmV3X3JpZ2h0OiBpMzIgPSBzZWxmLmRlbGV0ZV9ub2RlKHNlbGYubm9kZXNbcm9vdCBhcyB1c2l6ZV0ucmlnaHQsIGtleSk7CiAgICAgICAgICAgIHNlbGYubm9kZXNbcm9vdCBhcyB1c2l6ZV0ucmlnaHQgPSBuZXdfcmlnaHQ7CiAgICAgICAgICAgIGlmIChuZXdfcmlnaHQgIT0gLTEpIHsKICAgICAgICAgICAgICAgIHNlbGYubm9kZXNbbmV3X3JpZ2h0IGFzIHVzaXplXS5wYXJlbnQgPSByb290OwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gTm9kZSB0byBiZSBkZWxldGVkIGZvdW5kCiAgICAgICAgICAgIGlmIChzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLmZyZXF1ZW5jeSA+IDEpIHsKICAgICAgICAgICAgICAgIHNlbGYubm9kZXNbcm9vdCBhcyB1c2l6ZV0uZnJlcXVlbmN5IC09IDE7CiAgICAgICAgICAgICAgICByZXR1cm4gcm9vdDsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgLy8gTm9kZSB3aXRoIG9ubHkgb25lIGNoaWxkIG9yIG5vIGNoaWxkCiAgICAgICAgICAgIGlmIChzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLmxlZnQgPT0gLTEpIHsKICAgICAgICAgICAgICAgIGxldCB0ZW1wOiBpMzIgPSBzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLnJpZ2h0OwogICAgICAgICAgICAgICAgc2VsZi5kZWFsbG9jYXRlX25vZGUocm9vdCk7CiAgICAgICAgICAgICAgICBzZWxmLm5vZGVfZGVsZXRpb25zICs9IDE7CiAgICAgICAgICAgICAgICByZXR1cm4gdGVtcDsKICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLnJpZ2h0ID09IC0xKSB7CiAgICAgICAgICAgICAgICBsZXQgdGVtcDogaTMyID0gc2VsZi5ub2Rlc1tyb290IGFzIHVzaXplXS5sZWZ0OwogICAgICAgICAgICAgICAgc2VsZi5kZWFsbG9jYXRlX25vZGUocm9vdCk7CiAgICAgICAgICAgICAgICBzZWxmLm5vZGVfZGVsZXRpb25zICs9IDE7CiAgICAgICAgICAgICAgICByZXR1cm4gdGVtcDsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgLy8gTm9kZSB3aXRoIHR3byBjaGlsZHJlbgogICAgICAgICAgICBsZXQgdGVtcDogaTMyID0gc2VsZi5maW5kX21pbihzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLnJpZ2h0KTsKICAgICAgICAgICAgc2VsZi5ub2Rlc1tyb290IGFzIHVzaXplXS5rZXkgPSBzZWxmLm5vZGVzW3RlbXAgYXMgdXNpemVdLmtleTsKICAgICAgICAgICAgc2VsZi5ub2Rlc1tyb290IGFzIHVzaXplXS52YWx1ZSA9IHNlbGYubm9kZXNbdGVtcCBhcyB1c2l6ZV0udmFsdWU7CiAgICAgICAgICAgIHNlbGYubm9kZXNbcm9vdCBhcyB1c2l6ZV0uZnJlcXVlbmN5ID0gc2VsZi5ub2Rlc1t0ZW1wIGFzIHVzaXplXS5mcmVxdWVuY3k7CiAgICAgICAgICAgIAogICAgICAgICAgICBsZXQgbmV3X3JpZ2h0OiBpMzIgPSBzZWxmLmRlbGV0ZV9ub2RlKHNlbGYubm9kZXNbcm9vdCBhcyB1c2l6ZV0ucmlnaHQsIHNlbGYubm9kZXNbdGVtcCBhcyB1c2l6ZV0ua2V5KTsKICAgICAgICAgICAgc2VsZi5ub2Rlc1tyb290IGFzIHVzaXplXS5yaWdodCA9IG5ld19yaWdodDsKICAgICAgICAgICAgaWYgKG5ld19yaWdodCAhPSAtMSkgewogICAgICAgICAgICAgICAgc2VsZi5ub2Rlc1tuZXdfcmlnaHQgYXMgdXNpemVdLnBhcmVudCA9IHJvb3Q7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gVXBkYXRlIGhlaWdodCBhbmQgYmFsYW5jZQogICAgICAgIHNlbGYudXBkYXRlX2hlaWdodChyb290KTsKICAgICAgICBsZXQgYmFsYW5jZTogaTMyID0gc2VsZi5nZXRfYmFsYW5jZShyb290KTsKICAgICAgICAKICAgICAgICAvLyBMZWZ0IExlZnQgQ2FzZQogICAgICAgIGlmIChiYWxhbmNlID4gMSAmJiBzZWxmLmdldF9iYWxhbmNlKHNlbGYubm9kZXNbcm9vdCBhcyB1c2l6ZV0ubGVmdCkgPj0gMCkgewogICAgICAgICAgICByZXR1cm4gc2VsZi5yaWdodF9yb3RhdGUocm9vdCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIExlZnQgUmlnaHQgQ2FzZQogICAgICAgIGlmIChiYWxhbmNlID4gMSAmJiBzZWxmLmdldF9iYWxhbmNlKHNlbGYubm9kZXNbcm9vdCBhcyB1c2l6ZV0ubGVmdCkgPCAwKSB7CiAgICAgICAgICAgIGxldCBuZXdfbGVmdDogaTMyID0gc2VsZi5sZWZ0X3JvdGF0ZShzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLmxlZnQpOwogICAgICAgICAgICBzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLmxlZnQgPSBuZXdfbGVmdDsKICAgICAgICAgICAgaWYgKG5ld19sZWZ0ICE9IC0xKSB7CiAgICAgICAgICAgICAgICBzZWxmLm5vZGVzW25ld19sZWZ0IGFzIHVzaXplXS5wYXJlbnQgPSByb290OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzZWxmLnJpZ2h0X3JvdGF0ZShyb290KTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gUmlnaHQgUmlnaHQgQ2FzZQogICAgICAgIGlmIChiYWxhbmNlIDwgLTEgJiYgc2VsZi5nZXRfYmFsYW5jZShzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLnJpZ2h0KSA8PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBzZWxmLmxlZnRfcm90YXRlKHJvb3QpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBSaWdodCBMZWZ0IENhc2UKICAgICAgICBpZiAoYmFsYW5jZSA8IC0xICYmIHNlbGYuZ2V0X2JhbGFuY2Uoc2VsZi5ub2Rlc1tyb290IGFzIHVzaXplXS5yaWdodCkgPiAwKSB7CiAgICAgICAgICAgIGxldCBuZXdfcmlnaHQ6IGkzMiA9IHNlbGYucmlnaHRfcm90YXRlKHNlbGYubm9kZXNbcm9vdCBhcyB1c2l6ZV0ucmlnaHQpOwogICAgICAgICAgICBzZWxmLm5vZGVzW3Jvb3QgYXMgdXNpemVdLnJpZ2h0ID0gbmV3X3JpZ2h0OwogICAgICAgICAgICBpZiAobmV3X3JpZ2h0ICE9IC0xKSB7CiAgICAgICAgICAgICAgICBzZWxmLm5vZGVzW25ld19yaWdodCBhcyB1c2l6ZV0ucGFyZW50ID0gcm9vdDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gc2VsZi5sZWZ0X3JvdGF0ZShyb290KTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHJvb3Q7CiAgICB9CiAgICAKICAgIGZuIGlub3JkZXJfdHJhdmVyc2FsKCZzZWxmLCByb290OiBpMzIsIHJlc3VsdDogJm11dCBbaTMyOyAxMDAwXSwgaW5kZXg6ICZtdXQgaTMyKSB7CiAgICAgICAgaWYgKHJvb3QgIT0gLTEgJiYgKmluZGV4IDwgMTAwMCkgewogICAgICAgICAgICBzZWxmLmlub3JkZXJfdHJhdmVyc2FsKHNlbGYubm9kZXNbcm9vdCBhcyB1c2l6ZV0ubGVmdCwgcmVzdWx0LCBpbmRleCk7CiAgICAgICAgICAgIHJlc3VsdFsqaW5kZXggYXMgdXNpemVdID0gc2VsZi5ub2Rlc1tyb290IGFzIHVzaXplXS52YWx1ZTsKICAgICAgICAgICAgKmluZGV4ICs9IDE7CiAgICAgICAgICAgIHNlbGYuaW5vcmRlcl90cmF2ZXJzYWwoc2VsZi5ub2Rlc1tyb290IGFzIHVzaXplXS5yaWdodCwgcmVzdWx0LCBpbmRleCk7CiAgICAgICAgfQogICAgfQp9CgovLyBBZHZhbmNlZCBIYXNoIFRhYmxlIHdpdGggZHluYW1pYyByZXNpemluZwpzdHJ1Y3QgSGFzaFRhYmxlIHsKICAgIGJ1Y2tldHM6IFtbaTMyOyAyMF07IDEwMDBdLAogICAgYnVja2V0X3NpemVzOiBbaTMyOyAxMDAwXSwKICAgIGtleXM6IFtbaTMyOyAyMF07IDEwMDBdLAogICAgY2FwYWNpdHk6IGkzMiwKICAgIHNpemU6IGkzMiwKICAgIGNvbGxpc2lvbl9jb3VudDogaTMyLAogICAgcmVzaXplX2NvdW50OiBpMzIsCiAgICAKICAgIC8vIEhhc2ggZnVuY3Rpb24gcGFyYW1ldGVycwogICAgaGFzaF9hOiBpMzIsCiAgICBoYXNoX2I6IGkzMiwKICAgIGhhc2hfcDogaTMyLAp9CgppbXBsIEhhc2hUYWJsZSB7CiAgICBmbiBuZXcoaW5pdGlhbF9jYXBhY2l0eTogaTMyKSAtPiBIYXNoVGFibGUgewogICAgICAgIEhhc2hUYWJsZSB7CiAgICAgICAgICAgIGJ1Y2tldHM6IFtbMDsgMjBdOyAxMDAwXSwKICAgICAgICAgICAgYnVja2V0X3NpemVzOiBbMDsgMTAwMF0sCiAgICAgICAgICAgIGtleXM6IFtbMDsgMjBdOyAxMDAwXSwKICAgICAgICAgICAgY2FwYWNpdHk6IGluaXRpYWxfY2FwYWNpdHksCiAgICAgICAgICAgIHNpemU6IDAsCiAgICAgICAgICAgIGNvbGxpc2lvbl9jb3VudDogMCwKICAgICAgICAgICAgcmVzaXplX2NvdW50OiAwLAogICAgICAgICAgICBoYXNoX2E6IDMxLAogICAgICAgICAgICBoYXNoX2I6IDE3LAogICAgICAgICAgICBoYXNoX3A6IDEwMDAwMDMsCiAgICAgICAgfQogICAgfQogICAgCiAgICBmbiBoYXNoX2Z1bmN0aW9uKCZzZWxmLCBrZXk6IGkzMikgLT4gaTMyIHsKICAgICAgICBsZXQgaGFzaF92YWx1ZTogaTMyID0gKChzZWxmLmhhc2hfYSAqIGtleSArIHNlbGYuaGFzaF9iKSAlIHNlbGYuaGFzaF9wKSAlIHNlbGYuY2FwYWNpdHk7CiAgICAgICAgaWYgKGhhc2hfdmFsdWUgPCAwKSB7CiAgICAgICAgICAgIHJldHVybiBoYXNoX3ZhbHVlICsgc2VsZi5jYXBhY2l0eTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGhhc2hfdmFsdWU7CiAgICB9CiAgICAKICAgIGZuIGluc2VydCgmbXV0IHNlbGYsIGtleTogaTMyLCB2YWx1ZTogaTMyKSB7CiAgICAgICAgbGV0IGluZGV4OiBpMzIgPSBzZWxmLmhhc2hfZnVuY3Rpb24oa2V5KTsKICAgICAgICAKICAgICAgICAvLyBDaGVjayBpZiBrZXkgYWxyZWFkeSBleGlzdHMKICAgICAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CiAgICAgICAgd2hpbGUgKGkgPCBzZWxmLmJ1Y2tldF9zaXplc1tpbmRleCBhcyB1c2l6ZV0pIHsKICAgICAgICAgICAgaWYgKHNlbGYua2V5c1tpbmRleCBhcyB1c2l6ZV1baSBhcyB1c2l6ZV0gPT0ga2V5KSB7CiAgICAgICAgICAgICAgICBzZWxmLmJ1Y2tldHNbaW5kZXggYXMgdXNpemVdW2kgYXMgdXNpemVdID0gdmFsdWU7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaSArPSAxOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBBZGQgbmV3IGtleS12YWx1ZSBwYWlyCiAgICAgICAgaWYgKHNlbGYuYnVja2V0X3NpemVzW2luZGV4IGFzIHVzaXplXSA8IDIwKSB7CiAgICAgICAgICAgIHNlbGYua2V5c1tpbmRleCBhcyB1c2l6ZV1bc2VsZi5idWNrZXRfc2l6ZXNbaW5kZXggYXMgdXNpemVdIGFzIHVzaXplXSA9IGtleTsKICAgICAgICAgICAgc2VsZi5idWNrZXRzW2luZGV4IGFzIHVzaXplXVtzZWxmLmJ1Y2tldF9zaXplc1tpbmRleCBhcyB1c2l6ZV0gYXMgdXNpemVdID0gdmFsdWU7CiAgICAgICAgICAgIHNlbGYuYnVja2V0X3NpemVzW2luZGV4IGFzIHVzaXplXSArPSAxOwogICAgICAgICAgICBzZWxmLnNpemUgKz0gMTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChzZWxmLmJ1Y2tldF9zaXplc1tpbmRleCBhcyB1c2l6ZV0gPiAxKSB7CiAgICAgICAgICAgICAgICBzZWxmLmNvbGxpc2lvbl9jb3VudCArPSAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBDaGVjayBpZiByZXNpemUgaXMgbmVlZGVkCiAgICAgICAgICAgIGlmIChzZWxmLnNpemUgPiBzZWxmLmNhcGFjaXR5ICogMyAvIDQpIHsKICAgICAgICAgICAgICAgIHNlbGYucmVzaXplKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICAKICAgIGZuIHNlYXJjaCgmc2VsZiwga2V5OiBpMzIpIC0+IGkzMiB7CiAgICAgICAgbGV0IGluZGV4OiBpMzIgPSBzZWxmLmhhc2hfZnVuY3Rpb24oa2V5KTsKICAgICAgICAKICAgICAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CiAgICAgICAgd2hpbGUgKGkgPCBzZWxmLmJ1Y2tldF9zaXplc1tpbmRleCBhcyB1c2l6ZV0pIHsKICAgICAgICAgICAgaWYgKHNlbGYua2V5c1tpbmRleCBhcyB1c2l6ZV1baSBhcyB1c2l6ZV0gPT0ga2V5KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5idWNrZXRzW2luZGV4IGFzIHVzaXplXVtpIGFzIHVzaXplXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpICs9IDE7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHJldHVybiAtMTsgLy8gS2V5IG5vdCBmb3VuZAogICAgfQogICAgCiAgICBmbiBkZWxldGUoJm11dCBzZWxmLCBrZXk6IGkzMikgLT4gYm9vbCB7CiAgICAgICAgbGV0IGluZGV4OiBpMzIgPSBzZWxmLmhhc2hfZnVuY3Rpb24oa2V5KTsKICAgICAgICAKICAgICAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CiAgICAgICAgd2hpbGUgKGkgPCBzZWxmLmJ1Y2tldF9zaXplc1tpbmRleCBhcyB1c2l6ZV0pIHsKICAgICAgICAgICAgaWYgKHNlbGYua2V5c1tpbmRleCBhcyB1c2l6ZV1baSBhcyB1c2l6ZV0gPT0ga2V5KSB7CiAgICAgICAgICAgICAgICAvLyBTaGlmdCBlbGVtZW50cyB0byBmaWxsIHRoZSBnYXAKICAgICAgICAgICAgICAgIGxldCBtdXQgajogaTMyID0gaTsKICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgc2VsZi5idWNrZXRfc2l6ZXNbaW5kZXggYXMgdXNpemVdIC0gMSkgewogICAgICAgICAgICAgICAgICAgIHNlbGYua2V5c1tpbmRleCBhcyB1c2l6ZV1baiBhcyB1c2l6ZV0gPSBzZWxmLmtleXNbaW5kZXggYXMgdXNpemVdWyhqICsgMSkgYXMgdXNpemVdOwogICAgICAgICAgICAgICAgICAgIHNlbGYuYnVja2V0c1tpbmRleCBhcyB1c2l6ZV1baiBhcyB1c2l6ZV0gPSBzZWxmLmJ1Y2tldHNbaW5kZXggYXMgdXNpemVdWyhqICsgMSkgYXMgdXNpemVdOwogICAgICAgICAgICAgICAgICAgIGogKz0gMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHNlbGYuYnVja2V0X3NpemVzW2luZGV4IGFzIHVzaXplXSAtPSAxOwogICAgICAgICAgICAgICAgc2VsZi5zaXplIC09IDE7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpICs9IDE7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIAogICAgZm4gcmVzaXplKCZtdXQgc2VsZikgewogICAgICAgIGlmIChzZWxmLmNhcGFjaXR5ID49IDkwMCkgewogICAgICAgICAgICByZXR1cm47IC8vIFByZXZlbnQgb3ZlcmZsb3cKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gU2F2ZSBvbGQgZGF0YQogICAgICAgIGxldCBvbGRfYnVja2V0czogW1tpMzI7IDIwXTsgMTAwMF0gPSBzZWxmLmJ1Y2tldHM7CiAgICAgICAgbGV0IG9sZF9rZXlzOiBbW2kzMjsgMjBdOyAxMDAwXSA9IHNlbGYua2V5czsKICAgICAgICBsZXQgb2xkX2J1Y2tldF9zaXplczogW2kzMjsgMTAwMF0gPSBzZWxmLmJ1Y2tldF9zaXplczsKICAgICAgICBsZXQgb2xkX2NhcGFjaXR5OiBpMzIgPSBzZWxmLmNhcGFjaXR5OwogICAgICAgIAogICAgICAgIC8vIEluaXRpYWxpemUgbmV3IGxhcmdlciB0YWJsZQogICAgICAgIHNlbGYuY2FwYWNpdHkgPSBzZWxmLmNhcGFjaXR5ICogMjsKICAgICAgICBpZiAoc2VsZi5jYXBhY2l0eSA+IDEwMDApIHsKICAgICAgICAgICAgc2VsZi5jYXBhY2l0eSA9IDEwMDA7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHNlbGYuYnVja2V0cyA9IFtbMDsgMjBdOyAxMDAwXTsKICAgICAgICBzZWxmLmtleXMgPSBbWzA7IDIwXTsgMTAwMF07CiAgICAgICAgc2VsZi5idWNrZXRfc2l6ZXMgPSBbMDsgMTAwMF07CiAgICAgICAgc2VsZi5zaXplID0gMDsKICAgICAgICBzZWxmLnJlc2l6ZV9jb3VudCArPSAxOwogICAgICAgIAogICAgICAgIC8vIFJlaGFzaCBhbGwgZWxlbWVudHMKICAgICAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CiAgICAgICAgd2hpbGUgKGkgPCBvbGRfY2FwYWNpdHkpIHsKICAgICAgICAgICAgbGV0IG11dCBqOiBpMzIgPSAwOwogICAgICAgICAgICB3aGlsZSAoaiA8IG9sZF9idWNrZXRfc2l6ZXNbaSBhcyB1c2l6ZV0pIHsKICAgICAgICAgICAgICAgIHNlbGYuaW5zZXJ0KG9sZF9rZXlzW2kgYXMgdXNpemVdW2ogYXMgdXNpemVdLCBvbGRfYnVja2V0c1tpIGFzIHVzaXplXVtqIGFzIHVzaXplXSk7CiAgICAgICAgICAgICAgICBqICs9IDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaSArPSAxOwogICAgICAgIH0KICAgIH0KfQoKLy8gTFJVIENhY2hlIGltcGxlbWVudGF0aW9uCnN0cnVjdCBMUlVDYWNoZSB7CiAgICBjYWNoZV9kYXRhOiBbaTMyOyA1MDBdLAogICAgY2FjaGVfa2V5czogW2kzMjsgNTAwXSwKICAgIHVzYWdlX29yZGVyOiBbaTMyOyA1MDBdLAogICAga2V5X3RvX2luZGV4OiBbaTMyOyAxMDAwMF0sCiAgICBjYXBhY2l0eTogaTMyLAogICAgc2l6ZTogaTMyLAogICAgYWNjZXNzX2NvdW50OiBpMzIsCiAgICBoaXRfY291bnQ6IGkzMiwKICAgIG1pc3NfY291bnQ6IGkzMiwKfQoKaW1wbCBMUlVDYWNoZSB7CiAgICBmbiBuZXcoY2FwYWNpdHk6IGkzMikgLT4gTFJVQ2FjaGUgewogICAgICAgIGxldCBtdXQgY2FjaGU6IExSVUNhY2hlID0gTFJVQ2FjaGUgewogICAgICAgICAgICBjYWNoZV9kYXRhOiBbMDsgNTAwXSwKICAgICAgICAgICAgY2FjaGVfa2V5czogWzA7IDUwMF0sCiAgICAgICAgICAgIHVzYWdlX29yZGVyOiBbMDsgNTAwXSwKICAgICAgICAgICAga2V5X3RvX2luZGV4OiBbLTE7IDEwMDAwXSwKICAgICAgICAgICAgY2FwYWNpdHk6IGNhcGFjaXR5LAogICAgICAgICAgICBzaXplOiAwLAogICAgICAgICAgICBhY2Nlc3NfY291bnQ6IDAsCiAgICAgICAgICAgIGhpdF9jb3VudDogMCwKICAgICAgICAgICAgbWlzc19jb3VudDogMCwKICAgICAgICB9OwogICAgICAgIAogICAgICAgIC8vIEluaXRpYWxpemUga2V5IG1hcHBpbmcKICAgICAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CiAgICAgICAgd2hpbGUgKGkgPCAxMDAwMCkgewogICAgICAgICAgICBjYWNoZS5rZXlfdG9faW5kZXhbaSBhcyB1c2l6ZV0gPSAtMTsKICAgICAgICAgICAgaSArPSAxOwogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gY2FjaGU7CiAgICB9CiAgICAKICAgIGZuIGdldCgmbXV0IHNlbGYsIGtleTogaTMyKSAtPiBpMzIgewogICAgICAgIHNlbGYuYWNjZXNzX2NvdW50ICs9IDE7CiAgICAgICAgCiAgICAgICAgaWYgKGtleSA8IDAgfHwga2V5ID49IDEwMDAwKSB7CiAgICAgICAgICAgIHNlbGYubWlzc19jb3VudCArPSAxOwogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGxldCBpbmRleDogaTMyID0gc2VsZi5rZXlfdG9faW5kZXhba2V5IGFzIHVzaXplXTsKICAgICAgICBpZiAoaW5kZXggPT0gLTEpIHsKICAgICAgICAgICAgc2VsZi5taXNzX2NvdW50ICs9IDE7CiAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gVXBkYXRlIHVzYWdlIG9yZGVyCiAgICAgICAgc2VsZi51cGRhdGVfdXNhZ2Vfb3JkZXIoaW5kZXgpOwogICAgICAgIHNlbGYuaGl0X2NvdW50ICs9IDE7CiAgICAgICAgcmV0dXJuIHNlbGYuY2FjaGVfZGF0YVtpbmRleCBhcyB1c2l6ZV07CiAgICB9CiAgICAKICAgIGZuIHB1dCgmbXV0IHNlbGYsIGtleTogaTMyLCB2YWx1ZTogaTMyKSB7CiAgICAgICAgaWYgKGtleSA8IDAgfHwga2V5ID49IDEwMDAwKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgbGV0IGV4aXN0aW5nX2luZGV4OiBpMzIgPSBzZWxmLmtleV90b19pbmRleFtrZXkgYXMgdXNpemVdOwogICAgICAgIGlmIChleGlzdGluZ19pbmRleCAhPSAtMSkgewogICAgICAgICAgICAvLyBVcGRhdGUgZXhpc3RpbmcgZW50cnkKICAgICAgICAgICAgc2VsZi5jYWNoZV9kYXRhW2V4aXN0aW5nX2luZGV4IGFzIHVzaXplXSA9IHZhbHVlOwogICAgICAgICAgICBzZWxmLnVwZGF0ZV91c2FnZV9vcmRlcihleGlzdGluZ19pbmRleCk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYgKHNlbGYuc2l6ZSA8IHNlbGYuY2FwYWNpdHkpIHsKICAgICAgICAgICAgLy8gQWRkIG5ldyBlbnRyeQogICAgICAgICAgICBsZXQgbmV3X2luZGV4OiBpMzIgPSBzZWxmLnNpemU7CiAgICAgICAgICAgIHNlbGYuY2FjaGVfa2V5c1tuZXdfaW5kZXggYXMgdXNpemVdID0ga2V5OwogICAgICAgICAgICBzZWxmLmNhY2hlX2RhdGFbbmV3X2luZGV4IGFzIHVzaXplXSA9IHZhbHVlOwogICAgICAgICAgICBzZWxmLmtleV90b19pbmRleFtrZXkgYXMgdXNpemVdID0gbmV3X2luZGV4OwogICAgICAgICAgICBzZWxmLnVzYWdlX29yZGVyW25ld19pbmRleCBhcyB1c2l6ZV0gPSBzZWxmLmFjY2Vzc19jb3VudDsKICAgICAgICAgICAgc2VsZi5zaXplICs9IDE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gRmluZCBMUlUgZW50cnkgdG8gcmVwbGFjZQogICAgICAgICAgICBsZXQgbXV0IGxydV9pbmRleDogaTMyID0gMDsKICAgICAgICAgICAgbGV0IG11dCBtaW5fdXNhZ2U6IGkzMiA9IHNlbGYudXNhZ2Vfb3JkZXJbMF07CiAgICAgICAgICAgIAogICAgICAgICAgICBsZXQgbXV0IGk6IGkzMiA9IDE7CiAgICAgICAgICAgIHdoaWxlIChpIDwgc2VsZi5jYXBhY2l0eSkgewogICAgICAgICAgICAgICAgaWYgKHNlbGYudXNhZ2Vfb3JkZXJbaSBhcyB1c2l6ZV0gPCBtaW5fdXNhZ2UpIHsKICAgICAgICAgICAgICAgICAgICBtaW5fdXNhZ2UgPSBzZWxmLnVzYWdlX29yZGVyW2kgYXMgdXNpemVdOwogICAgICAgICAgICAgICAgICAgIGxydV9pbmRleCA9IGk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpICs9IDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIFJlbW92ZSBvbGQgbWFwcGluZyBhbmQgYWRkIG5ldyBlbnRyeQogICAgICAgICAgICBsZXQgb2xkX2tleTogaTMyID0gc2VsZi5jYWNoZV9rZXlzW2xydV9pbmRleCBhcyB1c2l6ZV07CiAgICAgICAgICAgIGlmIChvbGRfa2V5ID49IDAgJiYgb2xkX2tleSA8IDEwMDAwKSB7CiAgICAgICAgICAgICAgICBzZWxmLmtleV90b19pbmRleFtvbGRfa2V5IGFzIHVzaXplXSA9IC0xOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmNhY2hlX2tleXNbbHJ1X2luZGV4IGFzIHVzaXplXSA9IGtleTsKICAgICAgICAgICAgc2VsZi5jYWNoZV9kYXRhW2xydV9pbmRleCBhcyB1c2l6ZV0gPSB2YWx1ZTsKICAgICAgICAgICAgc2VsZi5rZXlfdG9faW5kZXhba2V5IGFzIHVzaXplXSA9IGxydV9pbmRleDsKICAgICAgICAgICAgc2VsZi51c2FnZV9vcmRlcltscnVfaW5kZXggYXMgdXNpemVdID0gc2VsZi5hY2Nlc3NfY291bnQ7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmbiB1cGRhdGVfdXNhZ2Vfb3JkZXIoJm11dCBzZWxmLCBpbmRleDogaTMyKSB7CiAgICAgICAgc2VsZi51c2FnZV9vcmRlcltpbmRleCBhcyB1c2l6ZV0gPSBzZWxmLmFjY2Vzc19jb3VudDsKICAgIH0KICAgIAogICAgZm4gZ2V0X2NhY2hlX3N0YXRpc3RpY3MoJnNlbGYpIC0+IFtpMzI7IDVdIHsKICAgICAgICBsZXQgaGl0X3JhdGU6IGkzMiA9IGlmIChzZWxmLmFjY2Vzc19jb3VudCA+IDApIHsgKHNlbGYuaGl0X2NvdW50ICogMTAwKSAvIHNlbGYuYWNjZXNzX2NvdW50IH0gZWxzZSB7IDAgfTsKICAgICAgICBbc2VsZi5oaXRfY291bnQsIHNlbGYubWlzc19jb3VudCwgc2VsZi5hY2Nlc3NfY291bnQsIGhpdF9yYXRlLCBzZWxmLnNpemVdCiAgICB9Cn0KCi8vIE1lbW9yeSBNYW5hZ2VtZW50IFNpbXVsYXRvcgpzdHJ1Y3QgTWVtb3J5TWFuYWdlciB7CiAgICBtZW1vcnlfYmxvY2tzOiBbaTMyOyAxMDAwMF0sCiAgICBibG9ja19zdGF0dXM6IFtib29sOyAxMDAwMF0sIC8vIHRydWUgPSBhbGxvY2F0ZWQsIGZhbHNlID0gZnJlZQogICAgYmxvY2tfc2l6ZXM6IFtpMzI7IDEwMDAwXSwKICAgIHRvdGFsX21lbW9yeTogaTMyLAogICAgYWxsb2NhdGVkX21lbW9yeTogaTMyLAogICAgZnJlZV9tZW1vcnk6IGkzMiwKICAgIGFsbG9jYXRpb25fY291bnQ6IGkzMiwKICAgIGRlYWxsb2NhdGlvbl9jb3VudDogaTMyLAogICAgZnJhZ21lbnRhdGlvbl9zY29yZTogaTMyLAp9CgppbXBsIE1lbW9yeU1hbmFnZXIgewogICAgZm4gbmV3KHRvdGFsX3NpemU6IGkzMikgLT4gTWVtb3J5TWFuYWdlciB7CiAgICAgICAgbGV0IG11dCBtYW5hZ2VyOiBNZW1vcnlNYW5hZ2VyID0gTWVtb3J5TWFuYWdlciB7CiAgICAgICAgICAgIG1lbW9yeV9ibG9ja3M6IFswOyAxMDAwMF0sCiAgICAgICAgICAgIGJsb2NrX3N0YXR1czogW2ZhbHNlOyAxMDAwMF0sCiAgICAgICAgICAgIGJsb2NrX3NpemVzOiBbMDsgMTAwMDBdLAogICAgICAgICAgICB0b3RhbF9tZW1vcnk6IHRvdGFsX3NpemUsCiAgICAgICAgICAgIGFsbG9jYXRlZF9tZW1vcnk6IDAsCiAgICAgICAgICAgIGZyZWVfbWVtb3J5OiB0b3RhbF9zaXplLAogICAgICAgICAgICBhbGxvY2F0aW9uX2NvdW50OiAwLAogICAgICAgICAgICBkZWFsbG9jYXRpb25fY291bnQ6IDAsCiAgICAgICAgICAgIGZyYWdtZW50YXRpb25fc2NvcmU6IDAsCiAgICAgICAgfTsKICAgICAgICAKICAgICAgICAvLyBJbml0aWFsaXplIHdpdGggb25lIGxhcmdlIGZyZWUgYmxvY2sKICAgICAgICBtYW5hZ2VyLmJsb2NrX3NpemVzWzBdID0gdG90YWxfc2l6ZTsKICAgICAgICAKICAgICAgICByZXR1cm4gbWFuYWdlcjsKICAgIH0KICAgIAogICAgZm4gYWxsb2NhdGUoJm11dCBzZWxmLCBzaXplOiBpMzIpIC0+IGkzMiB7CiAgICAgICAgaWYgKHNpemUgPD0gMCB8fCBzaXplID4gc2VsZi5mcmVlX21lbW9yeSkgewogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIEZpbmQgZmlyc3QgZml0CiAgICAgICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgICAgIHdoaWxlIChpIDwgMTAwMDApIHsKICAgICAgICAgICAgaWYgKCFzZWxmLmJsb2NrX3N0YXR1c1tpIGFzIHVzaXplXSAmJiBzZWxmLmJsb2NrX3NpemVzW2kgYXMgdXNpemVdID49IHNpemUpIHsKICAgICAgICAgICAgICAgIC8vIEFsbG9jYXRlIHRoaXMgYmxvY2sKICAgICAgICAgICAgICAgIHNlbGYuYmxvY2tfc3RhdHVzW2kgYXMgdXNpemVdID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHNlbGYubWVtb3J5X2Jsb2Nrc1tpIGFzIHVzaXplXSA9IGk7IC8vIEJsb2NrIElECiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIFNwbGl0IGJsb2NrIGlmIG5lY2Vzc2FyeQogICAgICAgICAgICAgICAgaWYgKHNlbGYuYmxvY2tfc2l6ZXNbaSBhcyB1c2l6ZV0gPiBzaXplKSB7CiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbWFpbmluZ19zaXplOiBpMzIgPSBzZWxmLmJsb2NrX3NpemVzW2kgYXMgdXNpemVdIC0gc2l6ZTsKICAgICAgICAgICAgICAgICAgICBzZWxmLmJsb2NrX3NpemVzW2kgYXMgdXNpemVdID0gc2l6ZTsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIGZyZWUgc2xvdCBmb3IgcmVtYWluaW5nIGJsb2NrCiAgICAgICAgICAgICAgICAgICAgbGV0IG11dCBqOiBpMzIgPSAwOwogICAgICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgMTAwMDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuYmxvY2tfc2l6ZXNbaiBhcyB1c2l6ZV0gPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ibG9ja19zaXplc1tqIGFzIHVzaXplXSA9IHJlbWFpbmluZ19zaXplOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaiArPSAxOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgc2VsZi5hbGxvY2F0ZWRfbWVtb3J5ICs9IHNpemU7CiAgICAgICAgICAgICAgICBzZWxmLmZyZWVfbWVtb3J5IC09IHNpemU7CiAgICAgICAgICAgICAgICBzZWxmLmFsbG9jYXRpb25fY291bnQgKz0gMTsKICAgICAgICAgICAgICAgIHNlbGYuY2FsY3VsYXRlX2ZyYWdtZW50YXRpb24oKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcmV0dXJuIGk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaSArPSAxOwogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gLTE7IC8vIEFsbG9jYXRpb24gZmFpbGVkCiAgICB9CiAgICAKICAgIGZuIGRlYWxsb2NhdGUoJm11dCBzZWxmLCBibG9ja19pZDogaTMyKSAtPiBib29sIHsKICAgICAgICBpZiAoYmxvY2tfaWQgPCAwIHx8IGJsb2NrX2lkID49IDEwMDAwIHx8ICFzZWxmLmJsb2NrX3N0YXR1c1tibG9ja19pZCBhcyB1c2l6ZV0pIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBsZXQgc2l6ZTogaTMyID0gc2VsZi5ibG9ja19zaXplc1tibG9ja19pZCBhcyB1c2l6ZV07CiAgICAgICAgc2VsZi5ibG9ja19zdGF0dXNbYmxvY2tfaWQgYXMgdXNpemVdID0gZmFsc2U7CiAgICAgICAgc2VsZi5hbGxvY2F0ZWRfbWVtb3J5IC09IHNpemU7CiAgICAgICAgc2VsZi5mcmVlX21lbW9yeSArPSBzaXplOwogICAgICAgIHNlbGYuZGVhbGxvY2F0aW9uX2NvdW50ICs9IDE7CiAgICAgICAgCiAgICAgICAgLy8gQXR0ZW1wdCB0byBjb2FsZXNjZSB3aXRoIGFkamFjZW50IGZyZWUgYmxvY2tzCiAgICAgICAgc2VsZi5jb2FsZXNjZV9mcmVlX2Jsb2NrcygpOwogICAgICAgIHNlbGYuY2FsY3VsYXRlX2ZyYWdtZW50YXRpb24oKTsKICAgICAgICAKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgZm4gY29hbGVzY2VfZnJlZV9ibG9ja3MoJm11dCBzZWxmKSB7CiAgICAgICAgLy8gU2ltcGxlIGNvYWxlc2Npbmcgc3RyYXRlZ3kKICAgICAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CiAgICAgICAgd2hpbGUgKGkgPCA5OTk5KSB7CiAgICAgICAgICAgIGlmICghc2VsZi5ibG9ja19zdGF0dXNbaSBhcyB1c2l6ZV0gJiYgIXNlbGYuYmxvY2tfc3RhdHVzWyhpICsgMSkgYXMgdXNpemVdKSB7CiAgICAgICAgICAgICAgICBzZWxmLmJsb2NrX3NpemVzW2kgYXMgdXNpemVdICs9IHNlbGYuYmxvY2tfc2l6ZXNbKGkgKyAxKSBhcyB1c2l6ZV07CiAgICAgICAgICAgICAgICBzZWxmLmJsb2NrX3NpemVzWyhpICsgMSkgYXMgdXNpemVdID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpICs9IDE7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmbiBjYWxjdWxhdGVfZnJhZ21lbnRhdGlvbigmbXV0IHNlbGYpIHsKICAgICAgICBsZXQgbXV0IGZyZWVfYmxvY2tfY291bnQ6IGkzMiA9IDA7CiAgICAgICAgbGV0IG11dCBsYXJnZXN0X2ZyZWVfYmxvY2s6IGkzMiA9IDA7CiAgICAgICAgCiAgICAgICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgICAgIHdoaWxlIChpIDwgMTAwMDApIHsKICAgICAgICAgICAgaWYgKCFzZWxmLmJsb2NrX3N0YXR1c1tpIGFzIHVzaXplXSAmJiBzZWxmLmJsb2NrX3NpemVzW2kgYXMgdXNpemVdID4gMCkgewogICAgICAgICAgICAgICAgZnJlZV9ibG9ja19jb3VudCArPSAxOwogICAgICAgICAgICAgICAgaWYgKHNlbGYuYmxvY2tfc2l6ZXNbaSBhcyB1c2l6ZV0gPiBsYXJnZXN0X2ZyZWVfYmxvY2spIHsKICAgICAgICAgICAgICAgICAgICBsYXJnZXN0X2ZyZWVfYmxvY2sgPSBzZWxmLmJsb2NrX3NpemVzW2kgYXMgdXNpemVdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGkgKz0gMTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYgKHNlbGYuZnJlZV9tZW1vcnkgPiAwKSB7CiAgICAgICAgICAgIHNlbGYuZnJhZ21lbnRhdGlvbl9zY29yZSA9IDEwMCAtIChsYXJnZXN0X2ZyZWVfYmxvY2sgKiAxMDApIC8gc2VsZi5mcmVlX21lbW9yeTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzZWxmLmZyYWdtZW50YXRpb25fc2NvcmUgPSAwOwogICAgICAgIH0KICAgIH0KICAgIAogICAgZm4gZ2V0X21lbW9yeV9zdGF0aXN0aWNzKCZzZWxmKSAtPiBbaTMyOyA2XSB7CiAgICAgICAgWwogICAgICAgICAgICBzZWxmLmFsbG9jYXRlZF9tZW1vcnksCiAgICAgICAgICAgIHNlbGYuZnJlZV9tZW1vcnksCiAgICAgICAgICAgIHNlbGYuYWxsb2NhdGlvbl9jb3VudCwKICAgICAgICAgICAgc2VsZi5kZWFsbG9jYXRpb25fY291bnQsCiAgICAgICAgICAgIHNlbGYuZnJhZ21lbnRhdGlvbl9zY29yZSwKICAgICAgICAgICAgc2VsZi50b3RhbF9tZW1vcnkKICAgICAgICBdCiAgICB9Cn0KCi8vIE1haW4gY29tcHJlaGVuc2l2ZSBkYXRhIHN0cnVjdHVyZSB0ZXN0CmZuIG1haW4oKSB7CiAgICAvLyBJbml0aWFsaXplIEFWTCBUcmVlCiAgICBsZXQgbXV0IGF2bF90cmVlOiBBVkxUcmVlID0gQVZMVHJlZTo6bmV3KCk7CiAgICAKICAgIC8vIFJlYWQgdHJlZSBvcGVyYXRpb25zCiAgICBsZXQgdHJlZV9vcGVyYXRpb25zOiBpMzIgPSBnZXRJbnQoKTsKICAgIGxldCBtdXQgaTogaTMyID0gMDsKICAgIHdoaWxlIChpIDwgdHJlZV9vcGVyYXRpb25zKSB7CiAgICAgICAgbGV0IG9wZXJhdGlvbjogaTMyID0gZ2V0SW50KCk7CiAgICAgICAgbGV0IGtleTogaTMyID0gZ2V0SW50KCk7CiAgICAgICAgbGV0IHZhbHVlOiBpMzIgPSBnZXRJbnQoKTsKICAgICAgICAKICAgICAgICBpZiAob3BlcmF0aW9uID09IDEpIHsKICAgICAgICAgICAgYXZsX3RyZWUucm9vdCA9IGF2bF90cmVlLmluc2VydChhdmxfdHJlZS5yb290LCBrZXksIHZhbHVlKTsKICAgICAgICB9IGVsc2UgaWYgKG9wZXJhdGlvbiA9PSAyKSB7CiAgICAgICAgICAgIGF2bF90cmVlLnJvb3QgPSBhdmxfdHJlZS5kZWxldGVfbm9kZShhdmxfdHJlZS5yb290LCBrZXkpOwogICAgICAgIH0gZWxzZSBpZiAob3BlcmF0aW9uID09IDMpIHsKICAgICAgICAgICAgbGV0IHJlc3VsdDogaTMyID0gYXZsX3RyZWUuc2VhcmNoKGF2bF90cmVlLnJvb3QsIGtleSk7CiAgICAgICAgICAgIGlmIChyZXN1bHQgIT0gLTEpIHsKICAgICAgICAgICAgICAgIHByaW50bG5JbnQoYXZsX3RyZWUubm9kZXNbcmVzdWx0IGFzIHVzaXplXS52YWx1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBwcmludGxuSW50KC0xKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpICs9IDE7CiAgICB9CiAgICAKICAgIC8vIEluaXRpYWxpemUgSGFzaCBUYWJsZQogICAgbGV0IGhhc2hfY2FwYWNpdHk6IGkzMiA9IGdldEludCgpOwogICAgbGV0IG11dCBoYXNoX3RhYmxlOiBIYXNoVGFibGUgPSBIYXNoVGFibGU6Om5ldyhoYXNoX2NhcGFjaXR5KTsKICAgIAogICAgLy8gUmVhZCBoYXNoIHRhYmxlIG9wZXJhdGlvbnMKICAgIGxldCBoYXNoX29wZXJhdGlvbnM6IGkzMiA9IGdldEludCgpOwogICAgaSA9IDA7CiAgICB3aGlsZSAoaSA8IGhhc2hfb3BlcmF0aW9ucykgewogICAgICAgIGxldCBvcGVyYXRpb246IGkzMiA9IGdldEludCgpOwogICAgICAgIGxldCBrZXk6IGkzMiA9IGdldEludCgpOwogICAgICAgIAogICAgICAgIGlmIChvcGVyYXRpb24gPT0gMSkgewogICAgICAgICAgICBsZXQgdmFsdWU6IGkzMiA9IGdldEludCgpOwogICAgICAgICAgICBoYXNoX3RhYmxlLmluc2VydChrZXksIHZhbHVlKTsKICAgICAgICB9IGVsc2UgaWYgKG9wZXJhdGlvbiA9PSAyKSB7CiAgICAgICAgICAgIGxldCByZXN1bHQ6IGkzMiA9IGhhc2hfdGFibGUuc2VhcmNoKGtleSk7CiAgICAgICAgICAgIHByaW50bG5JbnQocmVzdWx0KTsKICAgICAgICB9IGVsc2UgaWYgKG9wZXJhdGlvbiA9PSAzKSB7CiAgICAgICAgICAgIGxldCBkZWxldGVkOiBib29sID0gaGFzaF90YWJsZS5kZWxldGUoa2V5KTsKICAgICAgICAgICAgcHJpbnRsbkludChpZiAoZGVsZXRlZCkgeyAxIH0gZWxzZSB7IDAgfSk7CiAgICAgICAgfQogICAgICAgIGkgKz0gMTsKICAgIH0KICAgIAogICAgLy8gSW5pdGlhbGl6ZSBMUlUgQ2FjaGUKICAgIGxldCBjYWNoZV9jYXBhY2l0eTogaTMyID0gZ2V0SW50KCk7CiAgICBsZXQgbXV0IGxydV9jYWNoZTogTFJVQ2FjaGUgPSBMUlVDYWNoZTo6bmV3KGNhY2hlX2NhcGFjaXR5KTsKICAgIAogICAgLy8gUmVhZCBjYWNoZSBvcGVyYXRpb25zCiAgICBsZXQgY2FjaGVfb3BlcmF0aW9uczogaTMyID0gZ2V0SW50KCk7CiAgICBpID0gMDsKICAgIHdoaWxlIChpIDwgY2FjaGVfb3BlcmF0aW9ucykgewogICAgICAgIGxldCBvcGVyYXRpb246IGkzMiA9IGdldEludCgpOwogICAgICAgIGxldCBrZXk6IGkzMiA9IGdldEludCgpOwogICAgICAgIAogICAgICAgIGlmIChvcGVyYXRpb24gPT0gMSkgewogICAgICAgICAgICBsZXQgdmFsdWU6IGkzMiA9IGdldEludCgpOwogICAgICAgICAgICBscnVfY2FjaGUucHV0KGtleSwgdmFsdWUpOwogICAgICAgIH0gZWxzZSBpZiAob3BlcmF0aW9uID09IDIpIHsKICAgICAgICAgICAgbGV0IHJlc3VsdDogaTMyID0gbHJ1X2NhY2hlLmdldChrZXkpOwogICAgICAgICAgICBwcmludGxuSW50KHJlc3VsdCk7CiAgICAgICAgfQogICAgICAgIGkgKz0gMTsKICAgIH0KICAgIAogICAgLy8gSW5pdGlhbGl6ZSBNZW1vcnkgTWFuYWdlcgogICAgbGV0IG1lbW9yeV9zaXplOiBpMzIgPSBnZXRJbnQoKTsKICAgIGxldCBtdXQgbWVtb3J5X21hbmFnZXI6IE1lbW9yeU1hbmFnZXIgPSBNZW1vcnlNYW5hZ2VyOjpuZXcobWVtb3J5X3NpemUpOwogICAgCiAgICAvLyBSZWFkIG1lbW9yeSBvcGVyYXRpb25zCiAgICBsZXQgbWVtb3J5X29wZXJhdGlvbnM6IGkzMiA9IGdldEludCgpOwogICAgaSA9IDA7CiAgICB3aGlsZSAoaSA8IG1lbW9yeV9vcGVyYXRpb25zKSB7CiAgICAgICAgbGV0IG9wZXJhdGlvbjogaTMyID0gZ2V0SW50KCk7CiAgICAgICAgCiAgICAgICAgaWYgKG9wZXJhdGlvbiA9PSAxKSB7CiAgICAgICAgICAgIGxldCBzaXplOiBpMzIgPSBnZXRJbnQoKTsKICAgICAgICAgICAgbGV0IGJsb2NrX2lkOiBpMzIgPSBtZW1vcnlfbWFuYWdlci5hbGxvY2F0ZShzaXplKTsKICAgICAgICAgICAgcHJpbnRsbkludChibG9ja19pZCk7CiAgICAgICAgfSBlbHNlIGlmIChvcGVyYXRpb24gPT0gMikgewogICAgICAgICAgICBsZXQgYmxvY2tfaWQ6IGkzMiA9IGdldEludCgpOwogICAgICAgICAgICBsZXQgc3VjY2VzczogYm9vbCA9IG1lbW9yeV9tYW5hZ2VyLmRlYWxsb2NhdGUoYmxvY2tfaWQpOwogICAgICAgICAgICBwcmludGxuSW50KGlmIChzdWNjZXNzKSB7IDEgfSBlbHNlIHsgMCB9KTsKICAgICAgICB9CiAgICAgICAgaSArPSAxOwogICAgfQogICAgCiAgICAvLyBPdXRwdXQgY29tcHJlaGVuc2l2ZSBzdGF0aXN0aWNzCiAgICBwcmludGxuSW50KGF2bF90cmVlLm5vZGVfY291bnQpOwogICAgcHJpbnRsbkludChhdmxfdHJlZS5yb3RhdGlvbl9jb3VudCk7CiAgICBwcmludGxuSW50KGF2bF90cmVlLnNlYXJjaF9vcGVyYXRpb25zKTsKICAgIAogICAgcHJpbnRsbkludChoYXNoX3RhYmxlLnNpemUpOwogICAgcHJpbnRsbkludChoYXNoX3RhYmxlLmNvbGxpc2lvbl9jb3VudCk7CiAgICBwcmludGxuSW50KGhhc2hfdGFibGUucmVzaXplX2NvdW50KTsKICAgIAogICAgbGV0IGNhY2hlX3N0YXRzOiBbaTMyOyA1XSA9IGxydV9jYWNoZS5nZXRfY2FjaGVfc3RhdGlzdGljcygpOwogICAgaSA9IDA7CiAgICB3aGlsZSAoaSA8IDUpIHsKICAgICAgICBwcmludGxuSW50KGNhY2hlX3N0YXRzW2kgYXMgdXNpemVdKTsKICAgICAgICBpICs9IDE7CiAgICB9CiAgICAKICAgIGxldCBtZW1vcnlfc3RhdHM6IFtpMzI7IDZdID0gbWVtb3J5X21hbmFnZXIuZ2V0X21lbW9yeV9zdGF0aXN0aWNzKCk7CiAgICBpID0gMDsKICAgIHdoaWxlIChpIDwgNikgewogICAgICAgIHByaW50bG5JbnQobWVtb3J5X3N0YXRzW2kgYXMgdXNpemVdKTsKICAgICAgICBpICs9IDE7CiAgICB9CiAgICAKICAgIC8vIEZpbmFsIGNvbXByZWhlbnNpdmUgYW5hbHlzaXMKICAgIGxldCB0cmVlX3Njb3JlOiBpMzIgPSBhdmxfdHJlZS5ub2RlX2NvdW50ICogMTAgKyBhdmxfdHJlZS5yb3RhdGlvbl9jb3VudDsKICAgIGxldCBoYXNoX3Njb3JlOiBpMzIgPSBoYXNoX3RhYmxlLnNpemUgKiA1ICsgaGFzaF90YWJsZS5jb2xsaXNpb25fY291bnQ7CiAgICBsZXQgY2FjaGVfc2NvcmU6IGkzMiA9IGNhY2hlX3N0YXRzWzNdOyAvLyBIaXQgcmF0ZQogICAgbGV0IG1lbW9yeV9zY29yZTogaTMyID0gMTAwIC0gbWVtb3J5X3N0YXRzWzRdOyAvLyBJbnZlcnNlIG9mIGZyYWdtZW50YXRpb24KCiAgICBsZXQgdG90YWxfc2NvcmU6IGkzMiA9IHRyZWVfc2NvcmUgKyBoYXNoX3Njb3JlICsgY2FjaGVfc2NvcmUgKyBtZW1vcnlfc2NvcmU7CiAgICBwcmludGxuSW50KHRvdGFsX3Njb3JlKTsKICAgIGV4aXQoMCk7Cn0K", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (15, "comprehensive15", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (16, "comprehensive16", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (17, "comprehensive17", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (18, "comprehensive18", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (19, "comprehensive19", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (20, "comprehensive20", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (21, "comprehensive21", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (22, "comprehensive22", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (23, "comprehensive23", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (24, "comprehensive24", 2, "LyoKVGVzdCBQYWNrYWdlOiBTZW1hbnRpYy0yClRlc3QgVGFyZ2V0OiBjb21wcmVoZW5zaXZlCkF1dGhvcjogV2VueGluIFpoZW5nClRpbWU6IDIwMjUtMDgtMTcKVmVyZGljdDogUGFzcwpUZXN0IE5hbWU6IFZpcnR1YWwgTWVtb3J5IE1hbmFnZW1lbnQgYW5kIFBhZ2UgUmVwbGFjZW1lbnQgQWxnb3JpdGhtIFNpbXVsYXRvcgpTdW1tYXJ5OiBUaGlzIHRlc3QgY29tcHJlaGVuc2l2ZWx5IGV2YWx1YXRlcyBjb21waWxlciBvcHRpbWl6YXRpb25zIGZvcjoKRGV0YWlsczoKQ29tcGxleCB2aXJ0dWFsIG1lbW9yeSBtYW5hZ2VtZW50IHdpdGggbXVsdGktbGV2ZWwgcGFnZSB0YWJsZXMKQWR2YW5jZWQgcGFnZSByZXBsYWNlbWVudCBhbGdvcml0aG1zIChMUlUsIENMT0NLLCBXb3JraW5nIFNldCkKQ2FjaGUgaGllcmFyY2h5IHNpbXVsYXRpb24gd2l0aCBtdWx0aXBsZSBsZXZlbHMgYW5kIHBvbGljaWVzCk1lbW9yeSBhbGxvY2F0aW9uIHRyYWNraW5nIHdpdGggZnJhZ21lbnRhdGlvbiBhbmFseXNpcwpDb21wbGV4IGJpdCBtYW5pcHVsYXRpb24gZm9yIHBhZ2UgdGFibGUgZW50cmllcyBhbmQgZmxhZ3MKTmVzdGVkIGxvb3Agb3B0aW1pemF0aW9uIGZvciBtZW1vcnkgYWNjZXNzIHBhdHRlcm5zCkJyYW5jaCBwcmVkaWN0aW9uIG9wdGltaXphdGlvbiBmb3IgY2FjaGUgaGl0L21pc3Mgc2NlbmFyaW9zCkFycmF5IGFjY2VzcyBwYXR0ZXJuIG9wdGltaXphdGlvbiBmb3Igc3BhcnNlIGRhdGEgc3RydWN0dXJlcwoqLwoKLy8gY29tcHJlaGVuc2l2ZTI0LnJ4IC0gVmlydHVhbCBNZW1vcnkgTWFuYWdlbWVudCBhbmQgUGFnZSBSZXBsYWNlbWVudCBBbGdvcml0aG0gU2ltdWxhdG9yCi8vIFRoaXMgdGVzdCBjb21wcmVoZW5zaXZlbHkgZXZhbHVhdGVzIGNvbXBpbGVyIG9wdGltaXphdGlvbnMgZm9yOgovLyAtIENvbXBsZXggdmlydHVhbCBtZW1vcnkgbWFuYWdlbWVudCB3aXRoIG11bHRpLWxldmVsIHBhZ2UgdGFibGVzCi8vIC0gQWR2YW5jZWQgcGFnZSByZXBsYWNlbWVudCBhbGdvcml0aG1zIChMUlUsIENMT0NLLCBXb3JraW5nIFNldCkKLy8gLSBDYWNoZSBoaWVyYXJjaHkgc2ltdWxhdGlvbiB3aXRoIG11bHRpcGxlIGxldmVscyBhbmQgcG9saWNpZXMKLy8gLSBNZW1vcnkgYWxsb2NhdGlvbiB0cmFja2luZyB3aXRoIGZyYWdtZW50YXRpb24gYW5hbHlzaXMKLy8gLSBDb21wbGV4IGJpdCBtYW5pcHVsYXRpb24gZm9yIHBhZ2UgdGFibGUgZW50cmllcyBhbmQgZmxhZ3MKLy8gLSBOZXN0ZWQgbG9vcCBvcHRpbWl6YXRpb24gZm9yIG1lbW9yeSBhY2Nlc3MgcGF0dGVybnMKLy8gLSBCcmFuY2ggcHJlZGljdGlvbiBvcHRpbWl6YXRpb24gZm9yIGNhY2hlIGhpdC9taXNzIHNjZW5hcmlvcwovLyAtIEFycmF5IGFjY2VzcyBwYXR0ZXJuIG9wdGltaXphdGlvbiBmb3Igc3BhcnNlIGRhdGEgc3RydWN0dXJlcwoKZm4gbWFpbigpIHsKICAgIHByaW50bG5JbnQoNDIpOwoKICAgIC8vIFZpcnR1YWwgTWVtb3J5IFN5c3RlbSBDb25maWd1cmF0aW9uCiAgICBsZXQgcGFnZV9zaXplOiBpMzIgPSA0MDk2OwogICAgbGV0IHZpcnR1YWxfYWRkcmVzc19zcGFjZTogaTMyID0gMTA0ODU3NjsgLy8gMU1CIHZpcnR1YWwgc3BhY2UKICAgIGxldCBwaHlzaWNhbF9tZW1vcnlfc2l6ZTogaTMyID0gMjYyMTQ0OyAvLyAyNTZLQiBwaHlzaWNhbCBtZW1vcnkKICAgIGxldCBudW1fdmlydHVhbF9wYWdlczogaTMyID0gdmlydHVhbF9hZGRyZXNzX3NwYWNlIC8gcGFnZV9zaXplOyAvLyAyNTYgdmlydHVhbCBwYWdlcwogICAgbGV0IG51bV9waHlzaWNhbF9mcmFtZXM6IGkzMiA9IHBoeXNpY2FsX21lbW9yeV9zaXplIC8gcGFnZV9zaXplOyAvLyA2NCBwaHlzaWNhbCBmcmFtZXMKCiAgICAvLyBQYWdlIFRhYmxlIFN0cnVjdHVyZSAoc2ltcGxpZmllZCB0d28tbGV2ZWwpCiAgICBsZXQgbXV0IHBhZ2VfZGlyZWN0b3J5OiBbaTMyOyAxNl0gPSBbMDsgMTZdOyAvLyBUb3AtbGV2ZWwgZGlyZWN0b3J5CiAgICBsZXQgbXV0IHBhZ2VfdGFibGVzOiBbW2kzMjsgMTZdOyAxNl0gPSBbWzA7IDE2XTsgMTZdOyAvLyBTZWNvbmQtbGV2ZWwgdGFibGVzCiAgICBsZXQgbXV0IGZyYW1lX2FsbG9jYXRpb25fdGFibGU6IFtpMzI7IDY0XSA9IFswOyA2NF07IC8vIFBoeXNpY2FsIGZyYW1lIHN0YXR1cwogICAgbGV0IG11dCByZXZlcnNlX21hcHBpbmc6IFtpMzI7IDY0XSA9IFstMTsgNjRdOyAvLyBGcmFtZSB0byBwYWdlIG1hcHBpbmcKCiAgICAvLyBQYWdlIFJlcGxhY2VtZW50IEFsZ29yaXRobSBEYXRhIFN0cnVjdHVyZXMKICAgIGxldCBtdXQgbHJ1X2NvdW50ZXI6IFtpMzI7IDI1Nl0gPSBbMDsgMjU2XTsgLy8gTFJVIHRpbWVzdGFtcHMgZm9yIGVhY2ggdmlydHVhbCBwYWdlCiAgICBsZXQgbXV0IHJlZmVyZW5jZV9iaXRzOiBbYm9vbDsgMjU2XSA9IFtmYWxzZTsgMjU2XTsgLy8gUmVmZXJlbmNlIGJpdHMgZm9yIENMT0NLIGFsZ29yaXRobQogICAgbGV0IG11dCBtb2RpZnlfYml0czogW2Jvb2w7IDI1Nl0gPSBbZmFsc2U7IDI1Nl07IC8vIERpcnR5IGJpdHMgZm9yIHdyaXRlIG9wZXJhdGlvbnMKICAgIGxldCBtdXQgY2xvY2tfaGFuZDogaTMyID0gMDsgLy8gQ3VycmVudCBwb3NpdGlvbiBpbiBDTE9DSyBhbGdvcml0aG0KICAgIGxldCBtdXQgd29ya2luZ19zZXRfd2luZG93OiBpMzIgPSA1MDsgLy8gV29ya2luZyBzZXQgd2luZG93IHNpemUKICAgIGxldCBtdXQgYWNjZXNzX2hpc3Rvcnk6IFtpMzI7IDEwMDBdID0gWzA7IDEwMDBdOyAvLyBSZWNlbnQgcGFnZSBhY2Nlc3NlcwogICAgbGV0IG11dCBoaXN0b3J5X2hlYWQ6IGkzMiA9IDA7CgogICAgLy8gQ2FjaGUgSGllcmFyY2h5IFNpbXVsYXRpb24KICAgIGxldCBtdXQgbDFfY2FjaGU6IFtbaTMyOyA0XTsgNjRdID0gW1swOyA0XTsgNjRdOyAvLyBMMSBjYWNoZTogNjQgc2V0cywgNCB3YXlzCiAgICBsZXQgbXV0IGwxX3RhZ3M6IFtbaTMyOyA0XTsgNjRdID0gW1stMTsgNF07IDY0XTsgLy8gTDEgY2FjaGUgdGFncwogICAgbGV0IG11dCBsMV92YWxpZDogW1tib29sOyA0XTsgNjRdID0gW1tmYWxzZTsgNF07IDY0XTsgLy8gTDEgdmFsaWRpdHkgYml0cwogICAgbGV0IG11dCBsMV9scnVfYml0czogW1tpMzI7IDRdOyA2NF0gPSBbWzA7IDRdOyA2NF07IC8vIEwxIExSVSBjb3VudGVycwoKICAgIGxldCBtdXQgbDJfY2FjaGU6IFtbaTMyOyA4XTsgMTI4XSA9IFtbMDsgOF07IDEyOF07IC8vIEwyIGNhY2hlOiAxMjggc2V0cywgOCB3YXlzCiAgICBsZXQgbXV0IGwyX3RhZ3M6IFtbaTMyOyA4XTsgMTI4XSA9IFtbLTE7IDhdOyAxMjhdOyAvLyBMMiBjYWNoZSB0YWdzCiAgICBsZXQgbXV0IGwyX3ZhbGlkOiBbW2Jvb2w7IDhdOyAxMjhdID0gW1tmYWxzZTsgOF07IDEyOF07IC8vIEwyIHZhbGlkaXR5IGJpdHMKICAgIGxldCBtdXQgbDJfbHJ1X2JpdHM6IFtbaTMyOyA4XTsgMTI4XSA9IFtbMDsgOF07IDEyOF07IC8vIEwyIExSVSBjb3VudGVycwoKICAgIC8vIE1lbW9yeSBBY2Nlc3MgU3RhdGlzdGljcwogICAgbGV0IG11dCB0b3RhbF9hY2Nlc3NlczogaTMyID0gMDsKICAgIGxldCBtdXQgcGFnZV9mYXVsdHM6IGkzMiA9IDA7CiAgICBsZXQgbXV0IGwxX2hpdHM6IGkzMiA9IDA7CiAgICBsZXQgbXV0IGwxX21pc3NlczogaTMyID0gMDsKICAgIGxldCBtdXQgbDJfaGl0czogaTMyID0gMDsKICAgIGxldCBtdXQgbDJfbWlzc2VzOiBpMzIgPSAwOwogICAgbGV0IG11dCB0bGJfaGl0czogaTMyID0gMDsKICAgIGxldCBtdXQgdGxiX21pc3NlczogaTMyID0gMDsKCiAgICAvLyBUTEIgKFRyYW5zbGF0aW9uIExvb2thc2lkZSBCdWZmZXIpIFNpbXVsYXRpb24KICAgIGxldCBtdXQgdGxiX3ZpcnR1YWxfdGFnczogW2kzMjsgMTZdID0gWy0xOyAxNl07CiAgICBsZXQgbXV0IHRsYl9waHlzaWNhbF9mcmFtZXM6IFtpMzI7IDE2XSA9IFstMTsgMTZdOwogICAgbGV0IG11dCB0bGJfdmFsaWQ6IFtib29sOyAxNl0gPSBbZmFsc2U7IDE2XTsKICAgIGxldCBtdXQgdGxiX2xydV9jb3VudGVyczogW2kzMjsgMTZdID0gWzA7IDE2XTsKCiAgICAvLyBNZW1vcnkgRnJhZ21lbnRhdGlvbiBUcmFja2luZwogICAgbGV0IG11dCBmcmVlX2ZyYW1lX2xpc3Q6IFtpMzI7IDY0XSA9IFswOyA2NF07IC8vIExpc3Qgb2YgZnJlZSBmcmFtZXMKICAgIGxldCBtdXQgZnJlZV9mcmFtZV9jb3VudDogaTMyID0gbnVtX3BoeXNpY2FsX2ZyYW1lczsKICAgIGxldCBtdXQgZnJhZ21lbnRhdGlvbl9zY29yZTogaTMyID0gMDsKCiAgICAvLyBJbml0aWFsaXplIGZyZWUgZnJhbWUgbGlzdAogICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgd2hpbGUgKGkgPCBudW1fcGh5c2ljYWxfZnJhbWVzKSB7CiAgICAgICAgZnJlZV9mcmFtZV9saXN0W2kgYXMgdXNpemVdID0gaTsKICAgICAgICBmcmFtZV9hbGxvY2F0aW9uX3RhYmxlW2kgYXMgdXNpemVdID0gMDsgLy8gMCA9IGZyZWUsIDEgPSBhbGxvY2F0ZWQKICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgLy8gQ29tcGxleCBtZW1vcnkgYWNjZXNzIHBhdHRlcm4gc2ltdWxhdGlvbgogICAgbGV0IGFjY2Vzc19wYXR0ZXJuczogaTMyID0gNTAwMDsKICAgIGxldCBtdXQgYWNjZXNzX2NvdW50OiBpMzIgPSAwOwogICAgbGV0IG11dCBjdXJyZW50X3RpbWU6IGkzMiA9IDA7CgogICAgd2hpbGUgKGFjY2Vzc19jb3VudCA8IGFjY2Vzc19wYXR0ZXJucykgewogICAgICAgIGN1cnJlbnRfdGltZSA9IGN1cnJlbnRfdGltZSArIDE7CgogICAgICAgIC8vIEdlbmVyYXRlIGNvbXBsZXggbWVtb3J5IGFjY2VzcyBwYXR0ZXJucwogICAgICAgIGxldCB2aXJ0dWFsX2FkZHJlc3M6IGkzMiA9IGdlbmVyYXRlX21lbW9yeV9hY2Nlc3NfcGF0dGVybihhY2Nlc3NfY291bnQsIGFjY2Vzc19wYXR0ZXJucyk7CiAgICAgICAgbGV0IHZpcnR1YWxfcGFnZTogaTMyID0gdmlydHVhbF9hZGRyZXNzIC8gcGFnZV9zaXplOwogICAgICAgIGxldCBwYWdlX29mZnNldDogaTMyID0gdmlydHVhbF9hZGRyZXNzICUgcGFnZV9zaXplOwoKICAgICAgICB0b3RhbF9hY2Nlc3NlcyA9IHRvdGFsX2FjY2Vzc2VzICsgMTsKCiAgICAgICAgLy8gUmVjb3JkIGFjY2VzcyBpbiBoaXN0b3J5IGZvciB3b3JraW5nIHNldCBjYWxjdWxhdGlvbgogICAgICAgIGFjY2Vzc19oaXN0b3J5W2hpc3RvcnlfaGVhZCBhcyB1c2l6ZV0gPSB2aXJ0dWFsX3BhZ2U7CiAgICAgICAgaGlzdG9yeV9oZWFkID0gKGhpc3RvcnlfaGVhZCArIDEpICUgMTAwMDsKCiAgICAgICAgLy8gVExCIExvb2t1cAogICAgICAgIGxldCB0bGJfaGl0OiBib29sID0gbG9va3VwX3RsYih2aXJ0dWFsX3BhZ2UsICZ0bGJfdmlydHVhbF90YWdzLCAmdGxiX3ZhbGlkKTsKICAgICAgICBsZXQgbXV0IHBoeXNpY2FsX2ZyYW1lOiBpMzIgPSAtMTsKICAgICAgICBpZiAodGxiX2hpdCkgewogICAgICAgICAgICB0bGJfaGl0cyA9IHRsYl9oaXRzICsgMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0bGJfbWlzc2VzID0gdGxiX21pc3NlcyArIDE7CgogICAgICAgICAgICAvLyBQYWdlIFRhYmxlIFdhbGsKICAgICAgICAgICAgbGV0IHBhZ2VfZGlyX2luZGV4OiBpMzIgPSB2aXJ0dWFsX3BhZ2UgLyAxNjsKICAgICAgICAgICAgbGV0IHBhZ2VfdGFibGVfaW5kZXg6IGkzMiA9IHZpcnR1YWxfcGFnZSAlIDE2OwoKICAgICAgICAgICAgbGV0IHBhZ2VfdGFibGVfZW50cnk6IGkzMiA9CiAgICAgICAgICAgICAgICBwYWdlX3RhYmxlc1twYWdlX2Rpcl9pbmRleCBhcyB1c2l6ZV1bcGFnZV90YWJsZV9pbmRleCBhcyB1c2l6ZV07CgogICAgICAgICAgICBpZiAocGFnZV90YWJsZV9lbnRyeSA+IDApIHsKICAgICAgICAgICAgICAgIC8vIFBhZ2UgaXMgbWFwcGVkCiAgICAgICAgICAgICAgICBwaHlzaWNhbF9mcmFtZSA9IHBhZ2VfdGFibGVfZW50cnkgLSAxOyAvLyBDb252ZXJ0IGZyb20gMS1iYXNlZCB0byAwLWJhc2VkCgogICAgICAgICAgICAgICAgLy8gVXBkYXRlIHBhZ2UgYWNjZXNzIGluZm9ybWF0aW9uCiAgICAgICAgICAgICAgICByZWZlcmVuY2VfYml0c1t2aXJ0dWFsX3BhZ2UgYXMgdXNpemVdID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGxydV9jb3VudGVyW3ZpcnR1YWxfcGFnZSBhcyB1c2l6ZV0gPSBjdXJyZW50X3RpbWU7CgogICAgICAgICAgICAgICAgLy8gVXBkYXRlIFRMQgogICAgICAgICAgICAgICAgdXBkYXRlX3RsYigKICAgICAgICAgICAgICAgICAgICB2aXJ0dWFsX3BhZ2UsCiAgICAgICAgICAgICAgICAgICAgcGh5c2ljYWxfZnJhbWUsCiAgICAgICAgICAgICAgICAgICAgJm11dCB0bGJfdmlydHVhbF90YWdzLAogICAgICAgICAgICAgICAgICAgICZtdXQgdGxiX3BoeXNpY2FsX2ZyYW1lcywKICAgICAgICAgICAgICAgICAgICAmbXV0IHRsYl92YWxpZCwKICAgICAgICAgICAgICAgICAgICAmbXV0IHRsYl9scnVfY291bnRlcnMsCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gUGFnZSBmYXVsdCEgTmVlZCB0byBhbGxvY2F0ZSBhIGZyYW1lCiAgICAgICAgICAgICAgICBwYWdlX2ZhdWx0cyA9IHBhZ2VfZmF1bHRzICsgMTsKCiAgICAgICAgICAgICAgICBpZiAoZnJlZV9mcmFtZV9jb3VudCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAvLyBBbGxvY2F0ZSBhIGZyZWUgZnJhbWUKICAgICAgICAgICAgICAgICAgICBwaHlzaWNhbF9mcmFtZSA9IGFsbG9jYXRlX2ZyZWVfZnJhbWUoCiAgICAgICAgICAgICAgICAgICAgICAgICZmcmVlX2ZyYW1lX2xpc3QsCiAgICAgICAgICAgICAgICAgICAgICAgICZtdXQgZnJlZV9mcmFtZV9jb3VudCwKICAgICAgICAgICAgICAgICAgICAgICAgJm11dCBmcmFtZV9hbGxvY2F0aW9uX3RhYmxlLAogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIC8vIE5lZWQgdG8gdXNlIHBhZ2UgcmVwbGFjZW1lbnQgYWxnb3JpdGhtCiAgICAgICAgICAgICAgICAgICAgcGh5c2ljYWxfZnJhbWUgPSBwYWdlX3JlcGxhY2VtZW50X2FsZ29yaXRobSgKICAgICAgICAgICAgICAgICAgICAgICAgJnBhZ2VfdGFibGVzLAogICAgICAgICAgICAgICAgICAgICAgICAmcmV2ZXJzZV9tYXBwaW5nLAogICAgICAgICAgICAgICAgICAgICAgICAmbXV0IHJlZmVyZW5jZV9iaXRzLAogICAgICAgICAgICAgICAgICAgICAgICAmbW9kaWZ5X2JpdHMsCiAgICAgICAgICAgICAgICAgICAgICAgICZtdXQgY2xvY2tfaGFuZCwKICAgICAgICAgICAgICAgICAgICAgICAgJmxydV9jb3VudGVyLAogICAgICAgICAgICAgICAgICAgICAgICAmYWNjZXNzX2hpc3RvcnksCiAgICAgICAgICAgICAgICAgICAgICAgIGhpc3RvcnlfaGVhZCwKICAgICAgICAgICAgICAgICAgICAgICAgd29ya2luZ19zZXRfd2luZG93LAogICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3RpbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc19jb3VudCwKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChwaHlzaWNhbF9mcmFtZSA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gTWFwIHRoZSBwYWdlIHRvIHRoZSBmcmFtZQogICAgICAgICAgICAgICAgICAgIHBhZ2VfdGFibGVzW3BhZ2VfZGlyX2luZGV4IGFzIHVzaXplXVtwYWdlX3RhYmxlX2luZGV4IGFzIHVzaXplXSA9CiAgICAgICAgICAgICAgICAgICAgICAgIHBoeXNpY2FsX2ZyYW1lICsgMTsgLy8gMS1iYXNlZAogICAgICAgICAgICAgICAgICAgIHJldmVyc2VfbWFwcGluZ1twaHlzaWNhbF9mcmFtZSBhcyB1c2l6ZV0gPSB2aXJ0dWFsX3BhZ2U7CiAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlX2JpdHNbdmlydHVhbF9wYWdlIGFzIHVzaXplXSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgbHJ1X2NvdW50ZXJbdmlydHVhbF9wYWdlIGFzIHVzaXplXSA9IGN1cnJlbnRfdGltZTsKICAgICAgICAgICAgICAgICAgICBmcmFtZV9hbGxvY2F0aW9uX3RhYmxlW3BoeXNpY2FsX2ZyYW1lIGFzIHVzaXplXSA9IDE7IC8vIE1hcmsgYXMgYWxsb2NhdGVkCgogICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBUTEIKICAgICAgICAgICAgICAgICAgICB1cGRhdGVfdGxiKAogICAgICAgICAgICAgICAgICAgICAgICB2aXJ0dWFsX3BhZ2UsCiAgICAgICAgICAgICAgICAgICAgICAgIHBoeXNpY2FsX2ZyYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAmbXV0IHRsYl92aXJ0dWFsX3RhZ3MsCiAgICAgICAgICAgICAgICAgICAgICAgICZtdXQgdGxiX3BoeXNpY2FsX2ZyYW1lcywKICAgICAgICAgICAgICAgICAgICAgICAgJm11dCB0bGJfdmFsaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICZtdXQgdGxiX2xydV9jb3VudGVycywKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBTaW11bGF0ZSBwYWdlIGxvYWRpbmcgdGltZSBwZW5hbHR5CiAgICAgICAgICAgIGN1cnJlbnRfdGltZSA9IGN1cnJlbnRfdGltZSArIDEwMDsgLy8gUGFnZSBmYXVsdCBwZW5hbHR5CiAgICAgICAgfQoKICAgICAgICAvLyBTaW11bGF0ZSBjYWNoZSBhY2Nlc3MgaWYgd2UgaGF2ZSBhIHZhbGlkIHBoeXNpY2FsIGFkZHJlc3MKICAgICAgICBpZiAocGh5c2ljYWxfZnJhbWUgPj0gMCkgewogICAgICAgICAgICBsZXQgcGh5c2ljYWxfYWRkcmVzczogaTMyID0gcGh5c2ljYWxfZnJhbWUgKiBwYWdlX3NpemUgKyBwYWdlX29mZnNldDsKCiAgICAgICAgICAgIC8vIEwxIENhY2hlIEFjY2VzcwogICAgICAgICAgICBsZXQgbDFfaGl0OiBib29sID0gYWNjZXNzX2wxX2NhY2hlKAogICAgICAgICAgICAgICAgcGh5c2ljYWxfYWRkcmVzcywKICAgICAgICAgICAgICAgICZsMV9jYWNoZSwKICAgICAgICAgICAgICAgICZtdXQgbDFfdGFncywKICAgICAgICAgICAgICAgICZtdXQgbDFfdmFsaWQsCiAgICAgICAgICAgICAgICAmbXV0IGwxX2xydV9iaXRzLAogICAgICAgICAgICAgICAgY3VycmVudF90aW1lLAogICAgICAgICAgICApOwogICAgICAgICAgICBpZiAobDFfaGl0KSB7CiAgICAgICAgICAgICAgICBsMV9oaXRzID0gbDFfaGl0cyArIDE7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBsMV9taXNzZXMgPSBsMV9taXNzZXMgKyAxOwoKICAgICAgICAgICAgICAgIC8vIEwyIENhY2hlIEFjY2VzcwogICAgICAgICAgICAgICAgbGV0IGwyX2hpdDogYm9vbCA9IGFjY2Vzc19sMl9jYWNoZSgKICAgICAgICAgICAgICAgICAgICBwaHlzaWNhbF9hZGRyZXNzLAogICAgICAgICAgICAgICAgICAgICZsMl9jYWNoZSwKICAgICAgICAgICAgICAgICAgICAmbXV0IGwyX3RhZ3MsCiAgICAgICAgICAgICAgICAgICAgJm11dCBsMl92YWxpZCwKICAgICAgICAgICAgICAgICAgICAmbXV0IGwyX2xydV9iaXRzLAogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfdGltZSwKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBpZiAobDJfaGl0KSB7CiAgICAgICAgICAgICAgICAgICAgbDJfaGl0cyA9IGwyX2hpdHMgKyAxOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBsMl9taXNzZXMgPSBsMl9taXNzZXMgKyAxOwogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfdGltZSA9IGN1cnJlbnRfdGltZSArIDIwMDsgLy8gTWFpbiBtZW1vcnkgYWNjZXNzIHBlbmFsdHkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gU2ltdWxhdGUgd3JpdGUgb3BlcmF0aW9ucyAobWFyayBwYWdlcyBhcyBkaXJ0eSkKICAgICAgICBpZiAoYWNjZXNzX2NvdW50ICUgNCA9PSAwICYmIHZpcnR1YWxfcGFnZSA8IDI1NikgewogICAgICAgICAgICBtb2RpZnlfYml0c1t2aXJ0dWFsX3BhZ2UgYXMgdXNpemVdID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIC8vIFBlcmlvZGljIG1lbW9yeSBjb21wYWN0aW9uIGFuZCBkZWZyYWdtZW50YXRpb24KICAgICAgICBpZiAoYWNjZXNzX2NvdW50ICUgNTAwID09IDApIHsKICAgICAgICAgICAgZnJhZ21lbnRhdGlvbl9zY29yZSA9CiAgICAgICAgICAgICAgICBhbmFseXplX21lbW9yeV9mcmFnbWVudGF0aW9uKCZmcmFtZV9hbGxvY2F0aW9uX3RhYmxlLCBudW1fcGh5c2ljYWxfZnJhbWVzKTsKICAgICAgICAgICAgaWYgKGZyYWdtZW50YXRpb25fc2NvcmUgPiAzMCkgewogICAgICAgICAgICAgICAgY29tcGFjdF9tZW1vcnkoCiAgICAgICAgICAgICAgICAgICAgJm11dCBwYWdlX3RhYmxlcywKICAgICAgICAgICAgICAgICAgICAmbXV0IHJldmVyc2VfbWFwcGluZywKICAgICAgICAgICAgICAgICAgICAmbXV0IGZyYW1lX2FsbG9jYXRpb25fdGFibGUsCiAgICAgICAgICAgICAgICAgICAgJm11dCBmcmVlX2ZyYW1lX2xpc3QsCiAgICAgICAgICAgICAgICAgICAgJm11dCBmcmVlX2ZyYW1lX2NvdW50LAogICAgICAgICAgICAgICAgICAgIG51bV9waHlzaWNhbF9mcmFtZXMsCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBXb3JraW5nIHNldCBhbmFseXNpcwogICAgICAgIGlmIChhY2Nlc3NfY291bnQgJSAxMDAgPT0gMCkgewogICAgICAgICAgICBsZXQgd29ya2luZ19zZXRfc2l6ZTogaTMyID0KICAgICAgICAgICAgICAgIGNhbGN1bGF0ZV93b3JraW5nX3NldF9zaXplKCZhY2Nlc3NfaGlzdG9yeSwgaGlzdG9yeV9oZWFkLCB3b3JraW5nX3NldF93aW5kb3cpOwogICAgICAgICAgICAvLyBBZGp1c3Qgd29ya2luZyBzZXQgd2luZG93IGJhc2VkIG9uIHJlY2VudCBiZWhhdmlvcgogICAgICAgICAgICBpZiAod29ya2luZ19zZXRfc2l6ZSA+IDQwKSB7CiAgICAgICAgICAgICAgICB3b3JraW5nX3NldF93aW5kb3cgPSB3b3JraW5nX3NldF93aW5kb3cgKyA1OwogICAgICAgICAgICB9IGVsc2UgaWYgKHdvcmtpbmdfc2V0X3NpemUgPCAyMCAmJiB3b3JraW5nX3NldF93aW5kb3cgPiAxMCkgewogICAgICAgICAgICAgICAgd29ya2luZ19zZXRfd2luZG93ID0gd29ya2luZ19zZXRfd2luZG93IC0gNTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gQWRhcHRpdmUgY2FjaGUgcG9saWN5IGFkanVzdG1lbnQKICAgICAgICBpZiAoYWNjZXNzX2NvdW50ICUgMjAwID09IDApIHsKICAgICAgICAgICAgYWRqdXN0X2NhY2hlX3BvbGljaWVzKAogICAgICAgICAgICAgICAgJm11dCBsMV9scnVfYml0cywKICAgICAgICAgICAgICAgICZtdXQgbDJfbHJ1X2JpdHMsCiAgICAgICAgICAgICAgICBsMV9oaXRzLAogICAgICAgICAgICAgICAgbDFfbWlzc2VzLAogICAgICAgICAgICAgICAgbDJfaGl0cywKICAgICAgICAgICAgICAgIGwyX21pc3NlcywKICAgICAgICAgICAgKTsKICAgICAgICB9CgogICAgICAgIGFjY2Vzc19jb3VudCA9IGFjY2Vzc19jb3VudCArIDE7CiAgICB9CgogICAgLy8gQ29tcGxleCBwZXJmb3JtYW5jZSBhbmFseXNpcwogICAgbGV0IHBhZ2VfZmF1bHRfcmF0ZTogaTMyID0gKHBhZ2VfZmF1bHRzICogMTAwKSAvIHRvdGFsX2FjY2Vzc2VzOwogICAgbGV0IGwxX2hpdF9yYXRlOiBpMzIgPSAobDFfaGl0cyAqIDEwMCkgLyB0b3RhbF9hY2Nlc3NlczsKICAgIGxldCBsMl9oaXRfcmF0ZTogaTMyID0gKGwyX2hpdHMgKiAxMDApIC8gdG90YWxfYWNjZXNzZXM7CiAgICBsZXQgdGxiX2hpdF9yYXRlOiBpMzIgPSAodGxiX2hpdHMgKiAxMDApIC8gdG90YWxfYWNjZXNzZXM7CgogICAgLy8gTWVtb3J5IHV0aWxpemF0aW9uIGFuYWx5c2lzCiAgICBsZXQgbWVtb3J5X3V0aWxpemF0aW9uOiBpMzIgPQogICAgICAgICgobnVtX3BoeXNpY2FsX2ZyYW1lcyAtIGZyZWVfZnJhbWVfY291bnQpICogMTAwKSAvIG51bV9waHlzaWNhbF9mcmFtZXM7CgogICAgLy8gQWR2YW5jZWQgbWV0cmljcyBjYWxjdWxhdGlvbgogICAgbGV0IGF2Z19tZW1vcnlfYWNjZXNzX3RpbWU6IGkzMiA9CiAgICAgICAgY2FsY3VsYXRlX2F2ZXJhZ2VfbWVtb3J5X2FjY2Vzc190aW1lKGwxX2hpdHMsIGwxX21pc3NlcywgbDJfaGl0cywgbDJfbWlzc2VzLCBwYWdlX2ZhdWx0cyk7CgogICAgbGV0IGZpbmFsX2ZyYWdtZW50YXRpb246IGkzMiA9CiAgICAgICAgYW5hbHl6ZV9tZW1vcnlfZnJhZ21lbnRhdGlvbigmZnJhbWVfYWxsb2NhdGlvbl90YWJsZSwgbnVtX3BoeXNpY2FsX2ZyYW1lcyk7CgogICAgLy8gT3V0cHV0IGNvbXByZWhlbnNpdmUgcmVzdWx0cwogICAgcHJpbnRsbkludChwYWdlX2ZhdWx0X3JhdGUpOwogICAgcHJpbnRsbkludChsMV9oaXRfcmF0ZSk7CiAgICBwcmludGxuSW50KGwyX2hpdF9yYXRlKTsKICAgIHByaW50bG5JbnQodGxiX2hpdF9yYXRlKTsKICAgIHByaW50bG5JbnQobWVtb3J5X3V0aWxpemF0aW9uKTsKICAgIHByaW50bG5JbnQoYXZnX21lbW9yeV9hY2Nlc3NfdGltZSk7CiAgICBwcmludGxuSW50KGZpbmFsX2ZyYWdtZW50YXRpb24pOwogICAgcHJpbnRsbkludCh3b3JraW5nX3NldF93aW5kb3cpOwogICAgZXhpdCgwKTsKfQoKLy8gR2VuZXJhdGUgY29tcGxleCBtZW1vcnkgYWNjZXNzIHBhdHRlcm5zIGZvciB0ZXN0aW5nCmZuIGdlbmVyYXRlX21lbW9yeV9hY2Nlc3NfcGF0dGVybihhY2Nlc3NfbnVtOiBpMzIsIHRvdGFsX2FjY2Vzc2VzOiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgcGF0dGVybl90eXBlOiBpMzIgPSAoYWNjZXNzX251bSAvIDEwMCkgJSA2OwoKICAgIGlmIChwYXR0ZXJuX3R5cGUgPT0gMCkgewogICAgICAgIC8vIFNlcXVlbnRpYWwgYWNjZXNzIHBhdHRlcm4KICAgICAgICAoYWNjZXNzX251bSAqIDY0KSAlIDEwNDg1NzYKICAgIH0gZWxzZSBpZiAocGF0dGVybl90eXBlID09IDEpIHsKICAgICAgICAvLyBSYW5kb20gYWNjZXNzIHBhdHRlcm4KICAgICAgICAoKGFjY2Vzc19udW0gKiAxNyArIDIzKSAqIDEzMSArIDQ3KSAlIDEwNDg1NzYKICAgIH0gZWxzZSBpZiAocGF0dGVybl90eXBlID09IDIpIHsKICAgICAgICAvLyBTdHJpZGVkIGFjY2VzcyBwYXR0ZXJuCiAgICAgICAgKGFjY2Vzc19udW0gKiA1MTIpICUgMTA0ODU3NgogICAgfSBlbHNlIGlmIChwYXR0ZXJuX3R5cGUgPT0gMykgewogICAgICAgIC8vIExvY2FsaXR5LWJhc2VkIGFjY2VzcyBwYXR0ZXJuICg4MCUgbG9jYWwsIDIwJSByYW5kb20pCiAgICAgICAgbGV0IGJhc2VfYWRkcjogaTMyID0gKChhY2Nlc3NfbnVtIC8gNTApICogODE5MikgJSAxMDQ4NTc2OwogICAgICAgIGlmICgoYWNjZXNzX251bSAqIDcpICUgMTAgPCA4KSB7CiAgICAgICAgICAgIGJhc2VfYWRkciArICgoYWNjZXNzX251bSAqIDMpICUgMTAyNCkKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAoKGFjY2Vzc19udW0gKiAxOSArIDM3KSAqIDExMykgJSAxMDQ4NTc2CiAgICAgICAgfQogICAgfSBlbHNlIGlmIChwYXR0ZXJuX3R5cGUgPT0gNCkgewogICAgICAgIC8vIFdvcmtpbmcgc2V0IHBhdHRlcm4gKGNvbmNlbnRyYXRlIG9uIGEgZmV3IHBhZ2VzKQogICAgICAgIGxldCB3b3JraW5nX3NldF9iYXNlOiBpMzIgPSAoKGFjY2Vzc19udW0gLyAyMDApICogMTYzODQpICUgMTA0ODU3NjsKICAgICAgICB3b3JraW5nX3NldF9iYXNlICsgKChhY2Nlc3NfbnVtICogNSkgJSA0MDk2KQogICAgfSBlbHNlIHsKICAgICAgICAvLyBTcGFyc2UgYWNjZXNzIHBhdHRlcm4gKHdpZGUgZGlzdHJpYnV0aW9uKQogICAgICAgICgoYWNjZXNzX251bSAqIDk3ICsgMTEzKSAqIDIxMSArIDMwNykgJSAxMDQ4NTc2CiAgICB9Cn0KCi8vIFRMQiBsb29rdXAgZnVuY3Rpb24KZm4gbG9va3VwX3RsYih2aXJ0dWFsX3BhZ2U6IGkzMiwgdGxiX3RhZ3M6ICZbaTMyOyAxNl0sIHRsYl92YWxpZDogJltib29sOyAxNl0pIC0+IGJvb2wgewogICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgd2hpbGUgKGkgPCAxNikgewogICAgICAgIGlmICh0bGJfdmFsaWRbaSBhcyB1c2l6ZV0gJiYgdGxiX3RhZ3NbaSBhcyB1c2l6ZV0gPT0gdmlydHVhbF9wYWdlKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpID0gaSArIDE7CiAgICB9CiAgICBmYWxzZQp9CgovLyBVcGRhdGUgVExCIHdpdGggbmV3IHRyYW5zbGF0aW9uCmZuIHVwZGF0ZV90bGIoCiAgICB2aXJ0dWFsX3BhZ2U6IGkzMiwKICAgIHBoeXNpY2FsX2ZyYW1lOiBpMzIsCiAgICB0bGJfdGFnczogJm11dCBbaTMyOyAxNl0sCiAgICB0bGJfZnJhbWVzOiAmbXV0IFtpMzI7IDE2XSwKICAgIHRsYl92YWxpZDogJm11dCBbYm9vbDsgMTZdLAogICAgdGxiX2xydTogJm11dCBbaTMyOyAxNl0sCikgewogICAgLy8gRmluZCBMUlUgZW50cnkgdG8gcmVwbGFjZQogICAgbGV0IG11dCBscnVfaW5kZXg6IGkzMiA9IDA7CiAgICBsZXQgbXV0IG1pbl9jb3VudGVyOiBpMzIgPSB0bGJfbHJ1WzBdOwoKICAgIGxldCBtdXQgaTogaTMyID0gMTsKICAgIHdoaWxlIChpIDwgMTYpIHsKICAgICAgICBpZiAodGxiX2xydVtpIGFzIHVzaXplXSA8IG1pbl9jb3VudGVyKSB7CiAgICAgICAgICAgIG1pbl9jb3VudGVyID0gdGxiX2xydVtpIGFzIHVzaXplXTsKICAgICAgICAgICAgbHJ1X2luZGV4ID0gaTsKICAgICAgICB9CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQoKICAgIC8vIFVwZGF0ZSB0aGUgTFJVIGVudHJ5CiAgICB0bGJfdGFnc1tscnVfaW5kZXggYXMgdXNpemVdID0gdmlydHVhbF9wYWdlOwogICAgdGxiX2ZyYW1lc1tscnVfaW5kZXggYXMgdXNpemVdID0gcGh5c2ljYWxfZnJhbWU7CiAgICB0bGJfdmFsaWRbbHJ1X2luZGV4IGFzIHVzaXplXSA9IHRydWU7CgogICAgLy8gVXBkYXRlIGFsbCBMUlUgY291bnRlcnMKICAgIGkgPSAwOwogICAgd2hpbGUgKGkgPCAxNikgewogICAgICAgIGlmIChpID09IGxydV9pbmRleCkgewogICAgICAgICAgICB0bGJfbHJ1W2kgYXMgdXNpemVdID0gMTAwMDsgLy8gSGlnaCBwcmlvcml0eQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRsYl9scnVbaSBhcyB1c2l6ZV0gPSB0bGJfbHJ1W2kgYXMgdXNpemVdIC0gMTsKICAgICAgICB9CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQp9CgovLyBBbGxvY2F0ZSBhIGZyZWUgZnJhbWUgZnJvbSB0aGUgZnJlZSBsaXN0CmZuIGFsbG9jYXRlX2ZyZWVfZnJhbWUoCiAgICBmcmVlX2xpc3Q6ICZbaTMyOyA2NF0sCiAgICBmcmVlX2NvdW50OiAmbXV0IGkzMiwKICAgIGFsbG9jYXRpb25fdGFibGU6ICZtdXQgW2kzMjsgNjRdLAopIC0+IGkzMiB7CiAgICBpZiAoKmZyZWVfY291bnQgPD0gMCkgewogICAgICAgIHJldHVybiAtMTsgLy8gTm8gZnJlZSBmcmFtZXMKICAgIH0KCiAgICAqZnJlZV9jb3VudCA9ICpmcmVlX2NvdW50IC0gMTsKICAgIGxldCBmcmFtZTogaTMyID0gZnJlZV9saXN0WypmcmVlX2NvdW50IGFzIHVzaXplXTsKICAgIGFsbG9jYXRpb25fdGFibGVbZnJhbWUgYXMgdXNpemVdID0gMTsgLy8gTWFyayBhcyBhbGxvY2F0ZWQKICAgIGZyYW1lCn0KCi8vIEFkdmFuY2VkIHBhZ2UgcmVwbGFjZW1lbnQgYWxnb3JpdGhtIGNvbWJpbmluZyBtdWx0aXBsZSBzdHJhdGVnaWVzCmZuIHBhZ2VfcmVwbGFjZW1lbnRfYWxnb3JpdGhtKAogICAgcGFnZV90YWJsZXM6ICZbW2kzMjsgMTZdOyAxNl0sCiAgICByZXZlcnNlX21hcHBpbmc6ICZbaTMyOyA2NF0sCiAgICByZWZlcmVuY2VfYml0czogJm11dCBbYm9vbDsgMjU2XSwKICAgIG1vZGlmeV9iaXRzOiAmW2Jvb2w7IDI1Nl0sCiAgICBjbG9ja19oYW5kOiAmbXV0IGkzMiwKICAgIGxydV9jb3VudGVyOiAmW2kzMjsgMjU2XSwKICAgIGFjY2Vzc19oaXN0b3J5OiAmW2kzMjsgMTAwMF0sCiAgICBoaXN0b3J5X2hlYWQ6IGkzMiwKICAgIHdvcmtpbmdfc2V0X3dpbmRvdzogaTMyLAogICAgY3VycmVudF90aW1lOiBpMzIsCiAgICBhY2Nlc3NfbnVtOiBpMzIsCikgLT4gaTMyIHsKICAgIC8vIENob29zZSByZXBsYWNlbWVudCBhbGdvcml0aG0gYmFzZWQgb24gc3lzdGVtIHN0YXRlCiAgICBsZXQgYWxnb3JpdGhtX2Nob2ljZTogaTMyID0gKGFjY2Vzc19udW0gLyA1MCkgJSA0OwoKICAgIGlmIChhbGdvcml0aG1fY2hvaWNlID09IDApIHsKICAgICAgICAvLyBFbmhhbmNlZCBDTE9DSyBhbGdvcml0aG0KICAgICAgICBlbmhhbmNlZF9jbG9ja19yZXBsYWNlbWVudChyZXZlcnNlX21hcHBpbmcsIHJlZmVyZW5jZV9iaXRzLCBtb2RpZnlfYml0cywgY2xvY2tfaGFuZCkKICAgIH0gZWxzZSBpZiAoYWxnb3JpdGhtX2Nob2ljZSA9PSAxKSB7CiAgICAgICAgLy8gTFJVIHJlcGxhY2VtZW50CiAgICAgICAgbHJ1X3JlcGxhY2VtZW50KHJldmVyc2VfbWFwcGluZywgbHJ1X2NvdW50ZXIsIGN1cnJlbnRfdGltZSkKICAgIH0gZWxzZSBpZiAoYWxnb3JpdGhtX2Nob2ljZSA9PSAyKSB7CiAgICAgICAgLy8gV29ya2luZyBzZXQgYmFzZWQgcmVwbGFjZW1lbnQKICAgICAgICB3b3JraW5nX3NldF9yZXBsYWNlbWVudCgKICAgICAgICAgICAgcmV2ZXJzZV9tYXBwaW5nLAogICAgICAgICAgICBhY2Nlc3NfaGlzdG9yeSwKICAgICAgICAgICAgaGlzdG9yeV9oZWFkLAogICAgICAgICAgICB3b3JraW5nX3NldF93aW5kb3csCiAgICAgICAgKQogICAgfSBlbHNlIHsKICAgICAgICAvLyBBZGFwdGl2ZSBhbGdvcml0aG0gKGNvbWJpbmVzIG11bHRpcGxlIGZhY3RvcnMpCiAgICAgICAgYWRhcHRpdmVfcmVwbGFjZW1lbnQoCiAgICAgICAgICAgIHJldmVyc2VfbWFwcGluZywKICAgICAgICAgICAgcmVmZXJlbmNlX2JpdHMsCiAgICAgICAgICAgIG1vZGlmeV9iaXRzLAogICAgICAgICAgICBscnVfY291bnRlciwKICAgICAgICAgICAgY3VycmVudF90aW1lLAogICAgICAgICAgICBhY2Nlc3NfaGlzdG9yeSwKICAgICAgICAgICAgaGlzdG9yeV9oZWFkLAogICAgICAgICAgICB3b3JraW5nX3NldF93aW5kb3csCiAgICAgICAgKQogICAgfQp9CgovLyBFbmhhbmNlZCBDTE9DSyBhbGdvcml0aG0gd2l0aCBzZWNvbmQgY2hhbmNlIGZvciBkaXJ0eSBwYWdlcwpmbiBlbmhhbmNlZF9jbG9ja19yZXBsYWNlbWVudCgKICAgIHJldmVyc2VfbWFwcGluZzogJltpMzI7IDY0XSwKICAgIHJlZmVyZW5jZV9iaXRzOiAmbXV0IFtib29sOyAyNTZdLAogICAgbW9kaWZ5X2JpdHM6ICZbYm9vbDsgMjU2XSwKICAgIGNsb2NrX2hhbmQ6ICZtdXQgaTMyLAopIC0+IGkzMiB7CiAgICBsZXQgc3RhcnRfaGFuZDogaTMyID0gKmNsb2NrX2hhbmQ7CiAgICBsZXQgbXV0IHBhc3NlczogaTMyID0gMDsKCiAgICB3aGlsZSAocGFzc2VzIDwgMykgewogICAgICAgIC8vIE1heGltdW0gMyBwYXNzZXMgdG8gYXZvaWQgaW5maW5pdGUgbG9vcAogICAgICAgIGxldCBmcmFtZTogaTMyID0gKmNsb2NrX2hhbmQ7CiAgICAgICAgbGV0IHZpcnR1YWxfcGFnZTogaTMyID0gcmV2ZXJzZV9tYXBwaW5nW2ZyYW1lIGFzIHVzaXplXTsKCiAgICAgICAgaWYgKHZpcnR1YWxfcGFnZSA+PSAwICYmIHZpcnR1YWxfcGFnZSA8IDI1NikgewogICAgICAgICAgICBpZiAoIXJlZmVyZW5jZV9iaXRzW3ZpcnR1YWxfcGFnZSBhcyB1c2l6ZV0pIHsKICAgICAgICAgICAgICAgIGlmICghbW9kaWZ5X2JpdHNbdmlydHVhbF9wYWdlIGFzIHVzaXplXSB8fCBwYXNzZXMgPj0gMikgewogICAgICAgICAgICAgICAgICAgIC8vIEZvdW5kIHZpY3RpbTogY2xlYW4gcGFnZSBvciBkaXJ0eSBwYWdlIGFmdGVyIDIgcGFzc2VzCiAgICAgICAgICAgICAgICAgICAgKmNsb2NrX2hhbmQgPSAoKmNsb2NrX2hhbmQgKyAxKSAlIDY0OwogICAgICAgICAgICAgICAgICAgIHJldHVybiBmcmFtZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJlZmVyZW5jZV9iaXRzW3ZpcnR1YWxfcGFnZSBhcyB1c2l6ZV0gPSBmYWxzZTsgLy8gR2l2ZSBzZWNvbmQgY2hhbmNlCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICpjbG9ja19oYW5kID0gKCpjbG9ja19oYW5kICsgMSkgJSA2NDsKICAgICAgICBpZiAoKmNsb2NrX2hhbmQgPT0gc3RhcnRfaGFuZCkgewogICAgICAgICAgICBwYXNzZXMgPSBwYXNzZXMgKyAxOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBGYWxsYmFjazogcmV0dXJuIGN1cnJlbnQgY2xvY2sgaGFuZCBwb3NpdGlvbgogICAgbGV0IHZpY3RpbTogaTMyID0gKmNsb2NrX2hhbmQ7CiAgICAqY2xvY2tfaGFuZCA9ICgqY2xvY2tfaGFuZCArIDEpICUgNjQ7CiAgICB2aWN0aW0KfQoKLy8gTFJVIHJlcGxhY2VtZW50IGFsZ29yaXRobQpmbiBscnVfcmVwbGFjZW1lbnQoCiAgICByZXZlcnNlX21hcHBpbmc6ICZbaTMyOyA2NF0sCiAgICBscnVfY291bnRlcjogJltpMzI7IDI1Nl0sCiAgICBjdXJyZW50X3RpbWU6IGkzMiwKKSAtPiBpMzIgewogICAgbGV0IG11dCB2aWN0aW1fZnJhbWU6IGkzMiA9IDA7CiAgICBsZXQgbXV0IG9sZGVzdF90aW1lOiBpMzIgPSBjdXJyZW50X3RpbWUgKyAxOwoKICAgIGxldCBtdXQgaTogaTMyID0gMDsKICAgIHdoaWxlIChpIDwgNjQpIHsKICAgICAgICBsZXQgdmlydHVhbF9wYWdlOiBpMzIgPSByZXZlcnNlX21hcHBpbmdbaSBhcyB1c2l6ZV07CiAgICAgICAgaWYgKHZpcnR1YWxfcGFnZSA+PSAwICYmIHZpcnR1YWxfcGFnZSA8IDI1NikgewogICAgICAgICAgICBpZiAobHJ1X2NvdW50ZXJbdmlydHVhbF9wYWdlIGFzIHVzaXplXSA8IG9sZGVzdF90aW1lKSB7CiAgICAgICAgICAgICAgICBvbGRlc3RfdGltZSA9IGxydV9jb3VudGVyW3ZpcnR1YWxfcGFnZSBhcyB1c2l6ZV07CiAgICAgICAgICAgICAgICB2aWN0aW1fZnJhbWUgPSBpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICB2aWN0aW1fZnJhbWUKfQoKLy8gV29ya2luZyBzZXQgYmFzZWQgcmVwbGFjZW1lbnQKZm4gd29ya2luZ19zZXRfcmVwbGFjZW1lbnQoCiAgICByZXZlcnNlX21hcHBpbmc6ICZbaTMyOyA2NF0sCiAgICBhY2Nlc3NfaGlzdG9yeTogJltpMzI7IDEwMDBdLAogICAgaGlzdG9yeV9oZWFkOiBpMzIsCiAgICB3aW5kb3dfc2l6ZTogaTMyLAopIC0+IGkzMiB7CiAgICAvLyBCdWlsZCB3b3JraW5nIHNldCBmcm9tIHJlY2VudCBhY2Nlc3NlcwogICAgbGV0IG11dCB3b3JraW5nX3NldDogW2Jvb2w7IDI1Nl0gPSBbZmFsc2U7IDI1Nl07CiAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CiAgICBsZXQgc3RhcnRfcG9zOiBpMzIgPSBpZiAoaGlzdG9yeV9oZWFkID49IHdpbmRvd19zaXplKSB7CiAgICAgICAgaGlzdG9yeV9oZWFkIC0gd2luZG93X3NpemUKICAgIH0gZWxzZSB7CiAgICAgICAgMTAwMCAtICh3aW5kb3dfc2l6ZSAtIGhpc3RvcnlfaGVhZCkKICAgIH07CgogICAgbGV0IG11dCBwb3M6IGkzMiA9IHN0YXJ0X3BvczsKICAgIHdoaWxlIChpIDwgd2luZG93X3NpemUpIHsKICAgICAgICBpZiAocG9zID49IDAgJiYgcG9zIDwgMTAwMCkgewogICAgICAgICAgICBsZXQgcGFnZTogaTMyID0gYWNjZXNzX2hpc3RvcnlbcG9zIGFzIHVzaXplXTsKICAgICAgICAgICAgaWYgKHBhZ2UgPj0gMCAmJiBwYWdlIDwgMjU2KSB7CiAgICAgICAgICAgICAgICB3b3JraW5nX3NldFtwYWdlIGFzIHVzaXplXSA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcG9zID0gKHBvcyArIDEpICUgMTAwMDsKICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgLy8gRmluZCBmcmFtZSB3aXRoIHBhZ2Ugbm90IGluIHdvcmtpbmcgc2V0CiAgICBpID0gMDsKICAgIHdoaWxlIChpIDwgNjQpIHsKICAgICAgICBsZXQgdmlydHVhbF9wYWdlOiBpMzIgPSByZXZlcnNlX21hcHBpbmdbaSBhcyB1c2l6ZV07CiAgICAgICAgaWYgKHZpcnR1YWxfcGFnZSA+PSAwICYmIHZpcnR1YWxfcGFnZSA8IDI1NiAmJiAhd29ya2luZ19zZXRbdmlydHVhbF9wYWdlIGFzIHVzaXplXSkgewogICAgICAgICAgICByZXR1cm4gaTsKICAgICAgICB9CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQoKICAgIC8vIElmIGFsbCBwYWdlcyBhcmUgaW4gd29ya2luZyBzZXQsIGZhbGwgYmFjayB0byBzaW1wbGUgcmVwbGFjZW1lbnQKICAgIChoaXN0b3J5X2hlYWQgKiA3KSAlIDY0Cn0KCi8vIEFkYXB0aXZlIHJlcGxhY2VtZW50IGFsZ29yaXRobQpmbiBhZGFwdGl2ZV9yZXBsYWNlbWVudCgKICAgIHJldmVyc2VfbWFwcGluZzogJltpMzI7IDY0XSwKICAgIHJlZmVyZW5jZV9iaXRzOiAmW2Jvb2w7IDI1Nl0sCiAgICBtb2RpZnlfYml0czogJltib29sOyAyNTZdLAogICAgbHJ1X2NvdW50ZXI6ICZbaTMyOyAyNTZdLAogICAgY3VycmVudF90aW1lOiBpMzIsCiAgICBhY2Nlc3NfaGlzdG9yeTogJltpMzI7IDEwMDBdLAogICAgaGlzdG9yeV9oZWFkOiBpMzIsCiAgICB3aW5kb3dfc2l6ZTogaTMyLAopIC0+IGkzMiB7CiAgICBsZXQgbXV0IGJlc3RfZnJhbWU6IGkzMiA9IDA7CiAgICBsZXQgbXV0IGJlc3Rfc2NvcmU6IGkzMiA9IC0xOwoKICAgIGxldCBtdXQgaTogaTMyID0gMDsKICAgIHdoaWxlIChpIDwgNjQpIHsKICAgICAgICBsZXQgdmlydHVhbF9wYWdlOiBpMzIgPSByZXZlcnNlX21hcHBpbmdbaSBhcyB1c2l6ZV07CiAgICAgICAgaWYgKHZpcnR1YWxfcGFnZSA+PSAwICYmIHZpcnR1YWxfcGFnZSA8IDI1NikgewogICAgICAgICAgICBsZXQgbXV0IHNjb3JlOiBpMzIgPSAwOwoKICAgICAgICAgICAgLy8gRmFjdG9yIDE6IEFnZSAob2xkZXIgaXMgYmV0dGVyIGZvciByZXBsYWNlbWVudCkKICAgICAgICAgICAgbGV0IGFnZTogaTMyID0gY3VycmVudF90aW1lIC0gbHJ1X2NvdW50ZXJbdmlydHVhbF9wYWdlIGFzIHVzaXplXTsKICAgICAgICAgICAgc2NvcmUgPSBzY29yZSArIGFnZSAvIDEwOwoKICAgICAgICAgICAgLy8gRmFjdG9yIDI6IFJlZmVyZW5jZSBiaXQgKHVucmVmZXJlbmNlZCBpcyBiZXR0ZXIpCiAgICAgICAgICAgIGlmICghcmVmZXJlbmNlX2JpdHNbdmlydHVhbF9wYWdlIGFzIHVzaXplXSkgewogICAgICAgICAgICAgICAgc2NvcmUgPSBzY29yZSArIDUwOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBGYWN0b3IgMzogRGlydHkgYml0IChjbGVhbiBpcyBiZXR0ZXIpCiAgICAgICAgICAgIGlmICghbW9kaWZ5X2JpdHNbdmlydHVhbF9wYWdlIGFzIHVzaXplXSkgewogICAgICAgICAgICAgICAgc2NvcmUgPSBzY29yZSArIDMwOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBGYWN0b3IgNDogV29ya2luZyBzZXQgbWVtYmVyc2hpcCAobm9uLW1lbWJlciBpcyBiZXR0ZXIpCiAgICAgICAgICAgIGxldCBpbl93b3JraW5nX3NldDogYm9vbCA9IGNoZWNrX3dvcmtpbmdfc2V0X21lbWJlcnNoaXAoCiAgICAgICAgICAgICAgICB2aXJ0dWFsX3BhZ2UsCiAgICAgICAgICAgICAgICBhY2Nlc3NfaGlzdG9yeSwKICAgICAgICAgICAgICAgIGhpc3RvcnlfaGVhZCwKICAgICAgICAgICAgICAgIHdpbmRvd19zaXplLAogICAgICAgICAgICApOwogICAgICAgICAgICBpZiAoIWluX3dvcmtpbmdfc2V0KSB7CiAgICAgICAgICAgICAgICBzY29yZSA9IHNjb3JlICsgNDA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzY29yZSA+IGJlc3Rfc2NvcmUpIHsKICAgICAgICAgICAgICAgIGJlc3Rfc2NvcmUgPSBzY29yZTsKICAgICAgICAgICAgICAgIGJlc3RfZnJhbWUgPSBpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICBiZXN0X2ZyYW1lCn0KCi8vIENoZWNrIGlmIHBhZ2UgaXMgaW4gd29ya2luZyBzZXQKZm4gY2hlY2tfd29ya2luZ19zZXRfbWVtYmVyc2hpcCgKICAgIHBhZ2U6IGkzMiwKICAgIGFjY2Vzc19oaXN0b3J5OiAmW2kzMjsgMTAwMF0sCiAgICBoaXN0b3J5X2hlYWQ6IGkzMiwKICAgIHdpbmRvd19zaXplOiBpMzIsCikgLT4gYm9vbCB7CiAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CiAgICBsZXQgc3RhcnRfcG9zOiBpMzIgPSBpZiAoaGlzdG9yeV9oZWFkID49IHdpbmRvd19zaXplKSB7CiAgICAgICAgaGlzdG9yeV9oZWFkIC0gd2luZG93X3NpemUKICAgIH0gZWxzZSB7CiAgICAgICAgMTAwMCAtICh3aW5kb3dfc2l6ZSAtIGhpc3RvcnlfaGVhZCkKICAgIH07CgogICAgbGV0IG11dCBwb3M6IGkzMiA9IHN0YXJ0X3BvczsKICAgIHdoaWxlIChpIDwgd2luZG93X3NpemUpIHsKICAgICAgICBpZiAocG9zID49IDAgJiYgcG9zIDwgMTAwMCAmJiBhY2Nlc3NfaGlzdG9yeVtwb3MgYXMgdXNpemVdID09IHBhZ2UpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHBvcyA9IChwb3MgKyAxKSAlIDEwMDA7CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQogICAgZmFsc2UKfQoKLy8gTDEgQ2FjaGUgYWNjZXNzIHNpbXVsYXRpb24KZm4gYWNjZXNzX2wxX2NhY2hlKAogICAgYWRkcmVzczogaTMyLAogICAgY2FjaGU6ICZbW2kzMjsgNF07IDY0XSwKICAgIHRhZ3M6ICZtdXQgW1tpMzI7IDRdOyA2NF0sCiAgICB2YWxpZDogJm11dCBbW2Jvb2w7IDRdOyA2NF0sCiAgICBscnVfYml0czogJm11dCBbW2kzMjsgNF07IDY0XSwKICAgIHRpbWU6IGkzMiwKKSAtPiBib29sIHsKICAgIGxldCBzZXRfaW5kZXg6IGkzMiA9IChhZGRyZXNzIC8gNjQpICUgNjQ7CiAgICBsZXQgdGFnOiBpMzIgPSAoYWRkcmVzcyAvIDY0KSAvIDY0OwoKICAgIC8vIENoZWNrIGZvciBoaXQKICAgIGxldCBtdXQgaTogaTMyID0gMDsKICAgIHdoaWxlIChpIDwgNCkgewogICAgICAgIGlmICh2YWxpZFtzZXRfaW5kZXggYXMgdXNpemVdW2kgYXMgdXNpemVdICYmIHRhZ3Nbc2V0X2luZGV4IGFzIHVzaXplXVtpIGFzIHVzaXplXSA9PSB0YWcpIHsKICAgICAgICAgICAgLy8gQ2FjaGUgaGl0IC0gdXBkYXRlIExSVQogICAgICAgICAgICB1cGRhdGVfY2FjaGVfbHJ1KGxydV9iaXRzLCBzZXRfaW5kZXgsIGksIHRpbWUsIDQpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQoKICAgIC8vIENhY2hlIG1pc3MgLSBmaW5kIExSVSB3YXkgdG8gcmVwbGFjZQogICAgbGV0IHZpY3RpbV93YXk6IGkzMiA9IGZpbmRfbHJ1X3dheShscnVfYml0cywgc2V0X2luZGV4LCA0KTsKICAgIHRhZ3Nbc2V0X2luZGV4IGFzIHVzaXplXVt2aWN0aW1fd2F5IGFzIHVzaXplXSA9IHRhZzsKICAgIHZhbGlkW3NldF9pbmRleCBhcyB1c2l6ZV1bdmljdGltX3dheSBhcyB1c2l6ZV0gPSB0cnVlOwogICAgdXBkYXRlX2NhY2hlX2xydShscnVfYml0cywgc2V0X2luZGV4LCB2aWN0aW1fd2F5LCB0aW1lLCA0KTsKCiAgICBmYWxzZQp9CgovLyBMMiBDYWNoZSBhY2Nlc3Mgc2ltdWxhdGlvbgpmbiBhY2Nlc3NfbDJfY2FjaGUoCiAgICBhZGRyZXNzOiBpMzIsCiAgICBjYWNoZTogJltbaTMyOyA4XTsgMTI4XSwKICAgIHRhZ3M6ICZtdXQgW1tpMzI7IDhdOyAxMjhdLAogICAgdmFsaWQ6ICZtdXQgW1tib29sOyA4XTsgMTI4XSwKICAgIGxydV9iaXRzOiAmbXV0IFtbaTMyOyA4XTsgMTI4XSwKICAgIHRpbWU6IGkzMiwKKSAtPiBib29sIHsKICAgIGxldCBzZXRfaW5kZXg6IGkzMiA9IChhZGRyZXNzIC8gNjQpICUgMTI4OwogICAgbGV0IHRhZzogaTMyID0gKGFkZHJlc3MgLyA2NCkgLyAxMjg7CgogICAgLy8gQ2hlY2sgZm9yIGhpdAogICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgd2hpbGUgKGkgPCA4KSB7CiAgICAgICAgaWYgKHZhbGlkW3NldF9pbmRleCBhcyB1c2l6ZV1baSBhcyB1c2l6ZV0gJiYgdGFnc1tzZXRfaW5kZXggYXMgdXNpemVdW2kgYXMgdXNpemVdID09IHRhZykgewogICAgICAgICAgICAvLyBDYWNoZSBoaXQgLSB1cGRhdGUgTFJVCiAgICAgICAgICAgIHVwZGF0ZV9jYWNoZV9scnVfOHdheShscnVfYml0cywgc2V0X2luZGV4LCBpLCB0aW1lKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICAvLyBDYWNoZSBtaXNzIC0gZmluZCBMUlUgd2F5IHRvIHJlcGxhY2UKICAgIGxldCB2aWN0aW1fd2F5OiBpMzIgPSBmaW5kX2xydV93YXlfOChscnVfYml0cywgc2V0X2luZGV4KTsKICAgIHRhZ3Nbc2V0X2luZGV4IGFzIHVzaXplXVt2aWN0aW1fd2F5IGFzIHVzaXplXSA9IHRhZzsKICAgIHZhbGlkW3NldF9pbmRleCBhcyB1c2l6ZV1bdmljdGltX3dheSBhcyB1c2l6ZV0gPSB0cnVlOwogICAgdXBkYXRlX2NhY2hlX2xydV84d2F5KGxydV9iaXRzLCBzZXRfaW5kZXgsIHZpY3RpbV93YXksIHRpbWUpOwoKICAgIGZhbHNlCn0KCi8vIFVwZGF0ZSBjYWNoZSBMUlUgZm9yIDQtd2F5IGNhY2hlCmZuIHVwZGF0ZV9jYWNoZV9scnUobHJ1X2JpdHM6ICZtdXQgW1tpMzI7IDRdOyA2NF0sIHNldF9pbmRleDogaTMyLCB3YXk6IGkzMiwgdGltZTogaTMyLCB3YXlzOiBpMzIpIHsKICAgIGxydV9iaXRzW3NldF9pbmRleCBhcyB1c2l6ZV1bd2F5IGFzIHVzaXplXSA9IHRpbWU7Cn0KCi8vIFVwZGF0ZSBjYWNoZSBMUlUgZm9yIDgtd2F5IGNhY2hlCmZuIHVwZGF0ZV9jYWNoZV9scnVfOHdheShscnVfYml0czogJm11dCBbW2kzMjsgOF07IDEyOF0sIHNldF9pbmRleDogaTMyLCB3YXk6IGkzMiwgdGltZTogaTMyKSB7CiAgICBscnVfYml0c1tzZXRfaW5kZXggYXMgdXNpemVdW3dheSBhcyB1c2l6ZV0gPSB0aW1lOwp9CgovLyBGaW5kIExSVSB3YXkgaW4gNC13YXkgY2FjaGUKZm4gZmluZF9scnVfd2F5KGxydV9iaXRzOiAmW1tpMzI7IDRdOyA2NF0sIHNldF9pbmRleDogaTMyLCB3YXlzOiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgbXV0IGxydV93YXk6IGkzMiA9IDA7CiAgICBsZXQgbXV0IG1pbl90aW1lOiBpMzIgPSBscnVfYml0c1tzZXRfaW5kZXggYXMgdXNpemVdWzBdOwoKICAgIGxldCBtdXQgaTogaTMyID0gMTsKICAgIHdoaWxlIChpIDwgd2F5cykgewogICAgICAgIGlmIChscnVfYml0c1tzZXRfaW5kZXggYXMgdXNpemVdW2kgYXMgdXNpemVdIDwgbWluX3RpbWUpIHsKICAgICAgICAgICAgbWluX3RpbWUgPSBscnVfYml0c1tzZXRfaW5kZXggYXMgdXNpemVdW2kgYXMgdXNpemVdOwogICAgICAgICAgICBscnVfd2F5ID0gaTsKICAgICAgICB9CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQoKICAgIGxydV93YXkKfQoKLy8gRmluZCBMUlUgd2F5IGluIDgtd2F5IGNhY2hlCmZuIGZpbmRfbHJ1X3dheV84KGxydV9iaXRzOiAmW1tpMzI7IDhdOyAxMjhdLCBzZXRfaW5kZXg6IGkzMikgLT4gaTMyIHsKICAgIGxldCBtdXQgbHJ1X3dheTogaTMyID0gMDsKICAgIGxldCBtdXQgbWluX3RpbWU6IGkzMiA9IGxydV9iaXRzW3NldF9pbmRleCBhcyB1c2l6ZV1bMF07CgogICAgbGV0IG11dCBpOiBpMzIgPSAxOwogICAgd2hpbGUgKGkgPCA4KSB7CiAgICAgICAgaWYgKGxydV9iaXRzW3NldF9pbmRleCBhcyB1c2l6ZV1baSBhcyB1c2l6ZV0gPCBtaW5fdGltZSkgewogICAgICAgICAgICBtaW5fdGltZSA9IGxydV9iaXRzW3NldF9pbmRleCBhcyB1c2l6ZV1baSBhcyB1c2l6ZV07CiAgICAgICAgICAgIGxydV93YXkgPSBpOwogICAgICAgIH0KICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgbHJ1X3dheQp9CgovLyBBbmFseXplIG1lbW9yeSBmcmFnbWVudGF0aW9uCmZuIGFuYWx5emVfbWVtb3J5X2ZyYWdtZW50YXRpb24oYWxsb2NhdGlvbl90YWJsZTogJltpMzI7IDY0XSwgbnVtX2ZyYW1lczogaTMyKSAtPiBpMzIgewogICAgbGV0IG11dCBmcmVlX2Jsb2NrczogaTMyID0gMDsKICAgIGxldCBtdXQgbGFyZ2VzdF9mcmVlX2Jsb2NrOiBpMzIgPSAwOwogICAgbGV0IG11dCBjdXJyZW50X2ZyZWVfYmxvY2s6IGkzMiA9IDA7CiAgICBsZXQgbXV0IHRvdGFsX2ZyZWU6IGkzMiA9IDA7CgogICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgd2hpbGUgKGkgPCBudW1fZnJhbWVzKSB7CiAgICAgICAgaWYgKGFsbG9jYXRpb25fdGFibGVbaSBhcyB1c2l6ZV0gPT0gMCkgewogICAgICAgICAgICAvLyBGcmVlIGZyYW1lCiAgICAgICAgICAgIGN1cnJlbnRfZnJlZV9ibG9jayA9IGN1cnJlbnRfZnJlZV9ibG9jayArIDE7CiAgICAgICAgICAgIHRvdGFsX2ZyZWUgPSB0b3RhbF9mcmVlICsgMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBBbGxvY2F0ZWQgZnJhbWUKICAgICAgICAgICAgaWYgKGN1cnJlbnRfZnJlZV9ibG9jayA+IDApIHsKICAgICAgICAgICAgICAgIGZyZWVfYmxvY2tzID0gZnJlZV9ibG9ja3MgKyAxOwogICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRfZnJlZV9ibG9jayA+IGxhcmdlc3RfZnJlZV9ibG9jaykgewogICAgICAgICAgICAgICAgICAgIGxhcmdlc3RfZnJlZV9ibG9jayA9IGN1cnJlbnRfZnJlZV9ibG9jazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGN1cnJlbnRfZnJlZV9ibG9jayA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQoKICAgIC8vIEhhbmRsZSBsYXN0IGJsb2NrIGlmIGl0J3MgZnJlZQogICAgaWYgKGN1cnJlbnRfZnJlZV9ibG9jayA+IDApIHsKICAgICAgICBmcmVlX2Jsb2NrcyA9IGZyZWVfYmxvY2tzICsgMTsKICAgICAgICBpZiAoY3VycmVudF9mcmVlX2Jsb2NrID4gbGFyZ2VzdF9mcmVlX2Jsb2NrKSB7CiAgICAgICAgICAgIGxhcmdlc3RfZnJlZV9ibG9jayA9IGN1cnJlbnRfZnJlZV9ibG9jazsKICAgICAgICB9CiAgICB9CgogICAgLy8gQ2FsY3VsYXRlIGZyYWdtZW50YXRpb24gc2NvcmUgKGhpZ2hlciA9IG1vcmUgZnJhZ21lbnRlZCkKICAgIGlmICh0b3RhbF9mcmVlID09IDApIHsKICAgICAgICAwCiAgICB9IGVsc2UgewogICAgICAgIDEwMCAtICgobGFyZ2VzdF9mcmVlX2Jsb2NrICogMTAwKSAvIHRvdGFsX2ZyZWUpCiAgICB9Cn0KCi8vIENvbXBhY3QgbWVtb3J5IHRvIHJlZHVjZSBmcmFnbWVudGF0aW9uCmZuIGNvbXBhY3RfbWVtb3J5KAogICAgcGFnZV90YWJsZXM6ICZtdXQgW1tpMzI7IDE2XTsgMTZdLAogICAgcmV2ZXJzZV9tYXBwaW5nOiAmbXV0IFtpMzI7IDY0XSwKICAgIGFsbG9jYXRpb25fdGFibGU6ICZtdXQgW2kzMjsgNjRdLAogICAgZnJlZV9saXN0OiAmbXV0IFtpMzI7IDY0XSwKICAgIGZyZWVfY291bnQ6ICZtdXQgaTMyLAogICAgbnVtX2ZyYW1lczogaTMyLAopIHsKICAgIGxldCBtdXQgY29tcGFjdGVkX3BvczogaTMyID0gMDsKICAgIGxldCBtdXQgaTogaTMyID0gMDsKCiAgICAvLyBNb3ZlIGFsbCBhbGxvY2F0ZWQgZnJhbWVzIHRvIHRoZSBiZWdpbm5pbmcKICAgIHdoaWxlIChpIDwgbnVtX2ZyYW1lcykgewogICAgICAgIGlmIChhbGxvY2F0aW9uX3RhYmxlW2kgYXMgdXNpemVdID09IDEpIHsKICAgICAgICAgICAgLy8gQWxsb2NhdGVkIGZyYW1lCiAgICAgICAgICAgIGlmIChpICE9IGNvbXBhY3RlZF9wb3MpIHsKICAgICAgICAgICAgICAgIC8vIE1vdmUgZnJhbWUgZnJvbSBwb3NpdGlvbiBpIHRvIGNvbXBhY3RlZF9wb3MKICAgICAgICAgICAgICAgIGxldCB2aXJ0dWFsX3BhZ2U6IGkzMiA9IHJldmVyc2VfbWFwcGluZ1tpIGFzIHVzaXplXTsKICAgICAgICAgICAgICAgIHJldmVyc2VfbWFwcGluZ1tjb21wYWN0ZWRfcG9zIGFzIHVzaXplXSA9IHZpcnR1YWxfcGFnZTsKICAgICAgICAgICAgICAgIHJldmVyc2VfbWFwcGluZ1tpIGFzIHVzaXplXSA9IC0xOwogICAgICAgICAgICAgICAgYWxsb2NhdGlvbl90YWJsZVtjb21wYWN0ZWRfcG9zIGFzIHVzaXplXSA9IDE7CiAgICAgICAgICAgICAgICBhbGxvY2F0aW9uX3RhYmxlW2kgYXMgdXNpemVdID0gMDsKCiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgcGFnZSB0YWJsZSBlbnRyeQogICAgICAgICAgICAgICAgaWYgKHZpcnR1YWxfcGFnZSA+PSAwICYmIHZpcnR1YWxfcGFnZSA8IDI1NikgewogICAgICAgICAgICAgICAgICAgIGxldCBwYWdlX2Rpcl9pbmRleDogaTMyID0gdmlydHVhbF9wYWdlIC8gMTY7CiAgICAgICAgICAgICAgICAgICAgbGV0IHBhZ2VfdGFibGVfaW5kZXg6IGkzMiA9IHZpcnR1YWxfcGFnZSAlIDE2OwogICAgICAgICAgICAgICAgICAgIHBhZ2VfdGFibGVzW3BhZ2VfZGlyX2luZGV4IGFzIHVzaXplXVtwYWdlX3RhYmxlX2luZGV4IGFzIHVzaXplXSA9CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhY3RlZF9wb3MgKyAxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbXBhY3RlZF9wb3MgPSBjb21wYWN0ZWRfcG9zICsgMTsKICAgICAgICB9CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQoKICAgIC8vIFVwZGF0ZSBmcmVlIGxpc3QKICAgICpmcmVlX2NvdW50ID0gbnVtX2ZyYW1lcyAtIGNvbXBhY3RlZF9wb3M7CiAgICBpID0gMDsKICAgIHdoaWxlIChpIDwgKmZyZWVfY291bnQpIHsKICAgICAgICBmcmVlX2xpc3RbaSBhcyB1c2l6ZV0gPSBjb21wYWN0ZWRfcG9zICsgaTsKICAgICAgICBpID0gaSArIDE7CiAgICB9Cn0KCi8vIENhbGN1bGF0ZSB3b3JraW5nIHNldCBzaXplCmZuIGNhbGN1bGF0ZV93b3JraW5nX3NldF9zaXplKAogICAgYWNjZXNzX2hpc3Rvcnk6ICZbaTMyOyAxMDAwXSwKICAgIGhpc3RvcnlfaGVhZDogaTMyLAogICAgd2luZG93X3NpemU6IGkzMiwKKSAtPiBpMzIgewogICAgbGV0IG11dCB1bmlxdWVfcGFnZXM6IFtib29sOyAyNTZdID0gW2ZhbHNlOyAyNTZdOwogICAgbGV0IG11dCB3b3JraW5nX3NldF9zaXplOiBpMzIgPSAwOwoKICAgIGxldCBzdGFydF9wb3M6IGkzMiA9IGlmIChoaXN0b3J5X2hlYWQgPj0gd2luZG93X3NpemUpIHsKICAgICAgICBoaXN0b3J5X2hlYWQgLSB3aW5kb3dfc2l6ZQogICAgfSBlbHNlIHsKICAgICAgICAxMDAwIC0gKHdpbmRvd19zaXplIC0gaGlzdG9yeV9oZWFkKQogICAgfTsKCiAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CiAgICBsZXQgbXV0IHBvczogaTMyID0gc3RhcnRfcG9zOwogICAgd2hpbGUgKGkgPCB3aW5kb3dfc2l6ZSkgewogICAgICAgIGlmIChwb3MgPj0gMCAmJiBwb3MgPCAxMDAwKSB7CiAgICAgICAgICAgIGxldCBwYWdlOiBpMzIgPSBhY2Nlc3NfaGlzdG9yeVtwb3MgYXMgdXNpemVdOwogICAgICAgICAgICBpZiAocGFnZSA+PSAwICYmIHBhZ2UgPCAyNTYgJiYgIXVuaXF1ZV9wYWdlc1twYWdlIGFzIHVzaXplXSkgewogICAgICAgICAgICAgICAgdW5pcXVlX3BhZ2VzW3BhZ2UgYXMgdXNpemVdID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHdvcmtpbmdfc2V0X3NpemUgPSB3b3JraW5nX3NldF9zaXplICsgMTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBwb3MgPSAocG9zICsgMSkgJSAxMDAwOwogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICB3b3JraW5nX3NldF9zaXplCn0KCi8vIEFkanVzdCBjYWNoZSBwb2xpY2llcyBiYXNlZCBvbiBwZXJmb3JtYW5jZQpmbiBhZGp1c3RfY2FjaGVfcG9saWNpZXMoCiAgICBsMV9scnU6ICZtdXQgW1tpMzI7IDRdOyA2NF0sCiAgICBsMl9scnU6ICZtdXQgW1tpMzI7IDhdOyAxMjhdLAogICAgbDFfaGl0czogaTMyLAogICAgbDFfbWlzc2VzOiBpMzIsCiAgICBsMl9oaXRzOiBpMzIsCiAgICBsMl9taXNzZXM6IGkzMiwKKSB7CiAgICBsZXQgbDFfaGl0X3JhdGU6IGkzMiA9IGlmIChsMV9oaXRzICsgbDFfbWlzc2VzID4gMCkgewogICAgICAgIChsMV9oaXRzICogMTAwKSAvIChsMV9oaXRzICsgbDFfbWlzc2VzKQogICAgfSBlbHNlIHsKICAgICAgICAwCiAgICB9OwoKICAgIGxldCBsMl9oaXRfcmF0ZTogaTMyID0gaWYgKGwyX2hpdHMgKyBsMl9taXNzZXMgPiAwKSB7CiAgICAgICAgKGwyX2hpdHMgKiAxMDApIC8gKGwyX2hpdHMgKyBsMl9taXNzZXMpCiAgICB9IGVsc2UgewogICAgICAgIDAKICAgIH07CgogICAgLy8gSWYgaGl0IHJhdGVzIGFyZSBsb3csIGFkanVzdCByZXBsYWNlbWVudCBwb2xpY2llcwogICAgaWYgKGwxX2hpdF9yYXRlIDwgNzApIHsKICAgICAgICAvLyBNYWtlIEwxIGNhY2hlIG1vcmUgY29uc2VydmF0aXZlIChhZ2UgZW50cmllcyBmYXN0ZXIpCiAgICAgICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgICAgIHdoaWxlIChpIDwgNjQpIHsKICAgICAgICAgICAgbGV0IG11dCBqOiBpMzIgPSAwOwogICAgICAgICAgICB3aGlsZSAoaiA8IDQpIHsKICAgICAgICAgICAgICAgIGwxX2xydVtpIGFzIHVzaXplXVtqIGFzIHVzaXplXSA9IGwxX2xydVtpIGFzIHVzaXplXVtqIGFzIHVzaXplXSAtIDEwOwogICAgICAgICAgICAgICAgaiA9IGogKyAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGkgPSBpICsgMTsKICAgICAgICB9CiAgICB9CgogICAgaWYgKGwyX2hpdF9yYXRlIDwgNjApIHsKICAgICAgICAvLyBNYWtlIEwyIGNhY2hlIG1vcmUgY29uc2VydmF0aXZlCiAgICAgICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgICAgIHdoaWxlIChpIDwgMTI4KSB7CiAgICAgICAgICAgIGxldCBtdXQgajogaTMyID0gMDsKICAgICAgICAgICAgd2hpbGUgKGogPCA4KSB7CiAgICAgICAgICAgICAgICBsMl9scnVbaSBhcyB1c2l6ZV1baiBhcyB1c2l6ZV0gPSBsMl9scnVbaSBhcyB1c2l6ZV1baiBhcyB1c2l6ZV0gLSAxNTsKICAgICAgICAgICAgICAgIGogPSBqICsgMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpID0gaSArIDE7CiAgICAgICAgfQogICAgfQp9CgovLyBDYWxjdWxhdGUgYXZlcmFnZSBtZW1vcnkgYWNjZXNzIHRpbWUKZm4gY2FsY3VsYXRlX2F2ZXJhZ2VfbWVtb3J5X2FjY2Vzc190aW1lKAogICAgbDFfaGl0czogaTMyLAogICAgbDFfbWlzc2VzOiBpMzIsCiAgICBsMl9oaXRzOiBpMzIsCiAgICBsMl9taXNzZXM6IGkzMiwKICAgIHBhZ2VfZmF1bHRzOiBpMzIsCikgLT4gaTMyIHsKICAgIGxldCB0b3RhbF9hY2Nlc3NlczogaTMyID0gbDFfaGl0cyArIGwxX21pc3NlczsKICAgIGlmICh0b3RhbF9hY2Nlc3NlcyA9PSAwKSB7CiAgICAgICAgcmV0dXJuIDA7CiAgICB9CgogICAgbGV0IGwxX2hpdF90aW1lOiBpMzIgPSAxOwogICAgbGV0IGwyX2hpdF90aW1lOiBpMzIgPSAxMDsKICAgIGxldCBtZW1vcnlfYWNjZXNzX3RpbWU6IGkzMiA9IDEwMDsKICAgIGxldCBwYWdlX2ZhdWx0X3RpbWU6IGkzMiA9IDEwMDAwOwoKICAgIGxldCB0b3RhbF90aW1lOiBpMzIgPSBsMV9oaXRzICogbDFfaGl0X3RpbWUKICAgICAgICArIGwyX2hpdHMgKiAobDFfaGl0X3RpbWUgKyBsMl9oaXRfdGltZSkKICAgICAgICArIGwyX21pc3NlcyAqIChsMV9oaXRfdGltZSArIGwyX2hpdF90aW1lICsgbWVtb3J5X2FjY2Vzc190aW1lKQogICAgICAgICsgcGFnZV9mYXVsdHMgKiBwYWdlX2ZhdWx0X3RpbWU7CgogICAgdG90YWxfdGltZSAvIHRvdGFsX2FjY2Vzc2VzCn0K", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (25, "comprehensive25", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (26, "comprehensive26", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (27, "comprehensive27", 2, "LyoKVGVzdCBQYWNrYWdlOiBTZW1hbnRpYy0yClRlc3QgVGFyZ2V0OiBjb21wcmVoZW5zaXZlCkF1dGhvcjogV2VueGluIFpoZW5nClRpbWU6IDIwMjUtMDgtMTcKVmVyZGljdDogUGFzcwpUZXN0IE5hbWU6IEFkdmFuY2VkIE11bHRpLUxheWVyIENhY2hlIFN5c3RlbSB3aXRoIE1lbW9yeSBNYW5hZ2VtZW50IFNpbXVsYXRpb24KU3VtbWFyeTogVGhpcyB0ZXN0IGNvbXByZWhlbnNpdmVseSBldmFsdWF0ZXMgY29tcGlsZXIgb3B0aW1pemF0aW9ucyBmb3I6CkRldGFpbHM6CkNvbXBsZXggbXVsdGktbGV2ZWwgZGF0YSBzdHJ1Y3R1cmUgbWFuYWdlbWVudCB3aXRoIGNhY2hlIGhpZXJhcmNoaWVzCkFkdmFuY2VkIG1lbW9yeSBhbGxvY2F0aW9uIHNpbXVsYXRpb24gYW5kIGdhcmJhZ2UgY29sbGVjdGlvbiBwYXR0ZXJucwpDb21wbGV4IGFyaXRobWV0aWMgb3BlcmF0aW9ucyBhbmQgYml0IG1hbmlwdWxhdGlvbiBmb3IgaGFzaCBjb21wdXRhdGlvbnMKRGVlcCByZWN1cnNpdmUgZnVuY3Rpb24gY2FsbHMgd2l0aCB0YWlsLWNhbGwgb3B0aW1pemF0aW9uIG9wcG9ydHVuaXRpZXMKTXVsdGktZGltZW5zaW9uYWwgYXJyYXkgYWNjZXNzIHBhdHRlcm5zIHdpdGggY2FjaGUgbG9jYWxpdHkgY29uc2lkZXJhdGlvbnMKQnJhbmNoIHByZWRpY3Rpb24gZm9yIGNvbXBsZXggY29uZGl0aW9uYWwgbG9naWMgaW4gY2FjaGUgaGl0L21pc3Mgc2NlbmFyaW9zCkxvb3Agb3B0aW1pemF0aW9uIGluIG1lbW9yeSBtYW5hZ2VtZW50IGFuZCBjYWNoZSByZXBsYWNlbWVudCBhbGdvcml0aG1zCkZ1bmN0aW9uIGNhbGwgb3ZlcmhlYWQgb3B0aW1pemF0aW9uIGZvciBmcmVxdWVudGx5IGNhbGxlZCB1dGlsaXR5IGZ1bmN0aW9ucwoqLwoKLy8gY29tcHJlaGVuc2l2ZTI3LnJ4IC0gQWR2YW5jZWQgTXVsdGktTGF5ZXIgQ2FjaGUgU3lzdGVtIHdpdGggTWVtb3J5IE1hbmFnZW1lbnQgU2ltdWxhdGlvbgovLyBUaGlzIHRlc3QgY29tcHJlaGVuc2l2ZWx5IGV2YWx1YXRlcyBjb21waWxlciBvcHRpbWl6YXRpb25zIGZvcjoKLy8gLSBDb21wbGV4IG11bHRpLWxldmVsIGRhdGEgc3RydWN0dXJlIG1hbmFnZW1lbnQgd2l0aCBjYWNoZSBoaWVyYXJjaGllcwovLyAtIEFkdmFuY2VkIG1lbW9yeSBhbGxvY2F0aW9uIHNpbXVsYXRpb24gYW5kIGdhcmJhZ2UgY29sbGVjdGlvbiBwYXR0ZXJucwovLyAtIENvbXBsZXggYXJpdGhtZXRpYyBvcGVyYXRpb25zIGFuZCBiaXQgbWFuaXB1bGF0aW9uIGZvciBoYXNoIGNvbXB1dGF0aW9ucwovLyAtIERlZXAgcmVjdXJzaXZlIGZ1bmN0aW9uIGNhbGxzIHdpdGggdGFpbC1jYWxsIG9wdGltaXphdGlvbiBvcHBvcnR1bml0aWVzCi8vIC0gTXVsdGktZGltZW5zaW9uYWwgYXJyYXkgYWNjZXNzIHBhdHRlcm5zIHdpdGggY2FjaGUgbG9jYWxpdHkgY29uc2lkZXJhdGlvbnMKLy8gLSBCcmFuY2ggcHJlZGljdGlvbiBmb3IgY29tcGxleCBjb25kaXRpb25hbCBsb2dpYyBpbiBjYWNoZSBoaXQvbWlzcyBzY2VuYXJpb3MKLy8gLSBMb29wIG9wdGltaXphdGlvbiBpbiBtZW1vcnkgbWFuYWdlbWVudCBhbmQgY2FjaGUgcmVwbGFjZW1lbnQgYWxnb3JpdGhtcwovLyAtIEZ1bmN0aW9uIGNhbGwgb3ZlcmhlYWQgb3B0aW1pemF0aW9uIGZvciBmcmVxdWVudGx5IGNhbGxlZCB1dGlsaXR5IGZ1bmN0aW9ucwoKZm4gbWFpbigpIHsKICAgIC8vIEluaXRpYWxpemUgYSBjb21wcmVoZW5zaXZlIGNhY2hlIHN5c3RlbSBzaW11bGF0aW9uCiAgICAvLyBUaGlzIHNpbXVsYXRlcyBhIDMtbGV2ZWwgY2FjaGUgaGllcmFyY2h5IHdpdGggTFJVIHJlcGxhY2VtZW50IHBvbGljeQogICAgcHJpbnRsbkludCg0Mik7IC8vIEV4cGVjdGVkIG91dHB1dCBtYXJrZXIKCiAgICAvLyBUZXN0IHRoZSBjYWNoZSBzeXN0ZW0gd2l0aCB2YXJpb3VzIGFjY2VzcyBwYXR0ZXJucwogICAgbGV0IGNhY2hlX3BlcmZvcm1hbmNlOiBpMzIgPSBydW5fY2FjaGVfc2ltdWxhdGlvbigpOwogICAgcHJpbnRsbkludChjYWNoZV9wZXJmb3JtYW5jZSk7CgogICAgLy8gVGVzdCBtZW1vcnkgbWFuYWdlbWVudCBhbGdvcml0aG1zCiAgICBsZXQgbWVtb3J5X2VmZmljaWVuY3k6IGkzMiA9IHJ1bl9tZW1vcnlfbWFuYWdlcigpOwogICAgcHJpbnRsbkludChtZW1vcnlfZWZmaWNpZW5jeSk7CgogICAgLy8gVGVzdCBoYXNoIHRhYmxlIG9wZXJhdGlvbnMgd2l0aCBjb2xsaXNpb24gcmVzb2x1dGlvbgogICAgbGV0IGhhc2hfb3BlcmF0aW9uczogaTMyID0gcnVuX2hhc2hfdGFibGVfdGVzdHMoKTsKICAgIHByaW50bG5JbnQoaGFzaF9vcGVyYXRpb25zKTsKCiAgICAvLyBUZXN0IHByaW9yaXR5IHF1ZXVlIG9wZXJhdGlvbnMgZm9yIGNhY2hlIHJlcGxhY2VtZW50CiAgICBsZXQgcHJpb3JpdHlfcXVldWVfb3BzOiBpMzIgPSBydW5fcHJpb3JpdHlfcXVldWVfdGVzdHMoKTsKICAgIHByaW50bG5JbnQocHJpb3JpdHlfcXVldWVfb3BzKTsKCiAgICAvLyBSdW4gY29tcHJlaGVuc2l2ZSBzeXN0ZW0gaW50ZWdyYXRpb24gdGVzdAogICAgbGV0IGludGVncmF0aW9uX3Jlc3VsdDogaTMyID0gcnVuX2ludGVncmF0ZWRfc3lzdGVtX3Rlc3QoKTsKICAgIHByaW50bG5JbnQoaW50ZWdyYXRpb25fcmVzdWx0KTsKCiAgICBwcmludGxuSW50KDk5KTsgLy8gRW5kIG1hcmtlcgogICAgZXhpdCgwKTsKfQoKLy8gQ2FjaGUgc3lzdGVtIGNvbnN0YW50cwpmbiBnZXRfbDFfY2FjaGVfc2l6ZSgpIC0+IGkzMiB7CiAgICA2NAp9CmZuIGdldF9sMl9jYWNoZV9zaXplKCkgLT4gaTMyIHsKICAgIDUxMgp9CmZuIGdldF9sM19jYWNoZV9zaXplKCkgLT4gaTMyIHsKICAgIDIwNDgKfQpmbiBnZXRfY2FjaGVfbGluZV9zaXplKCkgLT4gaTMyIHsKICAgIDY0Cn0KZm4gZ2V0X2Fzc29jaWF0aXZpdHkoKSAtPiBpMzIgewogICAgNAp9CgovLyBNZW1vcnkgbWFuYWdlbWVudCBjb25zdGFudHMKZm4gZ2V0X3BhZ2Vfc2l6ZSgpIC0+IGkzMiB7CiAgICA0MDk2Cn0KZm4gZ2V0X2hlYXBfc2l6ZSgpIC0+IGkzMiB7CiAgICA2NTUzNgp9CmZuIGdldF9nY190aHJlc2hvbGQoKSAtPiBpMzIgewogICAgODAKfQoKLy8gSGFzaCB0YWJsZSBjb25maWd1cmF0aW9uCmZuIGdldF9oYXNoX3RhYmxlX3NpemUoKSAtPiBpMzIgewogICAgMTAyNAp9CmZuIGdldF9tYXhfcHJvYmVfZGlzdGFuY2UoKSAtPiBpMzIgewogICAgMTYKfQoKLy8gQWR2YW5jZWQgY2FjaGUgc2ltdWxhdGlvbiB3aXRoIExSVSByZXBsYWNlbWVudCBwb2xpY3kKZm4gcnVuX2NhY2hlX3NpbXVsYXRpb24oKSAtPiBpMzIgewogICAgbGV0IHRvdGFsX2FjY2Vzc2VzOiBpMzIgPSAxMDAwMDsKICAgIGxldCBtdXQgY2FjaGVfaGl0czogaTMyID0gMDsKICAgIGxldCBtdXQgY2FjaGVfbWlzc2VzOiBpMzIgPSAwOwoKICAgIC8vIFNpbXVsYXRlIEwxIGNhY2hlICg2NCBlbnRyaWVzLCA0LXdheSBhc3NvY2lhdGl2ZSkKICAgIGxldCBtdXQgbDFfY2FjaGU6IFtpMzI7IDI1Nl0gPSBbMDsgMjU2XTsgLy8gdGFnLCB2YWxpZCwgbHJ1X2NvdW50ZXIsIGRhdGEKICAgIGxldCBtdXQgbDFfbHJ1X2NvdW50ZXI6IGkzMiA9IDA7CgogICAgLy8gU2ltdWxhdGUgTDIgY2FjaGUgKDUxMiBlbnRyaWVzLCA4LXdheSBhc3NvY2lhdGl2ZSkKICAgIGxldCBtdXQgbDJfY2FjaGU6IFtpMzI7IDQwOTZdID0gWzA7IDQwOTZdOwogICAgbGV0IG11dCBsMl9scnVfY291bnRlcjogaTMyID0gMDsKCiAgICAvLyBTaW11bGF0ZSBtZW1vcnkgYWNjZXNzIHBhdHRlcm5zCiAgICBsZXQgbXV0IGFjY2Vzc19wYXR0ZXJuOiBpMzIgPSAwOwogICAgd2hpbGUgKGFjY2Vzc19wYXR0ZXJuIDwgdG90YWxfYWNjZXNzZXMpIHsKICAgICAgICBsZXQgYWRkcmVzczogaTMyID0gZ2VuZXJhdGVfbWVtb3J5X2FkZHJlc3MoYWNjZXNzX3BhdHRlcm4pOwogICAgICAgIGxldCBjYWNoZV9yZXN1bHQ6IGkzMiA9IHNpbXVsYXRlX2NhY2hlX2FjY2VzcyhhZGRyZXNzLCAmbXV0IGwxX2NhY2hlLCAmbXV0IGwyX2NhY2hlKTsKCiAgICAgICAgaWYgKGNhY2hlX3Jlc3VsdCA+IDApIHsKICAgICAgICAgICAgY2FjaGVfaGl0cyA9IGNhY2hlX2hpdHMgKyAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNhY2hlX21pc3NlcyA9IGNhY2hlX21pc3NlcyArIDE7CiAgICAgICAgICAgIC8vIFNpbXVsYXRlIGNhY2hlIGxpbmUgZmlsbAogICAgICAgICAgICBsZXQgZmlsbF9yZXN1bHQ6IGkzMiA9IHNpbXVsYXRlX2NhY2hlX2ZpbGwoYWRkcmVzcywgJm11dCBsMV9jYWNoZSwgJm11dCBsMl9jYWNoZSk7CiAgICAgICAgfQoKICAgICAgICAvLyBVcGRhdGUgTFJVIGNvdW50ZXJzCiAgICAgICAgbDFfbHJ1X2NvdW50ZXIgPSB1cGRhdGVfbHJ1X2NvdW50ZXJzX2wxKCZsMV9jYWNoZSwgbDFfbHJ1X2NvdW50ZXIpOwogICAgICAgIGwyX2xydV9jb3VudGVyID0gdXBkYXRlX2xydV9jb3VudGVyc19sMigmbDJfY2FjaGUsIGwyX2xydV9jb3VudGVyKTsKCiAgICAgICAgYWNjZXNzX3BhdHRlcm4gPSBhY2Nlc3NfcGF0dGVybiArIDE7CiAgICB9CgogICAgLy8gQ2FsY3VsYXRlIGNhY2hlIGhpdCByYXRpbyAoc2NhbGVkIGJ5IDEwMDAgZm9yIGludGVnZXIgcHJlY2lzaW9uKQogICAgbGV0IGhpdF9yYXRpbzogaTMyID0gKGNhY2hlX2hpdHMgKiAxMDAwKSAvIHRvdGFsX2FjY2Vzc2VzOwogICAgcmV0dXJuIGhpdF9yYXRpbzsKfQoKLy8gR2VuZXJhdGUgY29tcGxleCBtZW1vcnkgYWNjZXNzIHBhdHRlcm5zIGZvciB0ZXN0aW5nCmZuIGdlbmVyYXRlX21lbW9yeV9hZGRyZXNzKHBhdHRlcm5faW5kZXg6IGkzMikgLT4gaTMyIHsKICAgIGxldCBiYXNlX2FkZHJlc3M6IGkzMiA9IDB4MTAwMDAwMDA7CiAgICBsZXQgcGF0dGVybl90eXBlOiBpMzIgPSBwYXR0ZXJuX2luZGV4ICUgNzsKCiAgICBpZiAocGF0dGVybl90eXBlID09IDApIHsKICAgICAgICAvLyBTZXF1ZW50aWFsIGFjY2VzcyBwYXR0ZXJuCiAgICAgICAgYmFzZV9hZGRyZXNzICsgKHBhdHRlcm5faW5kZXggKiA0KQogICAgfSBlbHNlIGlmIChwYXR0ZXJuX3R5cGUgPT0gMSkgewogICAgICAgIC8vIFN0cmlkZWQgYWNjZXNzIHBhdHRlcm4KICAgICAgICBiYXNlX2FkZHJlc3MgKyAoKHBhdHRlcm5faW5kZXggKiA2NCkgJSA4MTkyKQogICAgfSBlbHNlIGlmIChwYXR0ZXJuX3R5cGUgPT0gMikgewogICAgICAgIC8vIFJhbmRvbSBhY2Nlc3MgcGF0dGVybgogICAgICAgIGJhc2VfYWRkcmVzcyArIChoYXNoX2Z1bmN0aW9uKHBhdHRlcm5faW5kZXgpICUgMTYzODQpCiAgICB9IGVsc2UgaWYgKHBhdHRlcm5fdHlwZSA9PSAzKSB7CiAgICAgICAgLy8gVGVtcG9yYWwgbG9jYWxpdHkgcGF0dGVybgogICAgICAgIGxldCBob3Rfc2V0X3NpemU6IGkzMiA9IDEyODsKICAgICAgICBiYXNlX2FkZHJlc3MgKyAoKHBhdHRlcm5faW5kZXggJSBob3Rfc2V0X3NpemUpICogNCkKICAgIH0gZWxzZSBpZiAocGF0dGVybl90eXBlID09IDQpIHsKICAgICAgICAvLyBTcGF0aWFsIGxvY2FsaXR5IHBhdHRlcm4KICAgICAgICBsZXQgYmxvY2tfc2l6ZTogaTMyID0gNjQ7CiAgICAgICAgbGV0IGJsb2NrX2lkOiBpMzIgPSBwYXR0ZXJuX2luZGV4IC8gYmxvY2tfc2l6ZTsKICAgICAgICBsZXQgb2Zmc2V0OiBpMzIgPSBwYXR0ZXJuX2luZGV4ICUgYmxvY2tfc2l6ZTsKICAgICAgICBiYXNlX2FkZHJlc3MgKyAoYmxvY2tfaWQgKiA0MDk2KSArIChvZmZzZXQgKiA0KQogICAgfSBlbHNlIGlmIChwYXR0ZXJuX3R5cGUgPT0gNSkgewogICAgICAgIC8vIFBvd2VyLW9mLTIgc3RyaWRlIHBhdHRlcm4KICAgICAgICBsZXQgbXV0IHN0cmlkZTogaTMyID0gMTsKICAgICAgICBsZXQgbXV0IHRlbXA6IGkzMiA9IHBhdHRlcm5faW5kZXg7CiAgICAgICAgd2hpbGUgKHRlbXAgPiAwKSB7CiAgICAgICAgICAgIHN0cmlkZSA9IHN0cmlkZSAqIDI7CiAgICAgICAgICAgIHRlbXAgPSB0ZW1wIC8gMjsKICAgICAgICB9CiAgICAgICAgYmFzZV9hZGRyZXNzICsgKChwYXR0ZXJuX2luZGV4ICogc3RyaWRlKSAlIDMyNzY4KQogICAgfSBlbHNlIHsKICAgICAgICAvLyBNaXhlZCBwYXR0ZXJuIHdpdGggYWxpYXNpbmcKICAgICAgICBiYXNlX2FkZHJlc3MgKyAoKHBhdHRlcm5faW5kZXggKiAxNyArIHBhdHRlcm5faW5kZXggKiBwYXR0ZXJuX2luZGV4KSAlIDY1NTM2KQogICAgfQp9CgovLyBDb21wbGV4IGhhc2ggZnVuY3Rpb24gZm9yIGFkZHJlc3MgZ2VuZXJhdGlvbgpmbiBoYXNoX2Z1bmN0aW9uKGtleTogaTMyKSAtPiBpMzIgewogICAgbGV0IG11dCBoYXNoOiBpMzIgPSBrZXk7CiAgICBoYXNoID0gKGhhc2ggXiAoaGFzaCA+PiAxNikpICUgMzI3Njg7CiAgICBoYXNoID0gaGFzaCAqIDB4OWYzYjsKICAgIGhhc2ggPSAoaGFzaCBeIChoYXNoID4+IDE2KSkgJSAzMjc2ODsKICAgIGhhc2ggPSBoYXNoICogMHg1MzNmOwogICAgaGFzaCA9IGhhc2ggXiAoaGFzaCA+PiAxNik7CiAgICByZXR1cm4gaGFzaDsKfQoKLy8gU2ltdWxhdGUgY2FjaGUgYWNjZXNzIHdpdGggY29tcGxleCBhc3NvY2lhdGl2ZSBsb29rdXAKZm4gc2ltdWxhdGVfY2FjaGVfYWNjZXNzKAogICAgYWRkcmVzczogaTMyLAogICAgbDFfY2FjaGU6ICZtdXQgW2kzMjsgMjU2XSwKICAgIGwyX2NhY2hlOiAmbXV0IFtpMzI7IDQwOTZdLAopIC0+IGkzMiB7CiAgICAvLyBMMSBDYWNoZSBsb29rdXAgKDQtd2F5IGFzc29jaWF0aXZlKQogICAgbGV0IGwxX2luZGV4OiBpMzIgPSAoYWRkcmVzcyAvIGdldF9jYWNoZV9saW5lX3NpemUoKSkgJSAxNjsKICAgIGxldCBsMV90YWc6IGkzMiA9IGFkZHJlc3MgLyAoZ2V0X2NhY2hlX2xpbmVfc2l6ZSgpICogMTYpOwoKICAgIGxldCBtdXQgd2F5OiBpMzIgPSAwOwogICAgd2hpbGUgKHdheSA8IGdldF9hc3NvY2lhdGl2aXR5KCkpIHsKICAgICAgICBsZXQgY2FjaGVfZW50cnlfYmFzZTogaTMyID0gKGwxX2luZGV4ICogZ2V0X2Fzc29jaWF0aXZpdHkoKSArIHdheSkgKiA0OwogICAgICAgIGxldCBzdG9yZWRfdGFnOiBpMzIgPSBsMV9jYWNoZVtjYWNoZV9lbnRyeV9iYXNlIGFzIHVzaXplXTsKICAgICAgICBsZXQgdmFsaWRfYml0OiBpMzIgPSBsMV9jYWNoZVtjYWNoZV9lbnRyeV9iYXNlIGFzIHVzaXplICsgMV07CgogICAgICAgIGlmICgodmFsaWRfYml0ID09IDEpICYmIChzdG9yZWRfdGFnID09IGwxX3RhZykpIHsKICAgICAgICAgICAgLy8gTDEgY2FjaGUgaGl0CiAgICAgICAgICAgIGwxX2NhY2hlW2NhY2hlX2VudHJ5X2Jhc2UgYXMgdXNpemUgKyAyXSA9IGdldF9jdXJyZW50X3RpbWVzdGFtcCgpOyAvLyBVcGRhdGUgTFJVCiAgICAgICAgICAgIHJldHVybiAxOyAvLyBMMSBoaXQKICAgICAgICB9CiAgICAgICAgd2F5ID0gd2F5ICsgMTsKICAgIH0KCiAgICAvLyBMMiBDYWNoZSBsb29rdXAgKDgtd2F5IGFzc29jaWF0aXZlKQogICAgbGV0IGwyX2luZGV4OiBpMzIgPSAoYWRkcmVzcyAvIGdldF9jYWNoZV9saW5lX3NpemUoKSkgJSA2NDsKICAgIGxldCBsMl90YWc6IGkzMiA9IGFkZHJlc3MgLyAoZ2V0X2NhY2hlX2xpbmVfc2l6ZSgpICogNjQpOwoKICAgIHdheSA9IDA7CiAgICB3aGlsZSAod2F5IDwgOCkgewogICAgICAgIGxldCBjYWNoZV9lbnRyeV9iYXNlOiBpMzIgPSAobDJfaW5kZXggKiA4ICsgd2F5KSAqIDQ7CiAgICAgICAgbGV0IHN0b3JlZF90YWc6IGkzMiA9IGwyX2NhY2hlW2NhY2hlX2VudHJ5X2Jhc2UgYXMgdXNpemVdOwogICAgICAgIGxldCB2YWxpZF9iaXQ6IGkzMiA9IGwyX2NhY2hlW2NhY2hlX2VudHJ5X2Jhc2UgYXMgdXNpemUgKyAxXTsKCiAgICAgICAgaWYgKCh2YWxpZF9iaXQgPT0gMSkgJiYgKHN0b3JlZF90YWcgPT0gbDJfdGFnKSkgewogICAgICAgICAgICAvLyBMMiBjYWNoZSBoaXQKICAgICAgICAgICAgbDJfY2FjaGVbY2FjaGVfZW50cnlfYmFzZSBhcyB1c2l6ZSArIDJdID0gZ2V0X2N1cnJlbnRfdGltZXN0YW1wKCk7IC8vIFVwZGF0ZSBMUlUKICAgICAgICAgICAgcmV0dXJuIDI7IC8vIEwyIGhpdAogICAgICAgIH0KICAgICAgICB3YXkgPSB3YXkgKyAxOwogICAgfQoKICAgIHJldHVybiAwOyAvLyBDYWNoZSBtaXNzCn0KCi8vIFNpbXVsYXRlIGNhY2hlIGxpbmUgZmlsbCB3aXRoIExSVSByZXBsYWNlbWVudApmbiBzaW11bGF0ZV9jYWNoZV9maWxsKGFkZHJlc3M6IGkzMiwgbDFfY2FjaGU6ICZtdXQgW2kzMjsgMjU2XSwgbDJfY2FjaGU6ICZtdXQgW2kzMjsgNDA5Nl0pIC0+IGkzMiB7CiAgICAvLyBGaWxsIEwxIGNhY2hlCiAgICBsZXQgbDFfaW5kZXg6IGkzMiA9IChhZGRyZXNzIC8gZ2V0X2NhY2hlX2xpbmVfc2l6ZSgpKSAlIDE2OwogICAgbGV0IGwxX3RhZzogaTMyID0gYWRkcmVzcyAvIChnZXRfY2FjaGVfbGluZV9zaXplKCkgKiAxNik7CgogICAgLy8gRmluZCBMUlUgd2F5IGluIEwxCiAgICBsZXQgbHJ1X3dheTogaTMyID0gZmluZF9scnVfd2F5X2wxKGwxX2NhY2hlLCBsMV9pbmRleCk7CiAgICBsZXQgY2FjaGVfZW50cnlfYmFzZTogaTMyID0gKGwxX2luZGV4ICogZ2V0X2Fzc29jaWF0aXZpdHkoKSArIGxydV93YXkpICogNDsKCiAgICBsMV9jYWNoZVtjYWNoZV9lbnRyeV9iYXNlIGFzIHVzaXplXSA9IGwxX3RhZzsKICAgIGwxX2NhY2hlW2NhY2hlX2VudHJ5X2Jhc2UgYXMgdXNpemUgKyAxXSA9IDE7IC8vIFNldCB2YWxpZAogICAgbDFfY2FjaGVbY2FjaGVfZW50cnlfYmFzZSBhcyB1c2l6ZSArIDJdID0gZ2V0X2N1cnJlbnRfdGltZXN0YW1wKCk7IC8vIFNldCBMUlUgdGltZXN0YW1wCiAgICBsMV9jYWNoZVtjYWNoZV9lbnRyeV9iYXNlIGFzIHVzaXplICsgM10gPSBzaW11bGF0ZV9tZW1vcnlfcmVhZChhZGRyZXNzKTsgLy8gTG9hZCBkYXRhCgogICAgLy8gRmlsbCBMMiBjYWNoZQogICAgbGV0IGwyX2luZGV4OiBpMzIgPSAoYWRkcmVzcyAvIGdldF9jYWNoZV9saW5lX3NpemUoKSkgJSA2NDsKICAgIGxldCBsMl90YWc6IGkzMiA9IGFkZHJlc3MgLyAoZ2V0X2NhY2hlX2xpbmVfc2l6ZSgpICogNjQpOwoKICAgIGxldCBsMl9scnVfd2F5OiBpMzIgPSBmaW5kX2xydV93YXlfbDIobDJfY2FjaGUsIGwyX2luZGV4KTsKICAgIGxldCBsMl9lbnRyeV9iYXNlOiBpMzIgPSAobDJfaW5kZXggKiA4ICsgbDJfbHJ1X3dheSkgKiA0OwoKICAgIGwyX2NhY2hlW2wyX2VudHJ5X2Jhc2UgYXMgdXNpemVdID0gbDJfdGFnOwogICAgbDJfY2FjaGVbbDJfZW50cnlfYmFzZSBhcyB1c2l6ZSArIDFdID0gMTsgLy8gU2V0IHZhbGlkCiAgICBsMl9jYWNoZVtsMl9lbnRyeV9iYXNlIGFzIHVzaXplICsgMl0gPSBnZXRfY3VycmVudF90aW1lc3RhbXAoKTsgLy8gU2V0IExSVSB0aW1lc3RhbXAKICAgIGwyX2NhY2hlW2wyX2VudHJ5X2Jhc2UgYXMgdXNpemUgKyAzXSA9IHNpbXVsYXRlX21lbW9yeV9yZWFkKGFkZHJlc3MpOyAvLyBMb2FkIGRhdGEKCiAgICByZXR1cm4gMTsKfQoKLy8gRmluZCBMUlUgd2F5IGluIEwxIGNhY2hlIHNldApmbiBmaW5kX2xydV93YXlfbDEobDFfY2FjaGU6ICZbaTMyOyAyNTZdLCBzZXRfaW5kZXg6IGkzMikgLT4gaTMyIHsKICAgIGxldCBtdXQgb2xkZXN0X3RpbWVzdGFtcDogaTMyID0gMjE0NzQ4MzY0NzsgLy8gTWF4IGludAogICAgbGV0IG11dCBscnVfd2F5OiBpMzIgPSAwOwoKICAgIGxldCBtdXQgd2F5OiBpMzIgPSAwOwogICAgd2hpbGUgKHdheSA8IGdldF9hc3NvY2lhdGl2aXR5KCkpIHsKICAgICAgICBsZXQgY2FjaGVfZW50cnlfYmFzZTogaTMyID0gKHNldF9pbmRleCAqIGdldF9hc3NvY2lhdGl2aXR5KCkgKyB3YXkpICogNDsKICAgICAgICBsZXQgdGltZXN0YW1wOiBpMzIgPSBsMV9jYWNoZVtjYWNoZV9lbnRyeV9iYXNlIGFzIHVzaXplICsgMl07CiAgICAgICAgbGV0IHZhbGlkOiBpMzIgPSBsMV9jYWNoZVtjYWNoZV9lbnRyeV9iYXNlIGFzIHVzaXplICsgMV07CgogICAgICAgIGlmICh2YWxpZCA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiB3YXk7IC8vIEZvdW5kIGludmFsaWQgZW50cnkKICAgICAgICB9CgogICAgICAgIGlmICh0aW1lc3RhbXAgPCBvbGRlc3RfdGltZXN0YW1wKSB7CiAgICAgICAgICAgIG9sZGVzdF90aW1lc3RhbXAgPSB0aW1lc3RhbXA7CiAgICAgICAgICAgIGxydV93YXkgPSB3YXk7CiAgICAgICAgfQogICAgICAgIHdheSA9IHdheSArIDE7CiAgICB9CgogICAgcmV0dXJuIGxydV93YXk7Cn0KCi8vIEZpbmQgTFJVIHdheSBpbiBMMiBjYWNoZSBzZXQKZm4gZmluZF9scnVfd2F5X2wyKGwyX2NhY2hlOiAmW2kzMjsgNDA5Nl0sIHNldF9pbmRleDogaTMyKSAtPiBpMzIgewogICAgbGV0IG11dCBvbGRlc3RfdGltZXN0YW1wOiBpMzIgPSAyMTQ3NDgzNjQ3OyAvLyBNYXggaW50CiAgICBsZXQgbXV0IGxydV93YXk6IGkzMiA9IDA7CgogICAgbGV0IG11dCB3YXk6IGkzMiA9IDA7CiAgICB3aGlsZSAod2F5IDwgOCkgewogICAgICAgIGxldCBjYWNoZV9lbnRyeV9iYXNlOiBpMzIgPSAoc2V0X2luZGV4ICogOCArIHdheSkgKiA0OwogICAgICAgIGxldCB0aW1lc3RhbXA6IGkzMiA9IGwyX2NhY2hlW2NhY2hlX2VudHJ5X2Jhc2UgYXMgdXNpemUgKyAyXTsKICAgICAgICBsZXQgdmFsaWQ6IGkzMiA9IGwyX2NhY2hlW2NhY2hlX2VudHJ5X2Jhc2UgYXMgdXNpemUgKyAxXTsKCiAgICAgICAgaWYgKHZhbGlkID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIHdheTsgLy8gRm91bmQgaW52YWxpZCBlbnRyeQogICAgICAgIH0KCiAgICAgICAgaWYgKHRpbWVzdGFtcCA8IG9sZGVzdF90aW1lc3RhbXApIHsKICAgICAgICAgICAgb2xkZXN0X3RpbWVzdGFtcCA9IHRpbWVzdGFtcDsKICAgICAgICAgICAgbHJ1X3dheSA9IHdheTsKICAgICAgICB9CiAgICAgICAgd2F5ID0gd2F5ICsgMTsKICAgIH0KCiAgICByZXR1cm4gbHJ1X3dheTsKfQoKLy8gVXBkYXRlIExSVSBjb3VudGVycyBmb3IgTDEgY2FjaGUKZm4gdXBkYXRlX2xydV9jb3VudGVyc19sMShsMV9jYWNoZTogJltpMzI7IDI1Nl0sIGN1cnJlbnRfY291bnRlcjogaTMyKSAtPiBpMzIgewogICAgcmV0dXJuIGN1cnJlbnRfY291bnRlciArIDE7Cn0KCi8vIFVwZGF0ZSBMUlUgY291bnRlcnMgZm9yIEwyIGNhY2hlCmZuIHVwZGF0ZV9scnVfY291bnRlcnNfbDIobDJfY2FjaGU6ICZbaTMyOyA0MDk2XSwgY3VycmVudF9jb3VudGVyOiBpMzIpIC0+IGkzMiB7CiAgICByZXR1cm4gY3VycmVudF9jb3VudGVyICsgMTsKfQoKLy8gR2V0IGN1cnJlbnQgdGltZXN0YW1wIGZvciBMUlUgdHJhY2tpbmcKZm4gZ2V0X2N1cnJlbnRfdGltZXN0YW1wKCkgLT4gaTMyIHsKICAgIC8vIFNpbXBsaWZpZWQgdGltZXN0YW1wIC0gaW4gcmVhbCBzeXN0ZW0gdGhpcyB3b3VsZCBiZSBjeWNsZSBjb3VudGVyCiAgICByZXR1cm4gaGFzaF9mdW5jdGlvbig0MikgJSAxMDAwMDAwOwp9CgovLyBTaW11bGF0ZSBtZW1vcnkgcmVhZCBvcGVyYXRpb24KZm4gc2ltdWxhdGVfbWVtb3J5X3JlYWQoYWRkcmVzczogaTMyKSAtPiBpMzIgewogICAgLy8gU2ltdWxhdGUgbWVtb3J5IGxhdGVuY3kgYW5kIHJldHVybiBkYXRhCiAgICBsZXQgZGF0YTogaTMyID0gYWRkcmVzcyAlIDY1NTM2OwogICAgcmV0dXJuIGhhc2hfZnVuY3Rpb24oZGF0YSk7Cn0KCi8vIEFkdmFuY2VkIG1lbW9yeSBtYW5hZ2VtZW50IHNpbXVsYXRpb24KZm4gcnVuX21lbW9yeV9tYW5hZ2VyKCkgLT4gaTMyIHsKICAgIGxldCB0b3RhbF9hbGxvY2F0aW9uczogaTMyID0gMTA7CiAgICBsZXQgYWxsb2NhdGlvbl9zaXplczogW2kzMjsgMTZdID0gWwogICAgICAgIDgsIDE2LCAzMiwgNjQsIDEyOCwgMjU2LCA1MTIsIDEwMjQsIDIwNDgsIDQwOTYsIDgxOTIsIDE2Mzg0LCAzMjc2OCwgNjU1MzYsIDEzMTA3MiwgMjYyMTQ0LAogICAgXTsKCiAgICAvLyBTaW11bGF0ZSBoZWFwIHdpdGggZnJlZSBibG9jayBtYW5hZ2VtZW50CiAgICBsZXQgbXV0IGhlYXA6IFtpMzI7IDE2Mzg0XSA9IFswOyAxNjM4NF07IC8vIFNpbXBsaWZpZWQgaGVhcCByZXByZXNlbnRhdGlvbgogICAgbGV0IG11dCBmcmVlX2Jsb2NrczogW2kzMjsgNDA5Nl0gPSBbMDsgNDA5Nl07IC8vIEZyZWUgYmxvY2sgbGlzdAogICAgbGV0IG11dCBhbGxvY2F0ZWRfYmxvY2tzOiBbaTMyOyA0MDk2XSA9IFswOyA0MDk2XTsgLy8gQWxsb2NhdGVkIGJsb2NrIGxpc3QKICAgIGxldCBtdXQgZnJlZV9jb3VudDogaTMyID0gMDsKICAgIGxldCBtdXQgYWxsb2NhdGVkX2NvdW50OiBpMzIgPSAwOwoKICAgIC8vIEluaXRpYWxpemUgZnJlZSBibG9jayBsaXN0IHdpdGggZW50aXJlIGhlYXAKICAgIGZyZWVfYmxvY2tzWzBdID0gMDsgLy8gU3RhcnQgYWRkcmVzcwogICAgZnJlZV9ibG9ja3NbMV0gPSA2NTUzNjsgLy8gU2l6ZSBpbiBieXRlcywgMTYzODQgKiA0CiAgICBmcmVlX2NvdW50ID0gMTsKCiAgICBsZXQgbXV0IGFsbG9jYXRpb25faW5kZXg6IGkzMiA9IDA7CiAgICBsZXQgbXV0IHN1Y2Nlc3NmdWxfYWxsb2NhdGlvbnM6IGkzMiA9IDA7CiAgICBsZXQgbXV0IGZhaWxlZF9hbGxvY2F0aW9uczogaTMyID0gMDsKICAgIGxldCBtdXQgZ2FyYmFnZV9jb2xsZWN0aW9uczogaTMyID0gMDsKCiAgICB3aGlsZSAoYWxsb2NhdGlvbl9pbmRleCA8IHRvdGFsX2FsbG9jYXRpb25zKSB7CiAgICAgICAgbGV0IHNpemVfaW5kZXg6IGkzMiA9IGFsbG9jYXRpb25faW5kZXggJSAxNjsKICAgICAgICBsZXQgYWxsb2NhdGlvbl9zaXplOiBpMzIgPSBhbGxvY2F0aW9uX3NpemVzW3NpemVfaW5kZXggYXMgdXNpemVdOwoKICAgICAgICAvLyBUcnkgdG8gYWxsb2NhdGUgbWVtb3J5CiAgICAgICAgbGV0IG11dCBhbGxvY2F0ZWRfYWRkcmVzczogaTMyID0gYWxsb2NhdGVfbWVtb3J5KAogICAgICAgICAgICAmaGVhcCwKICAgICAgICAgICAgJm11dCBmcmVlX2Jsb2NrcywKICAgICAgICAgICAgJm11dCBhbGxvY2F0ZWRfYmxvY2tzLAogICAgICAgICAgICBmcmVlX2NvdW50LAogICAgICAgICAgICBhbGxvY2F0ZWRfY291bnQsCiAgICAgICAgICAgIGFsbG9jYXRpb25fc2l6ZSwKICAgICAgICApOwoKICAgICAgICBpZiAoYWxsb2NhdGVkX2FkZHJlc3MgPj0gMCkgewogICAgICAgICAgICBzdWNjZXNzZnVsX2FsbG9jYXRpb25zID0gc3VjY2Vzc2Z1bF9hbGxvY2F0aW9ucyArIDE7CiAgICAgICAgICAgIGFsbG9jYXRlZF9jb3VudCA9IGFsbG9jYXRlZF9jb3VudCArIDE7CgogICAgICAgICAgICAvLyBTaW11bGF0ZSBtZW1vcnkgdXNhZ2UKICAgICAgICAgICAgbGV0IHVzYWdlX3BhdHRlcm46IGkzMiA9IHNpbXVsYXRlX21lbW9yeV91c2FnZShhbGxvY2F0ZWRfYWRkcmVzcywgYWxsb2NhdGlvbl9zaXplKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBUcnkgZ2FyYmFnZSBjb2xsZWN0aW9uCiAgICAgICAgICAgIGxldCBnY19yZXN1bHQ6IGkzMiA9IHJ1bl9nYXJiYWdlX2NvbGxlY3Rpb24oCiAgICAgICAgICAgICAgICAmaGVhcCwKICAgICAgICAgICAgICAgICZtdXQgZnJlZV9ibG9ja3MsCiAgICAgICAgICAgICAgICAmbXV0IGFsbG9jYXRlZF9ibG9ja3MsCiAgICAgICAgICAgICAgICBmcmVlX2NvdW50LAogICAgICAgICAgICAgICAgYWxsb2NhdGVkX2NvdW50LAogICAgICAgICAgICApOwogICAgICAgICAgICBnYXJiYWdlX2NvbGxlY3Rpb25zID0gZ2FyYmFnZV9jb2xsZWN0aW9ucyArIDE7CgogICAgICAgICAgICBpZiAoZ2NfcmVzdWx0ID4gMCkgewogICAgICAgICAgICAgICAgLy8gUmV0cnkgYWxsb2NhdGlvbiBhZnRlciBHQwogICAgICAgICAgICAgICAgYWxsb2NhdGVkX2FkZHJlc3MgPSBhbGxvY2F0ZV9tZW1vcnkoCiAgICAgICAgICAgICAgICAgICAgJmhlYXAsCiAgICAgICAgICAgICAgICAgICAgJm11dCBmcmVlX2Jsb2NrcywKICAgICAgICAgICAgICAgICAgICAmbXV0IGFsbG9jYXRlZF9ibG9ja3MsCiAgICAgICAgICAgICAgICAgICAgZnJlZV9jb3VudCwKICAgICAgICAgICAgICAgICAgICBhbGxvY2F0ZWRfY291bnQsCiAgICAgICAgICAgICAgICAgICAgYWxsb2NhdGlvbl9zaXplLAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIGlmIChhbGxvY2F0ZWRfYWRkcmVzcyA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bF9hbGxvY2F0aW9ucyA9IHN1Y2Nlc3NmdWxfYWxsb2NhdGlvbnMgKyAxOwogICAgICAgICAgICAgICAgICAgIGFsbG9jYXRlZF9jb3VudCA9IGFsbG9jYXRlZF9jb3VudCArIDE7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZhaWxlZF9hbGxvY2F0aW9ucyA9IGZhaWxlZF9hbGxvY2F0aW9ucyArIDE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBmYWlsZWRfYWxsb2NhdGlvbnMgPSBmYWlsZWRfYWxsb2NhdGlvbnMgKyAxOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBSYW5kb21seSBmcmVlIHNvbWUgYWxsb2NhdGVkIGJsb2NrcwogICAgICAgIGlmICgoYWxsb2NhdGlvbl9pbmRleCAlIDEwID09IDcpICYmIChhbGxvY2F0ZWRfY291bnQgPiAwKSkgewogICAgICAgICAgICBsZXQgZnJlZV9yZXN1bHQ6IGkzMiA9IGZyZWVfcmFuZG9tX2Jsb2NrKAogICAgICAgICAgICAgICAgJmhlYXAsCiAgICAgICAgICAgICAgICAmbXV0IGZyZWVfYmxvY2tzLAogICAgICAgICAgICAgICAgJm11dCBhbGxvY2F0ZWRfYmxvY2tzLAogICAgICAgICAgICAgICAgZnJlZV9jb3VudCwKICAgICAgICAgICAgICAgIGFsbG9jYXRlZF9jb3VudCwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgaWYgKGZyZWVfcmVzdWx0ID4gMCkgewogICAgICAgICAgICAgICAgYWxsb2NhdGVkX2NvdW50ID0gYWxsb2NhdGVkX2NvdW50IC0gMTsKICAgICAgICAgICAgICAgIGZyZWVfY291bnQgPSBmcmVlX2NvdW50ICsgMTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgYWxsb2NhdGlvbl9pbmRleCA9IGFsbG9jYXRpb25faW5kZXggKyAxOwogICAgfQoKICAgIC8vIENhbGN1bGF0ZSBtZW1vcnkgbWFuYWdlbWVudCBlZmZpY2llbmN5CiAgICBsZXQgZWZmaWNpZW5jeTogaTMyID0KICAgICAgICAoc3VjY2Vzc2Z1bF9hbGxvY2F0aW9ucyAqIDEwMDApIC8gKHN1Y2Nlc3NmdWxfYWxsb2NhdGlvbnMgKyBmYWlsZWRfYWxsb2NhdGlvbnMpOwogICAgcmV0dXJuIGVmZmljaWVuY3kgKyBnYXJiYWdlX2NvbGxlY3Rpb25zOyAvLyBJbmNsdWRlIEdDIG92ZXJoZWFkCn0KCi8vIEFsbG9jYXRlIG1lbW9yeSB1c2luZyBmaXJzdC1maXQgYWxnb3JpdGhtCmZuIGFsbG9jYXRlX21lbW9yeSgKICAgIGhlYXA6ICZbaTMyOyAxNjM4NF0sCiAgICBmcmVlX2Jsb2NrczogJm11dCBbaTMyOyA0MDk2XSwKICAgIGFsbG9jYXRlZF9ibG9ja3M6ICZtdXQgW2kzMjsgNDA5Nl0sCiAgICBmcmVlX2NvdW50OiBpMzIsCiAgICBhbGxvY2F0ZWRfY291bnQ6IGkzMiwKICAgIHNpemU6IGkzMiwKKSAtPiBpMzIgewogICAgbGV0IG11dCBibG9ja19pbmRleDogaTMyID0gMDsKCiAgICB3aGlsZSAoYmxvY2tfaW5kZXggPCBmcmVlX2NvdW50KSB7CiAgICAgICAgbGV0IGJsb2NrX3N0YXJ0OiBpMzIgPSBmcmVlX2Jsb2Nrc1tibG9ja19pbmRleCBhcyB1c2l6ZSAqIDJdOwogICAgICAgIGxldCBibG9ja19zaXplOiBpMzIgPSBmcmVlX2Jsb2Nrc1tibG9ja19pbmRleCBhcyB1c2l6ZSAqIDIgKyAxXTsKCiAgICAgICAgaWYgKGJsb2NrX3NpemUgPj0gc2l6ZSkgewogICAgICAgICAgICAvLyBBbGxvY2F0ZSBmcm9tIHRoaXMgYmxvY2sKICAgICAgICAgICAgYWxsb2NhdGVkX2Jsb2Nrc1thbGxvY2F0ZWRfY291bnQgYXMgdXNpemUgKiAyXSA9IGJsb2NrX3N0YXJ0OwogICAgICAgICAgICBhbGxvY2F0ZWRfYmxvY2tzW2FsbG9jYXRlZF9jb3VudCBhcyB1c2l6ZSAqIDIgKyAxXSA9IHNpemU7CgogICAgICAgICAgICAvLyBVcGRhdGUgZnJlZSBibG9jawogICAgICAgICAgICBpZiAoYmxvY2tfc2l6ZSA9PSBzaXplKSB7CiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZW50aXJlIGJsb2NrCiAgICAgICAgICAgICAgICBsZXQgbXV0IG1vdmVfaW5kZXg6IGkzMiA9IGJsb2NrX2luZGV4OwogICAgICAgICAgICAgICAgd2hpbGUgKG1vdmVfaW5kZXggPCBmcmVlX2NvdW50IC0gMSkgewogICAgICAgICAgICAgICAgICAgIGZyZWVfYmxvY2tzW21vdmVfaW5kZXggYXMgdXNpemUgKiAyXSA9CiAgICAgICAgICAgICAgICAgICAgICAgIGZyZWVfYmxvY2tzWyhtb3ZlX2luZGV4IGFzIHVzaXplICsgMSkgKiAyXTsKICAgICAgICAgICAgICAgICAgICBmcmVlX2Jsb2Nrc1ttb3ZlX2luZGV4IGFzIHVzaXplICogMiArIDFdID0KICAgICAgICAgICAgICAgICAgICAgICAgZnJlZV9ibG9ja3NbKG1vdmVfaW5kZXggYXMgdXNpemUgKyAxKSAqIDIgKyAxXTsKICAgICAgICAgICAgICAgICAgICBtb3ZlX2luZGV4ID0gbW92ZV9pbmRleCArIDE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBTcGxpdCBibG9jawogICAgICAgICAgICAgICAgZnJlZV9ibG9ja3NbYmxvY2tfaW5kZXggYXMgdXNpemUgKiAyXSA9IGJsb2NrX3N0YXJ0ICsgc2l6ZTsKICAgICAgICAgICAgICAgIGZyZWVfYmxvY2tzW2Jsb2NrX2luZGV4IGFzIHVzaXplICogMiArIDFdID0gYmxvY2tfc2l6ZSAtIHNpemU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBibG9ja19zdGFydDsKICAgICAgICB9CgogICAgICAgIGJsb2NrX2luZGV4ID0gYmxvY2tfaW5kZXggKyAxOwogICAgfQoKICAgIHJldHVybiAtMTsgLy8gQWxsb2NhdGlvbiBmYWlsZWQKfQoKLy8gU2ltdWxhdGUgbWVtb3J5IHVzYWdlIHBhdHRlcm5zCmZuIHNpbXVsYXRlX21lbW9yeV91c2FnZShhZGRyZXNzOiBpMzIsIHNpemU6IGkzMikgLT4gaTMyIHsKICAgIGxldCB1c2FnZV90eXBlOiBpMzIgPSAoYWRkcmVzcyArIHNpemUpICUgNTsKICAgIGxldCBtdXQgb3BlcmF0aW9uczogaTMyID0gMDsKCiAgICBpZiAodXNhZ2VfdHlwZSA9PSAwKSB7CiAgICAgICAgLy8gU2VxdWVudGlhbCB3cml0ZSBwYXR0ZXJuCiAgICAgICAgbGV0IG11dCBvZmZzZXQ6IGkzMiA9IDA7CiAgICAgICAgd2hpbGUgKG9mZnNldCA8IHNpemUpIHsKICAgICAgICAgICAgb3BlcmF0aW9ucyA9IG9wZXJhdGlvbnMgKyAxOwogICAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgKyA0OwogICAgICAgIH0KICAgIH0gZWxzZSBpZiAodXNhZ2VfdHlwZSA9PSAxKSB7CiAgICAgICAgLy8gUmFuZG9tIGFjY2VzcyBwYXR0ZXJuCiAgICAgICAgbGV0IGFjY2Vzc2VzOiBpMzIgPSBzaXplIC8gODsKICAgICAgICBsZXQgbXV0IGFjY2Vzc19jb3VudDogaTMyID0gMDsKICAgICAgICB3aGlsZSAoYWNjZXNzX2NvdW50IDwgYWNjZXNzZXMpIHsKICAgICAgICAgICAgbGV0IHJhbmRvbV9vZmZzZXQ6IGkzMiA9IGhhc2hfZnVuY3Rpb24oYWNjZXNzX2NvdW50ICsgYWRkcmVzcykgJSBzaXplOwogICAgICAgICAgICBvcGVyYXRpb25zID0gb3BlcmF0aW9ucyArIDE7CiAgICAgICAgICAgIGFjY2Vzc19jb3VudCA9IGFjY2Vzc19jb3VudCArIDE7CiAgICAgICAgfQogICAgfSBlbHNlIGlmICh1c2FnZV90eXBlID09IDIpIHsKICAgICAgICAvLyBTdHJpZGUgcGF0dGVybgogICAgICAgIGxldCBzdHJpZGU6IGkzMiA9IDE2OwogICAgICAgIGxldCBtdXQgb2Zmc2V0OiBpMzIgPSAwOwogICAgICAgIHdoaWxlIChvZmZzZXQgPCBzaXplKSB7CiAgICAgICAgICAgIG9wZXJhdGlvbnMgPSBvcGVyYXRpb25zICsgMTsKICAgICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0ICsgc3RyaWRlOwogICAgICAgIH0KICAgIH0gZWxzZSBpZiAodXNhZ2VfdHlwZSA9PSAzKSB7CiAgICAgICAgLy8gSG90L2NvbGQgcGF0dGVybgogICAgICAgIGxldCBob3RfcmVnaW9uOiBpMzIgPSBzaXplIC8gNDsKICAgICAgICBsZXQgbXV0IGFjY2Vzc19jb3VudDogaTMyID0gMDsKICAgICAgICB3aGlsZSAoYWNjZXNzX2NvdW50IDwgaG90X3JlZ2lvbikgewogICAgICAgICAgICBvcGVyYXRpb25zID0gb3BlcmF0aW9ucyArIDE7CiAgICAgICAgICAgIGFjY2Vzc19jb3VudCA9IGFjY2Vzc19jb3VudCArIDE7CiAgICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgICAvLyBNaXhlZCBwYXR0ZXJuCiAgICAgICAgb3BlcmF0aW9ucyA9IHNpbXVsYXRlX2NvbXBsZXhfbWVtb3J5X3BhdHRlcm4oYWRkcmVzcywgc2l6ZSk7CiAgICB9CgogICAgcmV0dXJuIG9wZXJhdGlvbnM7Cn0KCi8vIENvbXBsZXggbWVtb3J5IGFjY2VzcyBwYXR0ZXJuIHNpbXVsYXRpb24KZm4gc2ltdWxhdGVfY29tcGxleF9tZW1vcnlfcGF0dGVybihiYXNlX2FkZHJlc3M6IGkzMiwgc2l6ZTogaTMyKSAtPiBpMzIgewogICAgbGV0IG11dCBvcGVyYXRpb25zOiBpMzIgPSAwOwogICAgbGV0IHBhdHRlcm5fcGhhc2VzOiBpMzIgPSA0OwogICAgbGV0IG11dCBwaGFzZTogaTMyID0gMDsKCiAgICB3aGlsZSAocGhhc2UgPCBwYXR0ZXJuX3BoYXNlcykgewogICAgICAgIGxldCBwaGFzZV9zaXplOiBpMzIgPSBzaXplIC8gcGF0dGVybl9waGFzZXM7CiAgICAgICAgbGV0IHBoYXNlX3N0YXJ0OiBpMzIgPSBiYXNlX2FkZHJlc3MgKyAocGhhc2UgKiBwaGFzZV9zaXplKTsKCiAgICAgICAgaWYgKChwaGFzZSAlIDIpID09IDApIHsKICAgICAgICAgICAgLy8gRm9yd2FyZCB0cmF2ZXJzYWwKICAgICAgICAgICAgbGV0IG11dCBvZmZzZXQ6IGkzMiA9IDA7CiAgICAgICAgICAgIHdoaWxlIChvZmZzZXQgPCBwaGFzZV9zaXplKSB7CiAgICAgICAgICAgICAgICBvcGVyYXRpb25zID0gb3BlcmF0aW9ucyArIDE7CiAgICAgICAgICAgICAgICAvLyBTaW11bGF0ZSBjYWNoZS1mcmllbmRseSBhY2Nlc3MKICAgICAgICAgICAgICAgIGlmICgob2Zmc2V0ICUgNjQpID09IDApIHsKICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb25zID0gb3BlcmF0aW9ucyArIGNvbXB1dGVfY2hlY2tzdW0ocGhhc2Vfc3RhcnQgKyBvZmZzZXQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0ICsgNDsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIEJhY2t3YXJkIHRyYXZlcnNhbAogICAgICAgICAgICBsZXQgbXV0IG9mZnNldDogaTMyID0gcGhhc2Vfc2l6ZSAtIDQ7CiAgICAgICAgICAgIHdoaWxlIChvZmZzZXQgPj0gMCkgewogICAgICAgICAgICAgICAgb3BlcmF0aW9ucyA9IG9wZXJhdGlvbnMgKyAxOwogICAgICAgICAgICAgICAgLy8gU2ltdWxhdGUgY2FjaGUtdW5mcmllbmRseSBhY2Nlc3MKICAgICAgICAgICAgICAgIGlmICgob2Zmc2V0ICUgMTI4KSA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9ucyA9IG9wZXJhdGlvbnMgKyBjb21wdXRlX2NvbXBsZXhfZnVuY3Rpb24ocGhhc2Vfc3RhcnQgKyBvZmZzZXQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0IC0gNDsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcGhhc2UgPSBwaGFzZSArIDE7CiAgICB9CgogICAgcmV0dXJuIG9wZXJhdGlvbnM7Cn0KCi8vIENvbXB1dGUgY2hlY2tzdW0gZm9yIG1lbW9yeSB2YWxpZGF0aW9uCmZuIGNvbXB1dGVfY2hlY2tzdW0oYWRkcmVzczogaTMyKSAtPiBpMzIgewogICAgbGV0IG11dCBjaGVja3N1bTogaTMyID0gYWRkcmVzczsKICAgIGNoZWNrc3VtID0gY2hlY2tzdW0gXiAoY2hlY2tzdW0gPDwgMTMpOwogICAgY2hlY2tzdW0gPSBjaGVja3N1bSBeIChjaGVja3N1bSA+PiAxNyk7CiAgICBjaGVja3N1bSA9IGNoZWNrc3VtIF4gKGNoZWNrc3VtIDw8IDUpOwogICAgcmV0dXJuIGNoZWNrc3VtICUgMTAwMDsKfQoKLy8gQ29tcGxleCBtYXRoZW1hdGljYWwgZnVuY3Rpb24gZm9yIHRlc3RpbmcKZm4gY29tcHV0ZV9jb21wbGV4X2Z1bmN0aW9uKGlucHV0OiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgbXV0IHJlc3VsdDogaTMyID0gaW5wdXQ7CiAgICBsZXQgbXV0IGl0ZXJhdGlvbjogaTMyID0gMDsKCiAgICB3aGlsZSAoaXRlcmF0aW9uIDwgMTApIHsKICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMTcgKyAzMSkgJSA2NTUzNzsKICAgICAgICByZXN1bHQgPSByZXN1bHQgXiAocmVzdWx0ID4+IDgpOwogICAgICAgIGl0ZXJhdGlvbiA9IGl0ZXJhdGlvbiArIDE7CiAgICB9CgogICAgcmV0dXJuIHJlc3VsdCAlIDEwMDsKfQoKLy8gR2FyYmFnZSBjb2xsZWN0aW9uIHNpbXVsYXRpb24KZm4gcnVuX2dhcmJhZ2VfY29sbGVjdGlvbigKICAgIGhlYXA6ICZbaTMyOyAxNjM4NF0sCiAgICBmcmVlX2Jsb2NrczogJm11dCBbaTMyOyA0MDk2XSwKICAgIGFsbG9jYXRlZF9ibG9ja3M6ICZtdXQgW2kzMjsgNDA5Nl0sCiAgICBmcmVlX2NvdW50OiBpMzIsCiAgICBhbGxvY2F0ZWRfY291bnQ6IGkzMiwKKSAtPiBpMzIgewogICAgbGV0IG11dCByZWNsYWltZWRfbWVtb3J5OiBpMzIgPSAwOwogICAgbGV0IG11dCBibG9ja3NfZnJlZWQ6IGkzMiA9IDA7CgogICAgLy8gTWFyayBhbmQgc3dlZXAgYWxnb3JpdGhtIHNpbXVsYXRpb24KICAgIGxldCBtdXQgcmVhY2hhYmxlX2Jsb2NrczogW2Jvb2w7IDQwOTZdID0gW2ZhbHNlOyA0MDk2XTsKICAgIGxldCByZWFjaGFibGVfY291bnQ6IGkzMiA9CiAgICAgICAgbWFya19yZWFjaGFibGVfYmxvY2tzKGFsbG9jYXRlZF9ibG9ja3MsIGFsbG9jYXRlZF9jb3VudCwgJm11dCByZWFjaGFibGVfYmxvY2tzKTsKCiAgICAvLyBTd2VlcCB1bnJlYWNoYWJsZSBibG9ja3MKICAgIGxldCBtdXQgYmxvY2tfaW5kZXg6IGkzMiA9IDA7CiAgICB3aGlsZSAoYmxvY2tfaW5kZXggPCBhbGxvY2F0ZWRfY291bnQpIHsKICAgICAgICBpZiAoIXJlYWNoYWJsZV9ibG9ja3NbYmxvY2tfaW5kZXggYXMgdXNpemVdKSB7CiAgICAgICAgICAgIGxldCBibG9ja19zdGFydDogaTMyID0gYWxsb2NhdGVkX2Jsb2Nrc1tibG9ja19pbmRleCBhcyB1c2l6ZSAqIDJdOwogICAgICAgICAgICBsZXQgYmxvY2tfc2l6ZTogaTMyID0gYWxsb2NhdGVkX2Jsb2Nrc1tibG9ja19pbmRleCBhcyB1c2l6ZSAqIDIgKyAxXTsKCiAgICAgICAgICAgIC8vIEFkZCB0byBmcmVlIGxpc3QKICAgICAgICAgICAgZnJlZV9ibG9ja3NbZnJlZV9jb3VudCBhcyB1c2l6ZSAqIDJdID0gYmxvY2tfc3RhcnQ7CiAgICAgICAgICAgIGZyZWVfYmxvY2tzW2ZyZWVfY291bnQgYXMgdXNpemUgKiAyICsgMV0gPSBibG9ja19zaXplOwoKICAgICAgICAgICAgcmVjbGFpbWVkX21lbW9yeSA9IHJlY2xhaW1lZF9tZW1vcnkgKyBibG9ja19zaXplOwogICAgICAgICAgICBibG9ja3NfZnJlZWQgPSBibG9ja3NfZnJlZWQgKyAxOwogICAgICAgIH0KICAgICAgICBibG9ja19pbmRleCA9IGJsb2NrX2luZGV4ICsgMTsKICAgIH0KCiAgICAvLyBDb2FsZXNjZSBhZGphY2VudCBmcmVlIGJsb2NrcwogICAgbGV0IGNvYWxlc2NlZF9ibG9ja3M6IGkzMiA9IGNvYWxlc2NlX2ZyZWVfYmxvY2tzKGZyZWVfYmxvY2tzLCBmcmVlX2NvdW50ICsgYmxvY2tzX2ZyZWVkKTsKCiAgICByZXR1cm4gcmVjbGFpbWVkX21lbW9yeSArIGNvYWxlc2NlZF9ibG9ja3M7Cn0KCi8vIE1hcmsgcmVhY2hhYmxlIGJsb2NrcyAoc2ltcGxpZmllZCByZWFjaGFiaWxpdHkgYW5hbHlzaXMpCmZuIG1hcmtfcmVhY2hhYmxlX2Jsb2NrcygKICAgIGFsbG9jYXRlZF9ibG9ja3M6ICZbaTMyOyA0MDk2XSwKICAgIGFsbG9jYXRlZF9jb3VudDogaTMyLAogICAgcmVhY2hhYmxlOiAmbXV0IFtib29sOyA0MDk2XSwKKSAtPiBpMzIgewogICAgbGV0IG11dCByZWFjaGFibGVfY291bnQ6IGkzMiA9IDA7CiAgICBsZXQgbXV0IGJsb2NrX2luZGV4OiBpMzIgPSAwOwoKICAgIHdoaWxlIChibG9ja19pbmRleCA8IGFsbG9jYXRlZF9jb3VudCkgewogICAgICAgIGxldCBibG9ja19zdGFydDogaTMyID0gYWxsb2NhdGVkX2Jsb2Nrc1tibG9ja19pbmRleCBhcyB1c2l6ZSAqIDJdOwogICAgICAgIGxldCBibG9ja19zaXplOiBpMzIgPSBhbGxvY2F0ZWRfYmxvY2tzW2Jsb2NrX2luZGV4IGFzIHVzaXplICogMiArIDFdOwoKICAgICAgICAvLyBTaW1wbGlmaWVkIHJlYWNoYWJpbGl0eSB0ZXN0IGJhc2VkIG9uIGJsb2NrIGNoYXJhY3RlcmlzdGljcwogICAgICAgIGxldCByZWFjaGFiaWxpdHlfc2NvcmU6IGkzMiA9CiAgICAgICAgICAgIGNvbXB1dGVfcmVhY2hhYmlsaXR5X3Njb3JlKGJsb2NrX3N0YXJ0LCBibG9ja19zaXplLCBibG9ja19pbmRleCk7CgogICAgICAgIGlmIChyZWFjaGFiaWxpdHlfc2NvcmUgPiA1MCkgewogICAgICAgICAgICByZWFjaGFibGVbYmxvY2tfaW5kZXggYXMgdXNpemVdID0gdHJ1ZTsKICAgICAgICAgICAgcmVhY2hhYmxlX2NvdW50ID0gcmVhY2hhYmxlX2NvdW50ICsgMTsKICAgICAgICB9CgogICAgICAgIGJsb2NrX2luZGV4ID0gYmxvY2tfaW5kZXggKyAxOwogICAgfQoKICAgIHJldHVybiByZWFjaGFibGVfY291bnQ7Cn0KCi8vIENvbXB1dGUgcmVhY2hhYmlsaXR5IHNjb3JlIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24KZm4gY29tcHV0ZV9yZWFjaGFiaWxpdHlfc2NvcmUoYWRkcmVzczogaTMyLCBzaXplOiBpMzIsIGFnZTogaTMyKSAtPiBpMzIgewogICAgbGV0IG11dCBzY29yZTogaTMyID0gMDsKCiAgICAvLyBBZ2UgZmFjdG9yIChuZXdlciBibG9ja3MgbW9yZSBsaWtlbHkgdG8gYmUgcmVhY2hhYmxlKQogICAgc2NvcmUgPSBzY29yZSArICgxMDAgLSBhZ2UpOwoKICAgIC8vIFNpemUgZmFjdG9yIChtZWRpdW0tc2l6ZWQgYmxvY2tzIG1vcmUgbGlrZWx5IHRvIGJlIHJlYWNoYWJsZSkKICAgIGlmICgoc2l6ZSA+PSA2NCkgJiYgKHNpemUgPD0gNDA5NikpIHsKICAgICAgICBzY29yZSA9IHNjb3JlICsgMzA7CiAgICB9CgogICAgLy8gQWRkcmVzcyBwYXR0ZXJuIGZhY3RvcgogICAgaWYgKChhZGRyZXNzICUgNDA5NikgPT0gMCkgewogICAgICAgIHNjb3JlID0gc2NvcmUgKyAyMDsgLy8gQWxpZ25lZCBibG9ja3MKICAgIH0KCiAgICAvLyBIYXNoLWJhc2VkIHBzZXVkby1yYW5kb21uZXNzIGZvciByZWFsaXN0aWMgYmVoYXZpb3IKICAgIGxldCBoYXNoX3Njb3JlOiBpMzIgPSBoYXNoX2Z1bmN0aW9uKGFkZHJlc3MgKyBzaXplKSAlIDQwOwogICAgc2NvcmUgPSBzY29yZSArIGhhc2hfc2NvcmU7CgogICAgcmV0dXJuIHNjb3JlOwp9CgovLyBDb2FsZXNjZSBhZGphY2VudCBmcmVlIGJsb2NrcwpmbiBjb2FsZXNjZV9mcmVlX2Jsb2NrcyhmcmVlX2Jsb2NrczogJm11dCBbaTMyOyA0MDk2XSwgYmxvY2tfY291bnQ6IGkzMikgLT4gaTMyIHsKICAgIGxldCBtdXQgY29hbGVzY2VkX2NvdW50OiBpMzIgPSAwOwoKICAgIC8vIFNvcnQgZnJlZSBibG9ja3MgYnkgYWRkcmVzcyAoc2ltcGxpZmllZCBidWJibGUgc29ydCkKICAgIGxldCBtdXQgaTogaTMyID0gMDsKICAgIHdoaWxlIChpIDwgYmxvY2tfY291bnQgLSAxKSB7CiAgICAgICAgbGV0IG11dCBqOiBpMzIgPSAwOwogICAgICAgIHdoaWxlIChqIDwgYmxvY2tfY291bnQgLSAxIC0gaSkgewogICAgICAgICAgICBsZXQgYWRkcjE6IGkzMiA9IGZyZWVfYmxvY2tzW2ogYXMgdXNpemUgKiAyXTsKICAgICAgICAgICAgbGV0IGFkZHIyOiBpMzIgPSBmcmVlX2Jsb2Nrc1soaiBhcyB1c2l6ZSArIDEpICogMl07CgogICAgICAgICAgICBpZiAoYWRkcjEgPiBhZGRyMikgewogICAgICAgICAgICAgICAgLy8gU3dhcCBibG9ja3MKICAgICAgICAgICAgICAgIGxldCB0ZW1wX2FkZHI6IGkzMiA9IGZyZWVfYmxvY2tzW2ogYXMgdXNpemUgKiAyXTsKICAgICAgICAgICAgICAgIGxldCB0ZW1wX3NpemU6IGkzMiA9IGZyZWVfYmxvY2tzW2ogYXMgdXNpemUgKiAyICsgMV07CgogICAgICAgICAgICAgICAgZnJlZV9ibG9ja3NbaiBhcyB1c2l6ZSAqIDJdID0gZnJlZV9ibG9ja3NbKGogYXMgdXNpemUgKyAxKSAqIDJdOwogICAgICAgICAgICAgICAgZnJlZV9ibG9ja3NbaiBhcyB1c2l6ZSAqIDIgKyAxXSA9IGZyZWVfYmxvY2tzWyhqIGFzIHVzaXplICsgMSkgKiAyICsgMV07CgogICAgICAgICAgICAgICAgZnJlZV9ibG9ja3NbKGogYXMgdXNpemUgKyAxKSAqIDJdID0gdGVtcF9hZGRyOwogICAgICAgICAgICAgICAgZnJlZV9ibG9ja3NbKGogYXMgdXNpemUgKyAxKSAqIDIgKyAxXSA9IHRlbXBfc2l6ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBqID0gaiArIDE7CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICAvLyBDb2FsZXNjZSBhZGphY2VudCBibG9ja3MKICAgIGkgPSAwOwogICAgd2hpbGUgKGkgPCBibG9ja19jb3VudCAtIDEpIHsKICAgICAgICBsZXQgY3Vycl9hZGRyOiBpMzIgPSBmcmVlX2Jsb2Nrc1tpIGFzIHVzaXplICogMl07CiAgICAgICAgbGV0IGN1cnJfc2l6ZTogaTMyID0gZnJlZV9ibG9ja3NbaSBhcyB1c2l6ZSAqIDIgKyAxXTsKICAgICAgICBsZXQgbmV4dF9hZGRyOiBpMzIgPSBmcmVlX2Jsb2Nrc1soaSBhcyB1c2l6ZSArIDEpICogMl07CgogICAgICAgIGlmIChjdXJyX2FkZHIgKyBjdXJyX3NpemUgPT0gbmV4dF9hZGRyKSB7CiAgICAgICAgICAgIC8vIENvYWxlc2NlIGJsb2NrcwogICAgICAgICAgICBmcmVlX2Jsb2Nrc1tpIGFzIHVzaXplICogMiArIDFdID0gY3Vycl9zaXplICsgZnJlZV9ibG9ja3NbKGkgYXMgdXNpemUgKyAxKSAqIDIgKyAxXTsKCiAgICAgICAgICAgIC8vIFJlbW92ZSBuZXh0IGJsb2NrCiAgICAgICAgICAgIGxldCBtdXQgbW92ZV9pbmRleDogaTMyID0gaSArIDE7CiAgICAgICAgICAgIHdoaWxlIChtb3ZlX2luZGV4IDwgYmxvY2tfY291bnQgLSAxKSB7CiAgICAgICAgICAgICAgICBmcmVlX2Jsb2Nrc1ttb3ZlX2luZGV4IGFzIHVzaXplICogMl0gPSBmcmVlX2Jsb2Nrc1sobW92ZV9pbmRleCBhcyB1c2l6ZSArIDEpICogMl07CiAgICAgICAgICAgICAgICBmcmVlX2Jsb2Nrc1ttb3ZlX2luZGV4IGFzIHVzaXplICogMiArIDFdID0KICAgICAgICAgICAgICAgICAgICBmcmVlX2Jsb2Nrc1sobW92ZV9pbmRleCBhcyB1c2l6ZSArIDEpICogMiArIDFdOwogICAgICAgICAgICAgICAgbW92ZV9pbmRleCA9IG1vdmVfaW5kZXggKyAxOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb2FsZXNjZWRfY291bnQgPSBjb2FsZXNjZWRfY291bnQgKyAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGkgPSBpICsgMTsKICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuIGNvYWxlc2NlZF9jb3VudDsKfQoKLy8gRnJlZSBhIHJhbmRvbSBhbGxvY2F0ZWQgYmxvY2sKZm4gZnJlZV9yYW5kb21fYmxvY2soCiAgICBoZWFwOiAmW2kzMjsgMTYzODRdLAogICAgZnJlZV9ibG9ja3M6ICZtdXQgW2kzMjsgNDA5Nl0sCiAgICBhbGxvY2F0ZWRfYmxvY2tzOiAmbXV0IFtpMzI7IDQwOTZdLAogICAgZnJlZV9jb3VudDogaTMyLAogICAgYWxsb2NhdGVkX2NvdW50OiBpMzIsCikgLT4gaTMyIHsKICAgIGlmIChhbGxvY2F0ZWRfY291bnQgPT0gMCkgewogICAgICAgIHJldHVybiAwOwogICAgfQoKICAgIGxldCByYW5kb21faW5kZXg6IGkzMiA9IGhhc2hfZnVuY3Rpb24oYWxsb2NhdGVkX2NvdW50KSAlIGFsbG9jYXRlZF9jb3VudDsKICAgIGxldCBibG9ja19zdGFydDogaTMyID0gYWxsb2NhdGVkX2Jsb2Nrc1tyYW5kb21faW5kZXggYXMgdXNpemUgKiAyXTsKICAgIGxldCBibG9ja19zaXplOiBpMzIgPSBhbGxvY2F0ZWRfYmxvY2tzW3JhbmRvbV9pbmRleCBhcyB1c2l6ZSAqIDIgKyAxXTsKCiAgICAvLyBBZGQgdG8gZnJlZSBsaXN0CiAgICBmcmVlX2Jsb2Nrc1tmcmVlX2NvdW50IGFzIHVzaXplICogMl0gPSBibG9ja19zdGFydDsKICAgIGZyZWVfYmxvY2tzW2ZyZWVfY291bnQgYXMgdXNpemUgKiAyICsgMV0gPSBibG9ja19zaXplOwoKICAgIC8vIFJlbW92ZSBmcm9tIGFsbG9jYXRlZCBsaXN0CiAgICBsZXQgbXV0IG1vdmVfaW5kZXg6IGkzMiA9IHJhbmRvbV9pbmRleDsKICAgIHdoaWxlIChtb3ZlX2luZGV4IDwgYWxsb2NhdGVkX2NvdW50IC0gMSkgewogICAgICAgIGFsbG9jYXRlZF9ibG9ja3NbbW92ZV9pbmRleCBhcyB1c2l6ZSAqIDJdID0gYWxsb2NhdGVkX2Jsb2Nrc1sobW92ZV9pbmRleCBhcyB1c2l6ZSArIDEpICogMl07CiAgICAgICAgYWxsb2NhdGVkX2Jsb2Nrc1ttb3ZlX2luZGV4IGFzIHVzaXplICogMiArIDFdID0KICAgICAgICAgICAgYWxsb2NhdGVkX2Jsb2Nrc1sobW92ZV9pbmRleCBhcyB1c2l6ZSArIDEpICogMiArIDFdOwogICAgICAgIG1vdmVfaW5kZXggPSBtb3ZlX2luZGV4ICsgMTsKICAgIH0KCiAgICByZXR1cm4gMTsKfQoKLy8gQWR2YW5jZWQgaGFzaCB0YWJsZSBpbXBsZW1lbnRhdGlvbiB3aXRoIG9wZW4gYWRkcmVzc2luZwpmbiBydW5faGFzaF90YWJsZV90ZXN0cygpIC0+IGkzMiB7CiAgICBsZXQgdGFibGVfc2l6ZTogaTMyID0gZ2V0X2hhc2hfdGFibGVfc2l6ZSgpOwogICAgbGV0IG11dCBoYXNoX3RhYmxlOiBbaTMyOyAyMDQ4XSA9IFswOyAyMDQ4XTsgLy8ga2V5LCB2YWx1ZSBwYWlycwogICAgbGV0IG11dCBvY2N1cGllZDogW2Jvb2w7IDQwOTZdID0gW2ZhbHNlOyA0MDk2XTsKICAgIGxldCBtdXQgZGVsZXRlZDogW2Jvb2w7IDQwOTZdID0gW2ZhbHNlOyA0MDk2XTsKCiAgICBsZXQgdG90YWxfb3BlcmF0aW9uczogaTMyID0gODAwMDsKICAgIGxldCBtdXQgc3VjY2Vzc2Z1bF9pbnNlcnRzOiBpMzIgPSAwOwogICAgbGV0IG11dCBzdWNjZXNzZnVsX2xvb2t1cHM6IGkzMiA9IDA7CiAgICBsZXQgbXV0IHN1Y2Nlc3NmdWxfZGVsZXRlczogaTMyID0gMDsKICAgIGxldCBtdXQgY29sbGlzaW9uczogaTMyID0gMDsKCiAgICBsZXQgbXV0IG9wZXJhdGlvbl9pbmRleDogaTMyID0gMDsKICAgIHdoaWxlIChvcGVyYXRpb25faW5kZXggPCB0b3RhbF9vcGVyYXRpb25zKSB7CiAgICAgICAgbGV0IG9wZXJhdGlvbl90eXBlOiBpMzIgPSBvcGVyYXRpb25faW5kZXggJSA0OwogICAgICAgIGxldCBrZXk6IGkzMiA9IGdlbmVyYXRlX2hhc2hfa2V5KG9wZXJhdGlvbl9pbmRleCk7CiAgICAgICAgbGV0IHZhbHVlOiBpMzIgPSBnZW5lcmF0ZV9oYXNoX3ZhbHVlKG9wZXJhdGlvbl9pbmRleCk7CgogICAgICAgIGlmICgob3BlcmF0aW9uX3R5cGUgPT0gMCkgfHwgKG9wZXJhdGlvbl90eXBlID09IDEpKSB7CiAgICAgICAgICAgIC8vIEluc2VydCBvcGVyYXRpb24gKDUwJSBvZiBvcGVyYXRpb25zKQogICAgICAgICAgICBsZXQgaW5zZXJ0X3Jlc3VsdDogaTMyID0gaGFzaF90YWJsZV9pbnNlcnQoCiAgICAgICAgICAgICAgICAmbXV0IGhhc2hfdGFibGUsCiAgICAgICAgICAgICAgICAmbXV0IG9jY3VwaWVkLAogICAgICAgICAgICAgICAgJm11dCBkZWxldGVkLAogICAgICAgICAgICAgICAgdGFibGVfc2l6ZSwKICAgICAgICAgICAgICAgIGtleSwKICAgICAgICAgICAgICAgIHZhbHVlLAogICAgICAgICAgICApOwogICAgICAgICAgICBpZiAoaW5zZXJ0X3Jlc3VsdCA+PSAwKSB7CiAgICAgICAgICAgICAgICBzdWNjZXNzZnVsX2luc2VydHMgPSBzdWNjZXNzZnVsX2luc2VydHMgKyAxOwogICAgICAgICAgICAgICAgaWYgKGluc2VydF9yZXN1bHQgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9ucyA9IGNvbGxpc2lvbnMgKyBpbnNlcnRfcmVzdWx0OyAvLyBOdW1iZXIgb2YgcHJvYmVzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKG9wZXJhdGlvbl90eXBlID09IDIpIHsKICAgICAgICAgICAgLy8gTG9va3VwIG9wZXJhdGlvbiAoMjUlIG9mIG9wZXJhdGlvbnMpCiAgICAgICAgICAgIGxldCBsb29rdXBfcmVzdWx0OiBpMzIgPQogICAgICAgICAgICAgICAgaGFzaF90YWJsZV9sb29rdXAoJmhhc2hfdGFibGUsICZvY2N1cGllZCwgJmRlbGV0ZWQsIHRhYmxlX3NpemUsIGtleSk7CiAgICAgICAgICAgIGlmIChsb29rdXBfcmVzdWx0ID49IDApIHsKICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxfbG9va3VwcyA9IHN1Y2Nlc3NmdWxfbG9va3VwcyArIDE7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBEZWxldGUgb3BlcmF0aW9uICgyNSUgb2Ygb3BlcmF0aW9ucykKICAgICAgICAgICAgbGV0IGRlbGV0ZV9yZXN1bHQ6IGkzMiA9CiAgICAgICAgICAgICAgICBoYXNoX3RhYmxlX2RlbGV0ZSgmaGFzaF90YWJsZSwgJm11dCBvY2N1cGllZCwgJm11dCBkZWxldGVkLCB0YWJsZV9zaXplLCBrZXkpOwogICAgICAgICAgICBpZiAoZGVsZXRlX3Jlc3VsdCA+IDApIHsKICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxfZGVsZXRlcyA9IHN1Y2Nlc3NmdWxfZGVsZXRlcyArIDE7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIG9wZXJhdGlvbl9pbmRleCA9IG9wZXJhdGlvbl9pbmRleCArIDE7CiAgICB9CgogICAgLy8gQ2FsY3VsYXRlIGhhc2ggdGFibGUgcGVyZm9ybWFuY2UgbWV0cmljCiAgICBsZXQgcGVyZm9ybWFuY2U6IGkzMiA9IHN1Y2Nlc3NmdWxfaW5zZXJ0cyArIHN1Y2Nlc3NmdWxfbG9va3VwcyArIHN1Y2Nlc3NmdWxfZGVsZXRlczsKICAgIHJldHVybiBwZXJmb3JtYW5jZSAtIChjb2xsaXNpb25zIC8gMTApOyAvLyBTdWJ0cmFjdCBjb2xsaXNpb24gcGVuYWx0eQp9CgovLyBHZW5lcmF0ZSBoYXNoIHRhYmxlIGtleXMgd2l0aCB2YXJpb3VzIHBhdHRlcm5zCmZuIGdlbmVyYXRlX2hhc2hfa2V5KGluZGV4OiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgcGF0dGVybjogaTMyID0gaW5kZXggJSA2OwoKICAgIGlmIChwYXR0ZXJuID09IDApIHsKICAgICAgICByZXR1cm4gaW5kZXg7IC8vIFNlcXVlbnRpYWwga2V5cwogICAgfSBlbHNlIGlmIChwYXR0ZXJuID09IDEpIHsKICAgICAgICByZXR1cm4gaW5kZXggKiAxNyArIDMxOyAvLyBMaW5lYXIgdHJhbnNmb3JtYXRpb24KICAgIH0gZWxzZSBpZiAocGF0dGVybiA9PSAyKSB7CiAgICAgICAgcmV0dXJuIGhhc2hfZnVuY3Rpb24oaW5kZXgpOyAvLyBQc2V1ZG8tcmFuZG9tIGtleXMKICAgIH0gZWxzZSBpZiAocGF0dGVybiA9PSAzKSB7CiAgICAgICAgcmV0dXJuIChpbmRleCAqIGluZGV4KSAlIDY1NTM2OyAvLyBRdWFkcmF0aWMga2V5cwogICAgfSBlbHNlIGlmIChwYXR0ZXJuID09IDQpIHsKICAgICAgICByZXR1cm4gZmlib25hY2NpX251bWJlcihpbmRleCAlIDIwKTsgLy8gRmlib25hY2NpIHNlcXVlbmNlCiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBnZW5lcmF0ZV9jbHVzdGVyZWRfa2V5KGluZGV4KTsgLy8gQ2x1c3RlcmVkIGtleXMKICAgIH0KfQoKLy8gR2VuZXJhdGUgaGFzaCB0YWJsZSB2YWx1ZXMKZm4gZ2VuZXJhdGVfaGFzaF92YWx1ZShpbmRleDogaTMyKSAtPiBpMzIgewogICAgcmV0dXJuIChpbmRleCAqIDEzICsgNykgJSAxMDAwMDAwOwp9CgovLyBHZW5lcmF0ZSBjbHVzdGVyZWQga2V5cyBmb3IgdGVzdGluZyBoYXNoIGRpc3RyaWJ1dGlvbgpmbiBnZW5lcmF0ZV9jbHVzdGVyZWRfa2V5KGluZGV4OiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgY2x1c3Rlcl9zaXplOiBpMzIgPSAxMDA7CiAgICBsZXQgY2x1c3Rlcl9pZDogaTMyID0gaW5kZXggLyBjbHVzdGVyX3NpemU7CiAgICBsZXQgd2l0aGluX2NsdXN0ZXI6IGkzMiA9IGluZGV4ICUgY2x1c3Rlcl9zaXplOwoKICAgIHJldHVybiBjbHVzdGVyX2lkICogMTAwMDAgKyB3aXRoaW5fY2x1c3RlcjsKfQoKLy8gQ29tcHV0ZSBGaWJvbmFjY2kgbnVtYmVyIGZvciBrZXkgZ2VuZXJhdGlvbgpmbiBmaWJvbmFjY2lfbnVtYmVyKG46IGkzMikgLT4gaTMyIHsKICAgIGlmIChuIDw9IDEpIHsKICAgICAgICByZXR1cm4gbjsKICAgIH0KCiAgICBsZXQgbXV0IHByZXY6IGkzMiA9IDA7CiAgICBsZXQgbXV0IGN1cnI6IGkzMiA9IDE7CiAgICBsZXQgbXV0IGk6IGkzMiA9IDI7CgogICAgd2hpbGUgKGkgPD0gbikgewogICAgICAgIGxldCBuZXh0OiBpMzIgPSBwcmV2ICsgY3VycjsKICAgICAgICBwcmV2ID0gY3VycjsKICAgICAgICBjdXJyID0gbmV4dDsKICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgcmV0dXJuIGN1cnI7Cn0KCi8vIEhhc2ggdGFibGUgaW5zZXJ0IHdpdGggcXVhZHJhdGljIHByb2JpbmcKZm4gaGFzaF90YWJsZV9pbnNlcnQoCiAgICB0YWJsZTogJm11dCBbaTMyOyAyMDQ4XSwKICAgIG9jY3VwaWVkOiAmbXV0IFtib29sOyA0MDk2XSwKICAgIGRlbGV0ZWQ6ICZtdXQgW2Jvb2w7IDQwOTZdLAogICAgc2l6ZTogaTMyLAogICAga2V5OiBpMzIsCiAgICB2YWx1ZTogaTMyLAopIC0+IGkzMiB7CiAgICBsZXQgaGFzaDogaTMyID0gaGFzaF9mdW5jdGlvbihrZXkpICUgc2l6ZTsKICAgIGxldCBtdXQgcHJvYmVfY291bnQ6IGkzMiA9IDA7CiAgICBsZXQgb3JpZ2luYWxfaGFzaDogaTMyID0gaGFzaDsKCiAgICB3aGlsZSAocHJvYmVfY291bnQgPCBnZXRfbWF4X3Byb2JlX2Rpc3RhbmNlKCkpIHsKICAgICAgICBsZXQgaW5kZXg6IGkzMiA9IChvcmlnaW5hbF9oYXNoICsgcHJvYmVfY291bnQgKiBwcm9iZV9jb3VudCkgJSBzaXplOwoKICAgICAgICBpZiAoKCFvY2N1cGllZFtpbmRleCBhcyB1c2l6ZV0pIHx8IChkZWxldGVkW2luZGV4IGFzIHVzaXplXSkpIHsKICAgICAgICAgICAgLy8gRm91bmQgZW1wdHkgb3IgZGVsZXRlZCBzbG90CiAgICAgICAgICAgIHRhYmxlW2luZGV4IGFzIHVzaXplICogMl0gPSBrZXk7CiAgICAgICAgICAgIHRhYmxlW2luZGV4IGFzIHVzaXplICogMiArIDFdID0gdmFsdWU7CiAgICAgICAgICAgIG9jY3VwaWVkW2luZGV4IGFzIHVzaXplXSA9IHRydWU7CiAgICAgICAgICAgIGRlbGV0ZWRbaW5kZXggYXMgdXNpemVdID0gZmFsc2U7CiAgICAgICAgICAgIHJldHVybiBwcm9iZV9jb3VudDsgLy8gUmV0dXJuIG51bWJlciBvZiBwcm9iZXMKICAgICAgICB9CgogICAgICAgIGlmICh0YWJsZVtpbmRleCBhcyB1c2l6ZSAqIDJdID09IGtleSkgewogICAgICAgICAgICAvLyBLZXkgYWxyZWFkeSBleGlzdHMsIHVwZGF0ZSB2YWx1ZQogICAgICAgICAgICB0YWJsZVtpbmRleCBhcyB1c2l6ZSAqIDIgKyAxXSA9IHZhbHVlOwogICAgICAgICAgICByZXR1cm4gMDsgLy8gTm8gcHJvYmluZyBuZWVkZWQKICAgICAgICB9CgogICAgICAgIHByb2JlX2NvdW50ID0gcHJvYmVfY291bnQgKyAxOwogICAgfQoKICAgIHJldHVybiAtMTsgLy8gSW5zZXJ0IGZhaWxlZAp9CgovLyBIYXNoIHRhYmxlIGxvb2t1cApmbiBoYXNoX3RhYmxlX2xvb2t1cCgKICAgIHRhYmxlOiAmW2kzMjsgMjA0OF0sCiAgICBvY2N1cGllZDogJltib29sOyA0MDk2XSwKICAgIGRlbGV0ZWQ6ICZbYm9vbDsgNDA5Nl0sCiAgICBzaXplOiBpMzIsCiAgICBrZXk6IGkzMiwKKSAtPiBpMzIgewogICAgbGV0IGhhc2g6IGkzMiA9IGhhc2hfZnVuY3Rpb24oa2V5KSAlIHNpemU7CiAgICBsZXQgbXV0IHByb2JlX2NvdW50OiBpMzIgPSAwOwogICAgbGV0IG9yaWdpbmFsX2hhc2g6IGkzMiA9IGhhc2g7CgogICAgd2hpbGUgKHByb2JlX2NvdW50IDwgZ2V0X21heF9wcm9iZV9kaXN0YW5jZSgpKSB7CiAgICAgICAgbGV0IGluZGV4OiBpMzIgPSAob3JpZ2luYWxfaGFzaCArIHByb2JlX2NvdW50ICogcHJvYmVfY291bnQpICUgc2l6ZTsKCiAgICAgICAgaWYgKCghb2NjdXBpZWRbaW5kZXggYXMgdXNpemVdKSAmJiAoIWRlbGV0ZWRbaW5kZXggYXMgdXNpemVdKSkgewogICAgICAgICAgICByZXR1cm4gLTE7IC8vIEtleSBub3QgZm91bmQKICAgICAgICB9CgogICAgICAgIGlmICgob2NjdXBpZWRbaW5kZXggYXMgdXNpemVdKQogICAgICAgICAgICAmJiAoIWRlbGV0ZWRbaW5kZXggYXMgdXNpemVdKQogICAgICAgICAgICAmJiAodGFibGVbaW5kZXggYXMgdXNpemUgKiAyXSA9PSBrZXkpKQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIHRhYmxlW2luZGV4IGFzIHVzaXplICogMiArIDFdOyAvLyBGb3VuZCBrZXksIHJldHVybiB2YWx1ZQogICAgICAgIH0KCiAgICAgICAgcHJvYmVfY291bnQgPSBwcm9iZV9jb3VudCArIDE7CiAgICB9CgogICAgcmV0dXJuIC0xOyAvLyBLZXkgbm90IGZvdW5kIGFmdGVyIG1heCBwcm9iZXMKfQoKLy8gSGFzaCB0YWJsZSBkZWxldGUKZm4gaGFzaF90YWJsZV9kZWxldGUoCiAgICB0YWJsZTogJltpMzI7IDIwNDhdLAogICAgb2NjdXBpZWQ6ICZtdXQgW2Jvb2w7IDQwOTZdLAogICAgZGVsZXRlZDogJm11dCBbYm9vbDsgNDA5Nl0sCiAgICBzaXplOiBpMzIsCiAgICBrZXk6IGkzMiwKKSAtPiBpMzIgewogICAgbGV0IGhhc2g6IGkzMiA9IGhhc2hfZnVuY3Rpb24oa2V5KSAlIHNpemU7CiAgICBsZXQgbXV0IHByb2JlX2NvdW50OiBpMzIgPSAwOwogICAgbGV0IG9yaWdpbmFsX2hhc2g6IGkzMiA9IGhhc2g7CgogICAgd2hpbGUgKHByb2JlX2NvdW50IDwgZ2V0X21heF9wcm9iZV9kaXN0YW5jZSgpKSB7CiAgICAgICAgbGV0IGluZGV4OiBpMzIgPSAob3JpZ2luYWxfaGFzaCArIHByb2JlX2NvdW50ICogcHJvYmVfY291bnQpICUgc2l6ZTsKCiAgICAgICAgaWYgKCghb2NjdXBpZWRbaW5kZXggYXMgdXNpemVdKSAmJiAoIWRlbGV0ZWRbaW5kZXggYXMgdXNpemVdKSkgewogICAgICAgICAgICByZXR1cm4gMDsgLy8gS2V5IG5vdCBmb3VuZAogICAgICAgIH0KCiAgICAgICAgaWYgKChvY2N1cGllZFtpbmRleCBhcyB1c2l6ZV0pCiAgICAgICAgICAgICYmICghZGVsZXRlZFtpbmRleCBhcyB1c2l6ZV0pCiAgICAgICAgICAgICYmICh0YWJsZVtpbmRleCBhcyB1c2l6ZSAqIDJdID09IGtleSkpCiAgICAgICAgewogICAgICAgICAgICBkZWxldGVkW2luZGV4IGFzIHVzaXplXSA9IHRydWU7IC8vIE1hcmsgYXMgZGVsZXRlZAogICAgICAgICAgICByZXR1cm4gMTsgLy8gU3VjY2Vzc2Z1bGx5IGRlbGV0ZWQKICAgICAgICB9CgogICAgICAgIHByb2JlX2NvdW50ID0gcHJvYmVfY291bnQgKyAxOwogICAgfQoKICAgIHJldHVybiAwOyAvLyBLZXkgbm90IGZvdW5kIGFmdGVyIG1heCBwcm9iZXMKfQoKLy8gUHJpb3JpdHkgcXVldWUgaW1wbGVtZW50YXRpb24gZm9yIGNhY2hlIHJlcGxhY2VtZW50CmZuIHJ1bl9wcmlvcml0eV9xdWV1ZV90ZXN0cygpIC0+IGkzMiB7CiAgICBsZXQgbWF4X3NpemU6IGkzMiA9IDI1NjsKICAgIGxldCBtdXQgaGVhcDogW2kzMjsgNTEyXSA9IFswOyA1MTJdOyAvLyBwcmlvcml0eSwgZGF0YSBwYWlycwogICAgbGV0IG11dCBoZWFwX3NpemU6IGkzMiA9IDA7CgogICAgbGV0IHRvdGFsX29wZXJhdGlvbnM6IGkzMiA9IDYwMDA7CiAgICBsZXQgbXV0IHN1Y2Nlc3NmdWxfb3BlcmF0aW9uczogaTMyID0gMDsKICAgIGxldCBtdXQgaGVhcF92aW9sYXRpb25zOiBpMzIgPSAwOwoKICAgIGxldCBtdXQgb3BlcmF0aW9uX2luZGV4OiBpMzIgPSAwOwogICAgd2hpbGUgKG9wZXJhdGlvbl9pbmRleCA8IHRvdGFsX29wZXJhdGlvbnMpIHsKICAgICAgICBsZXQgb3BlcmF0aW9uX3R5cGU6IGkzMiA9IG9wZXJhdGlvbl9pbmRleCAlIDU7CgogICAgICAgIGlmICgob3BlcmF0aW9uX3R5cGUgPT0gMCkgfHwgKG9wZXJhdGlvbl90eXBlID09IDEpIHx8IChvcGVyYXRpb25fdHlwZSA9PSAyKSkgewogICAgICAgICAgICAvLyBJbnNlcnQgb3BlcmF0aW9uICg2MCUgb2Ygb3BlcmF0aW9ucykKICAgICAgICAgICAgaWYgKGhlYXBfc2l6ZSA8IG1heF9zaXplKSB7CiAgICAgICAgICAgICAgICBsZXQgcHJpb3JpdHk6IGkzMiA9IGdlbmVyYXRlX3ByaW9yaXR5KG9wZXJhdGlvbl9pbmRleCk7CiAgICAgICAgICAgICAgICBsZXQgZGF0YTogaTMyID0gb3BlcmF0aW9uX2luZGV4OwoKICAgICAgICAgICAgICAgIGxldCBpbnNlcnRfcmVzdWx0OiBpMzIgPQogICAgICAgICAgICAgICAgICAgIHByaW9yaXR5X3F1ZXVlX2luc2VydCgmbXV0IGhlYXAsIGhlYXBfc2l6ZSwgcHJpb3JpdHksIGRhdGEpOwogICAgICAgICAgICAgICAgaWYgKGluc2VydF9yZXN1bHQgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgaGVhcF9zaXplID0gaGVhcF9zaXplICsgMTsKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzZnVsX29wZXJhdGlvbnMgPSBzdWNjZXNzZnVsX29wZXJhdGlvbnMgKyAxOwoKICAgICAgICAgICAgICAgICAgICAvLyBWYWxpZGF0ZSBoZWFwIHByb3BlcnR5CiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbGlkYXRpb25fcmVzdWx0OiBpMzIgPSB2YWxpZGF0ZV9oZWFwX3Byb3BlcnR5KCZoZWFwLCBoZWFwX3NpemUpOwogICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0aW9uX3Jlc3VsdCA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGhlYXBfdmlvbGF0aW9ucyA9IGhlYXBfdmlvbGF0aW9ucyArIDE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChvcGVyYXRpb25fdHlwZSA9PSAzKSB7CiAgICAgICAgICAgIC8vIEV4dHJhY3QgbWF4IG9wZXJhdGlvbiAoMjAlIG9mIG9wZXJhdGlvbnMpCiAgICAgICAgICAgIGlmIChoZWFwX3NpemUgPiAwKSB7CiAgICAgICAgICAgICAgICBsZXQgbWF4X3ByaW9yaXR5OiBpMzIgPSBwcmlvcml0eV9xdWV1ZV9leHRyYWN0X21heCgmbXV0IGhlYXAsIGhlYXBfc2l6ZSk7CiAgICAgICAgICAgICAgICBpZiAobWF4X3ByaW9yaXR5ID49IDApIHsKICAgICAgICAgICAgICAgICAgICBoZWFwX3NpemUgPSBoZWFwX3NpemUgLSAxOwogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxfb3BlcmF0aW9ucyA9IHN1Y2Nlc3NmdWxfb3BlcmF0aW9ucyArIDE7CgogICAgICAgICAgICAgICAgICAgIC8vIFZhbGlkYXRlIGhlYXAgcHJvcGVydHkgYWZ0ZXIgZXh0cmFjdGlvbgogICAgICAgICAgICAgICAgICAgIGxldCB2YWxpZGF0aW9uX3Jlc3VsdDogaTMyID0gdmFsaWRhdGVfaGVhcF9wcm9wZXJ0eSgmaGVhcCwgaGVhcF9zaXplKTsKICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbl9yZXN1bHQgPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICBoZWFwX3Zpb2xhdGlvbnMgPSBoZWFwX3Zpb2xhdGlvbnMgKyAxOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIFBlZWsgb3BlcmF0aW9uICgyMCUgb2Ygb3BlcmF0aW9ucykKICAgICAgICAgICAgaWYgKGhlYXBfc2l6ZSA+IDApIHsKICAgICAgICAgICAgICAgIGxldCBtYXhfcHJpb3JpdHk6IGkzMiA9IHByaW9yaXR5X3F1ZXVlX3BlZWsoJmhlYXApOwogICAgICAgICAgICAgICAgaWYgKG1heF9wcmlvcml0eSA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bF9vcGVyYXRpb25zID0gc3VjY2Vzc2Z1bF9vcGVyYXRpb25zICsgMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgb3BlcmF0aW9uX2luZGV4ID0gb3BlcmF0aW9uX2luZGV4ICsgMTsKICAgIH0KCiAgICByZXR1cm4gc3VjY2Vzc2Z1bF9vcGVyYXRpb25zIC0gaGVhcF92aW9sYXRpb25zOyAvLyBTdWJ0cmFjdCB2aW9sYXRpb24gcGVuYWx0eQp9CgovLyBHZW5lcmF0ZSBwcmlvcml0eSB2YWx1ZXMgZm9yIHRlc3RpbmcKZm4gZ2VuZXJhdGVfcHJpb3JpdHkoaW5kZXg6IGkzMikgLT4gaTMyIHsKICAgIGxldCBwYXR0ZXJuOiBpMzIgPSBpbmRleCAlIDQ7CgogICAgaWYgKHBhdHRlcm4gPT0gMCkgewogICAgICAgIHJldHVybiBpbmRleCAlIDEwMDA7IC8vIFNlcXVlbnRpYWwgcHJpb3JpdGllcwogICAgfSBlbHNlIGlmIChwYXR0ZXJuID09IDEpIHsKICAgICAgICByZXR1cm4gaGFzaF9mdW5jdGlvbihpbmRleCkgJSAxMDAwMDsgLy8gUmFuZG9tIHByaW9yaXRpZXMKICAgIH0gZWxzZSBpZiAocGF0dGVybiA9PSAyKSB7CiAgICAgICAgcmV0dXJuIChpbmRleCAqIGluZGV4KSAlIDUwMDA7IC8vIFF1YWRyYXRpYyBwcmlvcml0aWVzCiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmaWJvbmFjY2lfbnVtYmVyKGluZGV4ICUgMTUpICogMTA7IC8vIEZpYm9uYWNjaS1iYXNlZCBwcmlvcml0aWVzCiAgICB9Cn0KCi8vIEluc2VydCBlbGVtZW50IGludG8gbWF4IGhlYXAKZm4gcHJpb3JpdHlfcXVldWVfaW5zZXJ0KGhlYXA6ICZtdXQgW2kzMjsgNTEyXSwgc2l6ZTogaTMyLCBwcmlvcml0eTogaTMyLCBkYXRhOiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgbXV0IGluZGV4OiBpMzIgPSBzaXplOwoKICAgIC8vIEluc2VydCBhdCB0aGUgZW5kCiAgICBoZWFwW2luZGV4IGFzIHVzaXplICogMl0gPSBwcmlvcml0eTsKICAgIGhlYXBbaW5kZXggYXMgdXNpemUgKiAyICsgMV0gPSBkYXRhOwoKICAgIC8vIEJ1YmJsZSB1cCB0byBtYWludGFpbiBoZWFwIHByb3BlcnR5CiAgICB3aGlsZSAoaW5kZXggPiAwKSB7CiAgICAgICAgbGV0IHBhcmVudF9pbmRleDogaTMyID0gKGluZGV4IC0gMSkgLyAyOwogICAgICAgIGxldCBwYXJlbnRfcHJpb3JpdHk6IGkzMiA9IGhlYXBbcGFyZW50X2luZGV4IGFzIHVzaXplICogMl07CgogICAgICAgIGlmIChoZWFwW2luZGV4IGFzIHVzaXplICogMl0gPD0gcGFyZW50X3ByaW9yaXR5KSB7CiAgICAgICAgICAgIGJyZWFrOyAvLyBIZWFwIHByb3BlcnR5IHNhdGlzZmllZAogICAgICAgIH0KCiAgICAgICAgLy8gU3dhcCB3aXRoIHBhcmVudAogICAgICAgIGxldCB0ZW1wX3ByaW9yaXR5OiBpMzIgPSBoZWFwW2luZGV4IGFzIHVzaXplICogMl07CiAgICAgICAgbGV0IHRlbXBfZGF0YTogaTMyID0gaGVhcFtpbmRleCBhcyB1c2l6ZSAqIDIgKyAxXTsKCiAgICAgICAgaGVhcFtpbmRleCBhcyB1c2l6ZSAqIDJdID0gaGVhcFtwYXJlbnRfaW5kZXggYXMgdXNpemUgKiAyXTsKICAgICAgICBoZWFwW2luZGV4IGFzIHVzaXplICogMiArIDFdID0gaGVhcFtwYXJlbnRfaW5kZXggYXMgdXNpemUgKiAyICsgMV07CgogICAgICAgIGhlYXBbcGFyZW50X2luZGV4IGFzIHVzaXplICogMl0gPSB0ZW1wX3ByaW9yaXR5OwogICAgICAgIGhlYXBbcGFyZW50X2luZGV4IGFzIHVzaXplICogMiArIDFdID0gdGVtcF9kYXRhOwoKICAgICAgICBpbmRleCA9IHBhcmVudF9pbmRleDsKICAgIH0KCiAgICByZXR1cm4gMTsgLy8gU3VjY2Vzcwp9CgovLyBFeHRyYWN0IG1heGltdW0gZWxlbWVudCBmcm9tIGhlYXAKZm4gcHJpb3JpdHlfcXVldWVfZXh0cmFjdF9tYXgoaGVhcDogJm11dCBbaTMyOyA1MTJdLCBzaXplOiBpMzIpIC0+IGkzMiB7CiAgICBpZiAoc2l6ZSA9PSAwKSB7CiAgICAgICAgcmV0dXJuIC0xOyAvLyBFbXB0eSBoZWFwCiAgICB9CgogICAgbGV0IG1heF9wcmlvcml0eTogaTMyID0gaGVhcFswXTsKCiAgICAvLyBNb3ZlIGxhc3QgZWxlbWVudCB0byByb290CiAgICBoZWFwWzBdID0gaGVhcFsoc2l6ZSBhcyB1c2l6ZSAtIDEpICogMl07CiAgICBoZWFwWzFdID0gaGVhcFsoc2l6ZSBhcyB1c2l6ZSAtIDEpICogMiArIDFdOwoKICAgIC8vIEJ1YmJsZSBkb3duIHRvIG1haW50YWluIGhlYXAgcHJvcGVydHkKICAgIGxldCBtdXQgaW5kZXg6IGkzMiA9IDA7CiAgICBsZXQgbmV3X3NpemU6IGkzMiA9IHNpemUgLSAxOwoKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgbGV0IGxlZnRfY2hpbGQ6IGkzMiA9IDIgKiBpbmRleCArIDE7CiAgICAgICAgbGV0IHJpZ2h0X2NoaWxkOiBpMzIgPSAyICogaW5kZXggKyAyOwogICAgICAgIGxldCBtdXQgbGFyZ2VzdDogaTMyID0gaW5kZXg7CgogICAgICAgIC8vIEZpbmQgbGFyZ2VzdCBhbW9uZyBub2RlIGFuZCBpdHMgY2hpbGRyZW4KICAgICAgICBpZiAoKGxlZnRfY2hpbGQgPCBuZXdfc2l6ZSkgJiYgKGhlYXBbbGVmdF9jaGlsZCBhcyB1c2l6ZSAqIDJdID4gaGVhcFtsYXJnZXN0IGFzIHVzaXplICogMl0pKQogICAgICAgIHsKICAgICAgICAgICAgbGFyZ2VzdCA9IGxlZnRfY2hpbGQ7CiAgICAgICAgfQoKICAgICAgICBpZiAoKHJpZ2h0X2NoaWxkIDwgbmV3X3NpemUpCiAgICAgICAgICAgICYmIChoZWFwW3JpZ2h0X2NoaWxkIGFzIHVzaXplICogMl0gPiBoZWFwW2xhcmdlc3QgYXMgdXNpemUgKiAyXSkpCiAgICAgICAgewogICAgICAgICAgICBsYXJnZXN0ID0gcmlnaHRfY2hpbGQ7CiAgICAgICAgfQoKICAgICAgICBpZiAobGFyZ2VzdCA9PSBpbmRleCkgewogICAgICAgICAgICBicmVhazsgLy8gSGVhcCBwcm9wZXJ0eSBzYXRpc2ZpZWQKICAgICAgICB9CgogICAgICAgIC8vIFN3YXAgd2l0aCBsYXJnZXN0IGNoaWxkCiAgICAgICAgbGV0IHRlbXBfcHJpb3JpdHk6IGkzMiA9IGhlYXBbaW5kZXggYXMgdXNpemUgKiAyXTsKICAgICAgICBsZXQgdGVtcF9kYXRhOiBpMzIgPSBoZWFwW2luZGV4IGFzIHVzaXplICogMiArIDFdOwoKICAgICAgICBoZWFwW2luZGV4IGFzIHVzaXplICogMl0gPSBoZWFwW2xhcmdlc3QgYXMgdXNpemUgKiAyXTsKICAgICAgICBoZWFwW2luZGV4IGFzIHVzaXplICogMiArIDFdID0gaGVhcFtsYXJnZXN0IGFzIHVzaXplICogMiArIDFdOwoKICAgICAgICBoZWFwW2xhcmdlc3QgYXMgdXNpemUgKiAyXSA9IHRlbXBfcHJpb3JpdHk7CiAgICAgICAgaGVhcFtsYXJnZXN0IGFzIHVzaXplICogMiArIDFdID0gdGVtcF9kYXRhOwoKICAgICAgICBpbmRleCA9IGxhcmdlc3Q7CiAgICB9CgogICAgcmV0dXJuIG1heF9wcmlvcml0eTsKfQoKLy8gUGVlayBhdCBtYXhpbXVtIGVsZW1lbnQgd2l0aG91dCByZW1vdmluZyBpdApmbiBwcmlvcml0eV9xdWV1ZV9wZWVrKGhlYXA6ICZbaTMyOyA1MTJdKSAtPiBpMzIgewogICAgcmV0dXJuIGhlYXBbMF07IC8vIFJldHVybiBwcmlvcml0eSBvZiByb290IGVsZW1lbnQKfQoKLy8gVmFsaWRhdGUgaGVhcCBwcm9wZXJ0eQpmbiB2YWxpZGF0ZV9oZWFwX3Byb3BlcnR5KGhlYXA6ICZbaTMyOyA1MTJdLCBzaXplOiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgbXV0IGluZGV4OiBpMzIgPSAwOwoKICAgIHdoaWxlIChpbmRleCA8IHNpemUpIHsKICAgICAgICBsZXQgbGVmdF9jaGlsZDogaTMyID0gMiAqIGluZGV4ICsgMTsKICAgICAgICBsZXQgcmlnaHRfY2hpbGQ6IGkzMiA9IDIgKiBpbmRleCArIDI7CgogICAgICAgIGlmICgobGVmdF9jaGlsZCA8IHNpemUpICYmIChoZWFwW2luZGV4IGFzIHVzaXplICogMl0gPCBoZWFwW2xlZnRfY2hpbGQgYXMgdXNpemUgKiAyXSkpIHsKICAgICAgICAgICAgcmV0dXJuIDA7IC8vIEhlYXAgcHJvcGVydHkgdmlvbGF0ZWQKICAgICAgICB9CgogICAgICAgIGlmICgocmlnaHRfY2hpbGQgPCBzaXplKSAmJiAoaGVhcFtpbmRleCBhcyB1c2l6ZSAqIDJdIDwgaGVhcFtyaWdodF9jaGlsZCBhcyB1c2l6ZSAqIDJdKSkgewogICAgICAgICAgICByZXR1cm4gMDsgLy8gSGVhcCBwcm9wZXJ0eSB2aW9sYXRlZAogICAgICAgIH0KCiAgICAgICAgaW5kZXggPSBpbmRleCArIDE7CiAgICB9CgogICAgcmV0dXJuIDE7IC8vIEhlYXAgcHJvcGVydHkgc2F0aXNmaWVkCn0KCi8vIEludGVncmF0ZWQgc3lzdGVtIHRlc3QgY29tYmluaW5nIGFsbCBjb21wb25lbnRzCmZuIHJ1bl9pbnRlZ3JhdGVkX3N5c3RlbV90ZXN0KCkgLT4gaTMyIHsKICAgIGxldCBzeXN0ZW1fY3ljbGVzOiBpMzIgPSAxMDAwOwogICAgbGV0IG11dCB0b3RhbF9zY29yZTogaTMyID0gMDsKCiAgICBsZXQgbXV0IGN5Y2xlOiBpMzIgPSAwOwogICAgd2hpbGUgKGN5Y2xlIDwgc3lzdGVtX2N5Y2xlcykgewogICAgICAgIC8vIFNpbXVsYXRlIHN5c3RlbSB3b3JrbG9hZAogICAgICAgIGxldCBtZW1vcnlfcHJlc3N1cmU6IGkzMiA9IHNpbXVsYXRlX21lbW9yeV9wcmVzc3VyZShjeWNsZSk7CiAgICAgICAgbGV0IGNhY2hlX2VmZmljaWVuY3k6IGkzMiA9IHNpbXVsYXRlX2NhY2hlX3dvcmtsb2FkKGN5Y2xlKTsKICAgICAgICBsZXQgaGFzaF9wZXJmb3JtYW5jZTogaTMyID0gc2ltdWxhdGVfaGFzaF93b3JrbG9hZChjeWNsZSk7CiAgICAgICAgbGV0IHF1ZXVlX3Rocm91Z2hwdXQ6IGkzMiA9IHNpbXVsYXRlX3F1ZXVlX3dvcmtsb2FkKGN5Y2xlKTsKCiAgICAgICAgLy8gQ2FsY3VsYXRlIHN5c3RlbSBwZXJmb3JtYW5jZSBmb3IgdGhpcyBjeWNsZQogICAgICAgIGxldCBjeWNsZV9zY29yZTogaTMyID0gY29tcHV0ZV9pbnRlZ3JhdGVkX3Njb3JlKAogICAgICAgICAgICBtZW1vcnlfcHJlc3N1cmUsCiAgICAgICAgICAgIGNhY2hlX2VmZmljaWVuY3ksCiAgICAgICAgICAgIGhhc2hfcGVyZm9ybWFuY2UsCiAgICAgICAgICAgIHF1ZXVlX3Rocm91Z2hwdXQsCiAgICAgICAgKTsKICAgICAgICB0b3RhbF9zY29yZSA9IHRvdGFsX3Njb3JlICsgY3ljbGVfc2NvcmU7CgogICAgICAgIC8vIFNpbXVsYXRlIHN5c3RlbSBhZGFwdGF0aW9uCiAgICAgICAgaWYgKChjeWNsZSAlIDEwMCkgPT0gOTkpIHsKICAgICAgICAgICAgbGV0IGFkYXB0YXRpb25fYm9udXM6IGkzMiA9IHNpbXVsYXRlX3N5c3RlbV9hZGFwdGF0aW9uKGN5Y2xlKTsKICAgICAgICAgICAgdG90YWxfc2NvcmUgPSB0b3RhbF9zY29yZSArIGFkYXB0YXRpb25fYm9udXM7CiAgICAgICAgfQoKICAgICAgICBjeWNsZSA9IGN5Y2xlICsgMTsKICAgIH0KCiAgICByZXR1cm4gdG90YWxfc2NvcmUgLyBzeXN0ZW1fY3ljbGVzOyAvLyBBdmVyYWdlIHBlcmZvcm1hbmNlCn0KCi8vIFNpbXVsYXRlIG1lbW9yeSBwcmVzc3VyZSBmb3IgaW50ZWdyYXRlZCB0ZXN0aW5nCmZuIHNpbXVsYXRlX21lbW9yeV9wcmVzc3VyZShjeWNsZTogaTMyKSAtPiBpMzIgewogICAgbGV0IHByZXNzdXJlX3R5cGU6IGkzMiA9IGN5Y2xlICUgMzsKICAgIGxldCBiYXNlX3ByZXNzdXJlOiBpMzIgPSA1MDsKCiAgICBpZiAocHJlc3N1cmVfdHlwZSA9PSAwKSB7CiAgICAgICAgLy8gTG93IHByZXNzdXJlIC0gbW9zdGx5IGNhY2hlIGhpdHMKICAgICAgICByZXR1cm4gYmFzZV9wcmVzc3VyZSArIChjeWNsZSAlIDIwKTsKICAgIH0gZWxzZSBpZiAocHJlc3N1cmVfdHlwZSA9PSAxKSB7CiAgICAgICAgLy8gTWVkaXVtIHByZXNzdXJlIC0gbWl4ZWQgd29ya2xvYWQKICAgICAgICByZXR1cm4gYmFzZV9wcmVzc3VyZSArIDMwICsgKChjeWNsZSAqIDE3KSAlIDQwKTsKICAgIH0gZWxzZSB7CiAgICAgICAgLy8gSGlnaCBwcmVzc3VyZSAtIGNhY2hlIHRocmFzaGluZwogICAgICAgIHJldHVybiBiYXNlX3ByZXNzdXJlICsgNjAgKyAoaGFzaF9mdW5jdGlvbihjeWNsZSkgJSAzMCk7CiAgICB9Cn0KCi8vIFNpbXVsYXRlIGNhY2hlIHdvcmtsb2FkIHBhdHRlcm5zCmZuIHNpbXVsYXRlX2NhY2hlX3dvcmtsb2FkKGN5Y2xlOiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgd29ya2xvYWRfdHlwZTogaTMyID0gKGN5Y2xlIC8gMTApICUgNDsKICAgIGxldCBiYXNlX2VmZmljaWVuY3k6IGkzMiA9IDcwOwoKICAgIGlmICh3b3JrbG9hZF90eXBlID09IDApIHsKICAgICAgICAvLyBTZXF1ZW50aWFsIGFjY2VzcyBwYXR0ZXJuCiAgICAgICAgcmV0dXJuIGJhc2VfZWZmaWNpZW5jeSArIDIwOwogICAgfSBlbHNlIGlmICh3b3JrbG9hZF90eXBlID09IDEpIHsKICAgICAgICAvLyBTdHJpZGVkIGFjY2VzcyBwYXR0ZXJuCiAgICAgICAgcmV0dXJuIGJhc2VfZWZmaWNpZW5jeSArIDEwOwogICAgfSBlbHNlIGlmICh3b3JrbG9hZF90eXBlID09IDIpIHsKICAgICAgICAvLyBSYW5kb20gYWNjZXNzIHBhdHRlcm4KICAgICAgICByZXR1cm4gYmFzZV9lZmZpY2llbmN5IC0gMTA7CiAgICB9IGVsc2UgewogICAgICAgIC8vIE1peGVkIGFjY2VzcyBwYXR0ZXJuCiAgICAgICAgcmV0dXJuIGJhc2VfZWZmaWNpZW5jeSArICgoY3ljbGUgKiAyMykgJSAzMCkgLSAxNTsKICAgIH0KfQoKLy8gU2ltdWxhdGUgaGFzaCB0YWJsZSB3b3JrbG9hZApmbiBzaW11bGF0ZV9oYXNoX3dvcmtsb2FkKGN5Y2xlOiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgY29sbGlzaW9uX3JhdGU6IGkzMiA9IChjeWNsZSAlIDUwKSArIDEwOwogICAgbGV0IGJhc2VfcGVyZm9ybWFuY2U6IGkzMiA9IDgwOwoKICAgIC8vIEhpZ2hlciBjb2xsaXNpb24gcmF0ZSByZWR1Y2VzIHBlcmZvcm1hbmNlCiAgICByZXR1cm4gYmFzZV9wZXJmb3JtYW5jZSAtIChjb2xsaXNpb25fcmF0ZSAvIDUpOwp9CgovLyBTaW11bGF0ZSBwcmlvcml0eSBxdWV1ZSB3b3JrbG9hZApmbiBzaW11bGF0ZV9xdWV1ZV93b3JrbG9hZChjeWNsZTogaTMyKSAtPiBpMzIgewogICAgbGV0IHF1ZXVlX3NpemU6IGkzMiA9IChjeWNsZSAlIDIwMCkgKyA1MDsKICAgIGxldCBvcGVyYXRpb25fbWl4OiBpMzIgPSBjeWNsZSAlIDU7CgogICAgbGV0IGJhc2VfdGhyb3VnaHB1dDogaTMyID0gODU7CgogICAgaWYgKG9wZXJhdGlvbl9taXggPT0gMCkgewogICAgICAgIC8vIEluc2VydC1oZWF2eSB3b3JrbG9hZAogICAgICAgIHJldHVybiBiYXNlX3Rocm91Z2hwdXQgLSAocXVldWVfc2l6ZSAvIDIwKTsKICAgIH0gZWxzZSBpZiAob3BlcmF0aW9uX21peCA9PSAxKSB7CiAgICAgICAgLy8gRXh0cmFjdC1oZWF2eSB3b3JrbG9hZAogICAgICAgIHJldHVybiBiYXNlX3Rocm91Z2hwdXQgLSAocXVldWVfc2l6ZSAvIDE1KTsKICAgIH0gZWxzZSB7CiAgICAgICAgLy8gQmFsYW5jZWQgd29ya2xvYWQKICAgICAgICByZXR1cm4gYmFzZV90aHJvdWdocHV0IC0gKHF1ZXVlX3NpemUgLyAyNSk7CiAgICB9Cn0KCi8vIENvbXB1dGUgaW50ZWdyYXRlZCBwZXJmb3JtYW5jZSBzY29yZQpmbiBjb21wdXRlX2ludGVncmF0ZWRfc2NvcmUobWVtb3J5OiBpMzIsIGNhY2hlOiBpMzIsIGhhc2g6IGkzMiwgcXVldWU6IGkzMikgLT4gaTMyIHsKICAgIGxldCB3ZWlnaHRlZF9zY29yZTogaTMyID0gKG1lbW9yeSAqIDMgKyBjYWNoZSAqIDQgKyBoYXNoICogMiArIHF1ZXVlICogMSkgLyAxMDsKCiAgICAvLyBBcHBseSBub24tbGluZWFyIHNjYWxpbmcgZm9yIHJlYWxpc3RpYyBzeXN0ZW0gYmVoYXZpb3IKICAgIGlmICh3ZWlnaHRlZF9zY29yZSA+IDkwKSB7CiAgICAgICAgcmV0dXJuIHdlaWdodGVkX3Njb3JlICsgMTA7IC8vIEJvbnVzIGZvciBoaWdoIHBlcmZvcm1hbmNlCiAgICB9IGVsc2UgaWYgKHdlaWdodGVkX3Njb3JlIDwgNDApIHsKICAgICAgICByZXR1cm4gd2VpZ2h0ZWRfc2NvcmUgLSAxMDsgLy8gUGVuYWx0eSBmb3IgbG93IHBlcmZvcm1hbmNlCiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB3ZWlnaHRlZF9zY29yZTsKICAgIH0KfQoKLy8gU2ltdWxhdGUgc3lzdGVtIGFkYXB0YXRpb24gbWVjaGFuaXNtcwpmbiBzaW11bGF0ZV9zeXN0ZW1fYWRhcHRhdGlvbihjeWNsZTogaTMyKSAtPiBpMzIgewogICAgbGV0IG11dCBhZGFwdGF0aW9uX2ZhY3RvcjogaTMyID0gMDsKCiAgICAvLyBDYWNoZSBwcmVmZXRjaGluZyBhZGFwdGF0aW9uCiAgICBpZiAoKGN5Y2xlICUgMzAwKSA9PSAyOTkpIHsKICAgICAgICBhZGFwdGF0aW9uX2ZhY3RvciA9IGFkYXB0YXRpb25fZmFjdG9yICsgNTsKICAgIH0KCiAgICAvLyBNZW1vcnkgbWFuYWdlbWVudCBhZGFwdGF0aW9uCiAgICBpZiAoKGN5Y2xlICUgNTAwKSA9PSA0OTkpIHsKICAgICAgICBhZGFwdGF0aW9uX2ZhY3RvciA9IGFkYXB0YXRpb25fZmFjdG9yICsgODsKICAgIH0KCiAgICAvLyBIYXNoIHRhYmxlIHJlc2l6aW5nIHNpbXVsYXRpb24KICAgIGlmICgoY3ljbGUgJSA3MDApID09IDY5OSkgewogICAgICAgIGFkYXB0YXRpb25fZmFjdG9yID0gYWRhcHRhdGlvbl9mYWN0b3IgKyAzOwogICAgfQoKICAgIHJldHVybiBhZGFwdGF0aW9uX2ZhY3RvcjsKfQo=", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (28, "comprehensive28", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (29, "comprehensive29", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (30, "comprehensive30", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (31, "comprehensive31", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (32, "comprehensive32", 2, "LyoKVGVzdCBQYWNrYWdlOiBTZW1hbnRpYy0yClRlc3QgVGFyZ2V0OiBjb21wcmVoZW5zaXZlCkF1dGhvcjogV2VueGluIFpoZW5nClRpbWU6IDIwMjUtMDgtMTcKVmVyZGljdDogUGFzcwpUZXN0IE5hbWU6IFRleHQgUHJvY2Vzc2luZyBhbmQgUGF0dGVybiBNYXRjaGluZyBFbmdpbmUKU3VtbWFyeTogVGhpcyB0ZXN0IGNvbXByZWhlbnNpdmVseSBldmFsdWF0ZXMgY29tcGlsZXIgb3B0aW1pemF0aW9ucyBmb3I6CkRldGFpbHM6CkNvbXBsZXggc3RhdGUgbWFjaGluZSBsb2dpYyBmb3IgcGF0dGVybiBtYXRjaGluZy4KTGFyZ2UgYXJyYXkgdHJhdmVyc2FscyBmb3IgdGV4dCBwcm9jZXNzaW5nLgpOZXN0ZWQgbG9vcHMgYW5kIGNvbmRpdGlvbmFscyBmb3IgZmluZGluZyBzdWItcGF0dGVybnMuCkZ1bmN0aW9uIGNhbGxzIHdpdGggbXVsdGlwbGUgYXJyYXktYmFzZWQgYXJndW1lbnRzLgpCcmFuY2ggcHJlZGljdGlvbiBpbiB0ZXh0IGFuYWx5c2lzIGxvb3BzLgoqLwoKLy8gVW5pZmllZCBSTkc6IFBhcmvigJNNaWxsZXIgKGE9MTY4MDcsIG09MjE0NzQ4MzY0NykgdXNpbmcgU2NocmFnZSBtZXRob2QgdG8gYXZvaWQgb3ZlcmZsb3cKZm4gcG1fcmFuZF91cGRhdGUoeDogaTMyKSAtPiBpMzIgewogICAgbGV0IGE6IGkzMiA9IDE2ODA3OwogICAgbGV0IG06IGkzMiA9IDIxNDc0ODM2NDc7CiAgICBsZXQgcTogaTMyID0gMTI3NzczOyAvLyBtIC8gYQogICAgbGV0IHI6IGkzMiA9IDI4MzY7IC8vIG0gJSBhCiAgICBsZXQgbXV0IGs6IGkzMiA9IHggLyBxOwogICAgbGV0IG11dCBuZXdfeDogaTMyID0gYSAqICh4IC0gayAqIHEpIC0gciAqIGs7CiAgICBpZiAobmV3X3ggPD0gMCkgewogICAgICAgIG5ld194ICs9IG07CiAgICB9CiAgICByZXR1cm4gbmV3X3g7Cn0KCi8vIGNvbXByZWhlbnNpdmUzMi5yeCAtIFRleHQgUHJvY2Vzc2luZyBhbmQgUGF0dGVybiBNYXRjaGluZyBFbmdpbmUKLy8gVGhpcyB0ZXN0IGNvbXByZWhlbnNpdmVseSBldmFsdWF0ZXMgY29tcGlsZXIgb3B0aW1pemF0aW9ucyBmb3I6Ci8vIC0gQ29tcGxleCBzdGF0ZSBtYWNoaW5lIGxvZ2ljIGZvciBwYXR0ZXJuIG1hdGNoaW5nLgovLyAtIExhcmdlIGFycmF5IHRyYXZlcnNhbHMgZm9yIHRleHQgcHJvY2Vzc2luZy4KLy8gLSBOZXN0ZWQgbG9vcHMgYW5kIGNvbmRpdGlvbmFscyBmb3IgZmluZGluZyBzdWItcGF0dGVybnMuCi8vIC0gRnVuY3Rpb24gY2FsbHMgd2l0aCBtdWx0aXBsZSBhcnJheS1iYXNlZCBhcmd1bWVudHMuCi8vIC0gQnJhbmNoIHByZWRpY3Rpb24gaW4gdGV4dCBhbmFseXNpcyBsb29wcy4KCmNvbnN0IFRFWFRfU0laRTogdXNpemUgPSAxMDI0Owpjb25zdCBQQVRURVJOX1NJWkU6IHVzaXplID0gNjQ7CgpmbiBtYWluKCkgewogICAgbGV0IG11dCB0ZXh0OiBbaTMyOyBURVhUX1NJWkVdID0gWzA7IFRFWFRfU0laRV07CiAgICBnZW5lcmF0ZV90ZXh0KCZtdXQgdGV4dCwgMTIzNDUpOwoKICAgIGxldCBtdXQgcGF0dGVybjE6IFtpMzI7IFBBVFRFUk5fU0laRV0gPSBbMDsgUEFUVEVSTl9TSVpFXTsKICAgIGxldCBwYXR0ZXJuMV9sZW46IGkzMiA9IDM7CiAgICBwYXR0ZXJuMVswXSA9IDY1OwogICAgcGF0dGVybjFbMV0gPSA2NjsKICAgIHBhdHRlcm4xWzJdID0gNjc7CgogICAgbGV0IG11dCBwYXR0ZXJuMjogW2kzMjsgUEFUVEVSTl9TSVpFXSA9IFswOyBQQVRURVJOX1NJWkVdOwogICAgbGV0IHBhdHRlcm4yX2xlbjogaTMyID0gNTsKICAgIHBhdHRlcm4yWzBdID0gODg7CiAgICBwYXR0ZXJuMlsxXSA9IDg5OwogICAgcGF0dGVybjJbMl0gPSA5MDsKICAgIHBhdHRlcm4yWzNdID0gODg7CiAgICBwYXR0ZXJuMls0XSA9IDg5OwoKICAgIGxldCBtdXQgcGF0dGVybjM6IFtpMzI7IFBBVFRFUk5fU0laRV0gPSBbMDsgUEFUVEVSTl9TSVpFXTsKICAgIGxldCBwYXR0ZXJuM19sZW46IGkzMiA9IDI7CiAgICBwYXR0ZXJuM1swXSA9IDEwMDsKICAgIHBhdHRlcm4zWzFdID0gMTAwOwoKICAgIGxldCBtdXQgY291bnQxOiBpMzIgPSBmaW5kX3BhdHRlcm4oJnRleHQsICZwYXR0ZXJuMSwgcGF0dGVybjFfbGVuKTsKICAgIHByaW50bG5JbnQoY291bnQxKTsKCiAgICBsZXQgbXV0IGNvdW50MjogaTMyID0gZmluZF9wYXR0ZXJuX3dpdGhfd2lsZGNhcmQoJnRleHQsICZwYXR0ZXJuMiwgcGF0dGVybjJfbGVuLCA5MCk7CiAgICBwcmludGxuSW50KGNvdW50Mik7CgogICAgbGV0IG11dCBjb3VudDM6IGkzMiA9IGZpbmRfY29tcGxleF9wYXR0ZXJuKCZ0ZXh0KTsKICAgIHByaW50bG5JbnQoY291bnQzKTsKCiAgICBsZXQgbXV0IHJlc3VsdDogaTMyID0gYW5hbHl6ZV90ZXh0X2ZyZXF1ZW5jeSgmdGV4dCk7CiAgICBwcmludGxuSW50KHJlc3VsdCk7CgogICAgbGV0IG11dCBlcnJvcl9yZXM6IGkzMiA9IHRyaWdnZXJfZXJyb3JfcGF0aCgmdGV4dCwgJnBhdHRlcm4xLCBwYXR0ZXJuMV9sZW4pOwogICAgcHJpbnRsbkludChlcnJvcl9yZXMpOwoKICAgIHByaW50bG5JbnQoOTk5OSk7CiAgICBleGl0KDApOwp9CgpmbiBnZW5lcmF0ZV90ZXh0KHRleHQ6ICZtdXQgW2kzMjsgVEVYVF9TSVpFXSwgc2VlZDogaTMyKSB7CiAgICBsZXQgbXV0IGN1cnJlbnRfc2VlZDogaTMyID0gc2VlZDsKICAgIGxldCBtdXQgaTogaTMyID0gMDsKICAgIHdoaWxlIChpIDwgVEVYVF9TSVpFIGFzIGkzMikgewogICAgICAgIGN1cnJlbnRfc2VlZCA9IChwbV9yYW5kX3VwZGF0ZShjdXJyZW50X3NlZWQpIC8gNjU1MzYpICUgMzI3Njg7CiAgICAgICAgdGV4dFtpIGFzIHVzaXplXSA9IDY1ICsgKGN1cnJlbnRfc2VlZCAlIDI2KTsKICAgICAgICBpZiAoaSAlIDEwID09IDApIHsKICAgICAgICAgICAgdGV4dFtpIGFzIHVzaXplXSA9IDY1ICsgKGkgLyAxMDApOwogICAgICAgIH0KICAgICAgICBpZiAoaSAlIDI3ID09IDApIHsKICAgICAgICAgICAgdGV4dFtpIGFzIHVzaXplXSA9IDY2OwogICAgICAgIH0KICAgICAgICBpZiAoaSAlIDQyID09IDApIHsKICAgICAgICAgICAgdGV4dFtpIGFzIHVzaXplXSA9IDY3OwogICAgICAgIH0KICAgICAgICBpID0gaSArIDE7CiAgICB9Cn0KCmZuIGZpbmRfcGF0dGVybih0ZXh0OiAmW2kzMjsgVEVYVF9TSVpFXSwgcGF0dGVybjogJltpMzI7IFBBVFRFUk5fU0laRV0sIHBfbGVuOiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgbXV0IGNvdW50OiBpMzIgPSAwOwogICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgd2hpbGUgKGkgPD0gVEVYVF9TSVpFIGFzIGkzMiAtIHBfbGVuKSB7CiAgICAgICAgbGV0IG11dCBqOiBpMzIgPSAwOwogICAgICAgIGxldCBtdXQgZm91bmQ6IGJvb2wgPSB0cnVlOwogICAgICAgIHdoaWxlIChqIDwgcF9sZW4pIHsKICAgICAgICAgICAgaWYgKHRleHRbKGkgKyBqKSBhcyB1c2l6ZV0gIT0gcGF0dGVybltqIGFzIHVzaXplXSkgewogICAgICAgICAgICAgICAgZm91bmQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGogPSBqICsgMTsKICAgICAgICB9CiAgICAgICAgaWYgKGZvdW5kKSB7CiAgICAgICAgICAgIGNvdW50ID0gY291bnQgKyAxOwogICAgICAgIH0KICAgICAgICBpID0gaSArIDE7CiAgICB9CiAgICByZXR1cm4gY291bnQ7Cn0KCmZuIGZpbmRfcGF0dGVybl93aXRoX3dpbGRjYXJkKAogICAgdGV4dDogJltpMzI7IFRFWFRfU0laRV0sCiAgICBwYXR0ZXJuOiAmW2kzMjsgUEFUVEVSTl9TSVpFXSwKICAgIHBfbGVuOiBpMzIsCiAgICB3aWxkY2FyZDogaTMyLAopIC0+IGkzMiB7CiAgICBsZXQgbXV0IGNvdW50OiBpMzIgPSAwOwogICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgd2hpbGUgKGkgPD0gVEVYVF9TSVpFIGFzIGkzMiAtIHBfbGVuKSB7CiAgICAgICAgbGV0IG11dCBqOiBpMzIgPSAwOwogICAgICAgIGxldCBtdXQgZm91bmQ6IGJvb2wgPSB0cnVlOwogICAgICAgIHdoaWxlIChqIDwgcF9sZW4pIHsKICAgICAgICAgICAgaWYgKHBhdHRlcm5baiBhcyB1c2l6ZV0gIT0gd2lsZGNhcmQgJiYgdGV4dFsoaSArIGopIGFzIHVzaXplXSAhPSBwYXR0ZXJuW2ogYXMgdXNpemVdKSB7CiAgICAgICAgICAgICAgICBmb3VuZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaiA9IGogKyAxOwogICAgICAgIH0KICAgICAgICBpZiAoZm91bmQpIHsKICAgICAgICAgICAgY291bnQgPSBjb3VudCArIDE7CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KICAgIHJldHVybiBjb3VudDsKfQoKZm4gZmluZF9jb21wbGV4X3BhdHRlcm4odGV4dDogJltpMzI7IFRFWFRfU0laRV0pIC0+IGkzMiB7CiAgICBsZXQgbXV0IGNvdW50OiBpMzIgPSAwOwogICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgd2hpbGUgKGkgPCBURVhUX1NJWkUgYXMgaTMyIC0gNSkgewogICAgICAgIGlmICh0ZXh0W2kgYXMgdXNpemVdID09IHRleHRbaSBhcyB1c2l6ZSArIDNdCiAgICAgICAgICAgICYmIHRleHRbaSBhcyB1c2l6ZSArIDFdID09IHRleHRbaSBhcyB1c2l6ZSArIDRdCiAgICAgICAgICAgICYmIHRleHRbaSBhcyB1c2l6ZV0gPCB0ZXh0W2kgYXMgdXNpemUgKyAyXSkKICAgICAgICB7CiAgICAgICAgICAgIGxldCBtdXQgc3VtOiBpMzIgPSAwOwogICAgICAgICAgICBsZXQgbXV0IGs6IGkzMiA9IDA7CiAgICAgICAgICAgIHdoaWxlIChrIDwgNSkgewogICAgICAgICAgICAgICAgc3VtID0gc3VtICsgdGV4dFsoaSArIGspIGFzIHVzaXplXTsKICAgICAgICAgICAgICAgIGsgPSBrICsgMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc3VtID4gMzUwKSB7CiAgICAgICAgICAgICAgICBjb3VudCA9IGNvdW50ICsgMTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpID0gaSArIDE7CiAgICB9CiAgICByZXR1cm4gY291bnQ7Cn0KCmZuIGFuYWx5emVfdGV4dF9mcmVxdWVuY3kodGV4dDogJltpMzI7IFRFWFRfU0laRV0pIC0+IGkzMiB7CiAgICBsZXQgbXV0IGZyZXE6IFtpMzI7IDI2XSA9IFswOyAyNl07CiAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CiAgICB3aGlsZSAoaSA8IFRFWFRfU0laRSBhcyBpMzIpIHsKICAgICAgICBsZXQgY2hhcl9jb2RlOiBpMzIgPSB0ZXh0W2kgYXMgdXNpemVdOwogICAgICAgIGlmIChjaGFyX2NvZGUgPj0gNjUgJiYgY2hhcl9jb2RlIDw9IDkwKSB7CiAgICAgICAgICAgIGZyZXFbY2hhcl9jb2RlIGFzIHVzaXplIC0gNjVdID0gZnJlcVtjaGFyX2NvZGUgYXMgdXNpemUgLSA2NV0gKyAxOwogICAgICAgIH0KICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgbGV0IG11dCBtYXhfZnJlcTogaTMyID0gMDsKICAgIGxldCBtdXQgbWF4X2NoYXI6IGkzMiA9IC0xOwogICAgaSA9IDA7CiAgICB3aGlsZSAoaSA8IDI2KSB7CiAgICAgICAgaWYgKGZyZXFbaSBhcyB1c2l6ZV0gPiBtYXhfZnJlcSkgewogICAgICAgICAgICBtYXhfZnJlcSA9IGZyZXFbaSBhcyB1c2l6ZV07CiAgICAgICAgICAgIG1heF9jaGFyID0gaSArIDY1OwogICAgICAgIH0KICAgICAgICBpID0gaSArIDE7CiAgICB9CiAgICByZXR1cm4gbWF4X2NoYXIgKiAxMDAwICsgbWF4X2ZyZXE7Cn0KCmZuIHN0YXRlX21hY2hpbmVfc2VhcmNoKHRleHQ6ICZbaTMyOyBURVhUX1NJWkVdKSAtPiBpMzIgewogICAgbGV0IG11dCBzdGF0ZTogaTMyID0gMDsKICAgIGxldCBtdXQgY291bnQ6IGkzMiA9IDA7CiAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CiAgICB3aGlsZSAoaSA8IFRFWFRfU0laRSBhcyBpMzIpIHsKICAgICAgICBsZXQgY3VycmVudF9jaGFyOiBpMzIgPSB0ZXh0W2kgYXMgdXNpemVdOwogICAgICAgIGlmIChzdGF0ZSA9PSAwKSB7CiAgICAgICAgICAgIGlmIChjdXJyZW50X2NoYXIgPT0gNjUpIHsKICAgICAgICAgICAgICAgIHN0YXRlID0gMTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT0gMSkgewogICAgICAgICAgICBpZiAoY3VycmVudF9jaGFyID09IDY2KSB7CiAgICAgICAgICAgICAgICBzdGF0ZSA9IDI7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudF9jaGFyICE9IDY1KSB7CiAgICAgICAgICAgICAgICBzdGF0ZSA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09IDIpIHsKICAgICAgICAgICAgaWYgKGN1cnJlbnRfY2hhciA9PSA2NykgewogICAgICAgICAgICAgICAgc3RhdGUgPSAzOwogICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRfY2hhciA9PSA2NSkgewogICAgICAgICAgICAgICAgc3RhdGUgPSAxOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc3RhdGUgPSAwOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PSAzKSB7CiAgICAgICAgICAgIGNvdW50ID0gY291bnQgKyAxOwogICAgICAgICAgICBpZiAoY3VycmVudF9jaGFyID09IDY1KSB7CiAgICAgICAgICAgICAgICBzdGF0ZSA9IDE7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzdGF0ZSA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQogICAgcmV0dXJuIGNvdW50Owp9CgpmbiB0cmlnZ2VyX2Vycm9yX3BhdGgodGV4dDogJltpMzI7IFRFWFRfU0laRV0sIHBhdHRlcm46ICZbaTMyOyBQQVRURVJOX1NJWkVdLCBwX2xlbjogaTMyKSAtPiBpMzIgewogICAgbGV0IG11dCBsb2NhbF90ZXh0OiBbaTMyOyBURVhUX1NJWkVdID0gKnRleHQ7CiAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CiAgICB3aGlsZSAoaSA8IFRFWFRfU0laRSBhcyBpMzIpIHsKICAgICAgICBsb2NhbF90ZXh0W2kgYXMgdXNpemVdID0gbG9jYWxfdGV4dFtpIGFzIHVzaXplXSArIGkgJSAxMDsKICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgbGV0IG11dCBjb3VudDogaTMyID0gMDsKICAgIGkgPSAwOwogICAgd2hpbGUgKGkgPD0gVEVYVF9TSVpFIGFzIGkzMiAtIHBfbGVuKSB7CiAgICAgICAgbGV0IG11dCBqOiBpMzIgPSAwOwogICAgICAgIGxldCBtdXQgbWF0Y2hfc2NvcmU6IGkzMiA9IDA7CiAgICAgICAgd2hpbGUgKGogPCBwX2xlbikgewogICAgICAgICAgICBpZiAobG9jYWxfdGV4dFsoaSArIGopIGFzIHVzaXplXSA9PSBwYXR0ZXJuW2ogYXMgdXNpemVdKSB7CiAgICAgICAgICAgICAgICBtYXRjaF9zY29yZSA9IG1hdGNoX3Njb3JlICsgMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBqID0gaiArIDE7CiAgICAgICAgfQoKICAgICAgICBpZiAobWF0Y2hfc2NvcmUgPiAwKSB7CiAgICAgICAgICAgIGxldCBtdXQgaXNfcHJpbWU6IGJvb2wgPSB0cnVlOwogICAgICAgICAgICBpZiAobWF0Y2hfc2NvcmUgPCAyKSB7CiAgICAgICAgICAgICAgICBpc19wcmltZSA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGxldCBtdXQgazogaTMyID0gMjsKICAgICAgICAgICAgd2hpbGUgKGsgKiBrIDw9IG1hdGNoX3Njb3JlKSB7CiAgICAgICAgICAgICAgICBpZiAobWF0Y2hfc2NvcmUgJSBrID09IDApIHsKICAgICAgICAgICAgICAgICAgICBpc19wcmltZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgayA9IGsgKyAxOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoaXNfcHJpbWUpIHsKICAgICAgICAgICAgICAgIGNvdW50ID0gY291bnQgKyAxOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICBsZXQgbXV0IGFub3RoZXJfdmFsOiBpMzIgPSAwOwogICAgaSA9IDA7CiAgICB3aGlsZSAoaSA8IDEwMCkgewogICAgICAgIGlmIChpICUgMyA9PSAwKSB7CiAgICAgICAgICAgIGFub3RoZXJfdmFsID0gYW5vdGhlcl92YWwgKyB0ZXh0W2kgYXMgdXNpemVdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFub3RoZXJfdmFsID0gYW5vdGhlcl92YWwgLSB0ZXh0W2kgYXMgdXNpemVdOwogICAgICAgIH0KICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgbGV0IGZpbmFsX3Jlc3VsdDogaTMyID0gY291bnQgKyBhbm90aGVyX3ZhbDsKICAgIGlmIChmaW5hbF9yZXN1bHQgPiAxMDAwKSB7CiAgICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICByZXR1cm4gZmluYWxfcmVzdWx0Owp9CgpmbiBhbm90aGVyX2xldmVsX29mX3NlYXJjaCh0ZXh0OiAmW2kzMjsgVEVYVF9TSVpFXSkgewogICAgbGV0IG11dCBwYXR0ZXJuOiBbaTMyOyBQQVRURVJOX1NJWkVdID0gWzA7IFBBVFRFUk5fU0laRV07CiAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CiAgICB3aGlsZSAoaSA8IFBBVFRFUk5fU0laRSBhcyBpMzIpIHsKICAgICAgICBwYXR0ZXJuW2kgYXMgdXNpemVdID0gNzAgKyBpICUgNTsKICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgbGV0IG11dCBwb3M6IGkzMiA9IC0xOwogICAgaSA9IDA7CiAgICB3aGlsZSAoaSA8IChURVhUX1NJWkUgLSBQQVRURVJOX1NJWkUpIGFzIGkzMikgewogICAgICAgIGxldCBtdXQgZm91bmQ6IGJvb2wgPSB0cnVlOwogICAgICAgIGxldCBtdXQgajogaTMyID0gMDsKICAgICAgICB3aGlsZSAoaiA8IFBBVFRFUk5fU0laRSBhcyBpMzIpIHsKICAgICAgICAgICAgaWYgKHRleHRbKGkgKyBqKSBhcyB1c2l6ZV0gIT0gcGF0dGVybltqIGFzIHVzaXplXSkgewogICAgICAgICAgICAgICAgZm91bmQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGogPSBqICsgMTsKICAgICAgICB9CiAgICAgICAgaWYgKGZvdW5kKSB7CiAgICAgICAgICAgIHBvcyA9IGk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBpID0gaSArIDE7CiAgICB9CiAgICBwcmludGxuSW50KHBvcyk7Cn0KCmZuIHlldF9hbm90aGVyX3NlYXJjaF9mdW5jdGlvbigpIHsKICAgIGxldCBtdXQgdGV4dDogW2kzMjsgVEVYVF9TSVpFXSA9IFswOyBURVhUX1NJWkVdOwogICAgZ2VuZXJhdGVfdGV4dCgmbXV0IHRleHQsIDU0MzIxKTsKICAgIGxldCBtdXQgcmVzdWx0MTogaTMyID0gc3RhdGVfbWFjaGluZV9zZWFyY2goJnRleHQpOwogICAgYW5vdGhlcl9sZXZlbF9vZl9zZWFyY2goJnRleHQpOwogICAgcHJpbnRsbkludChyZXN1bHQxKTsKfQo=", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (33, "comprehensive33", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (34, "comprehensive34", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (35, "comprehensive35", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (36, "comprehensive36", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (37, "comprehensive37", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (38, "comprehensive38", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (39, "comprehensive39", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (40, "comprehensive40", 2, "LyoKVGVzdCBQYWNrYWdlOiBTZW1hbnRpYy0yClRlc3QgVGFyZ2V0OiBjb21wcmVoZW5zaXZlCkF1dGhvcjogV2VueGluIFpoZW5nClRpbWU6IDIwMjUtMDgtMTcKVmVyZGljdDogUGFzcwpUZXN0IE5hbWU6IExhcmdlLVNjYWxlIEFycmF5IGFuZCBNYXRyaXggQ29tcHV0YXRpb25zClN1bW1hcnk6IFRoaXMgdGVzdCBjb21wcmVoZW5zaXZlbHkgZXZhbHVhdGVzIGNvbXBpbGVyIG9wdGltaXphdGlvbnMgZm9yOgpEZXRhaWxzOgpNdWx0aS1kaW1lbnNpb25hbCBhcnJheSBhY2Nlc3MgcGF0dGVybnMgYW5kIGFkZHJlc3MgY2FsY3VsYXRpb24uCkxvb3AgaW50ZXJjaGFuZ2UsIGZ1c2lvbiwgYW5kIHRpbGluZyBmb3IgaW1wcm92ZWQgY2FjaGUgcGVyZm9ybWFuY2UuClN0cmVuZ3RoIHJlZHVjdGlvbiBhbmQgaW5kdWN0aW9uIHZhcmlhYmxlIGFuYWx5c2lzIGluIG5lc3RlZCBsb29wcy4KVmVjdG9yaXphdGlvbiBvZiBhcml0aG1ldGljIG9wZXJhdGlvbnMgb24gYXJyYXkgZWxlbWVudHMgKGlmIChhcHBsaWNhYmxlKS4pCkNvbXBsZXggZGF0YSBkZXBlbmRlbmNpZXMgYW5kIHRoZWlyIGltcGFjdCBvbiBsb29wIHBhcmFsbGVsaXphdGlvbi4KQnJhbmNoIHByZWRpY3Rpb24gd2l0aGluIGxvb3AgYm9kaWVzIGZvciBkYXRhLWRlcGVuZGVudCBvcGVyYXRpb25zLgpDb3JyZWN0IGhhbmRsaW5nIG9mIGFycmF5IGJvdW5kcyBhbmQgbWVtb3J5IGFjY2Vzcy4KKi8KCi8vIGNvbXByZWhlbnNpdmU0MC5yeCAtIExhcmdlLVNjYWxlIEFycmF5IGFuZCBNYXRyaXggQ29tcHV0YXRpb25zCi8vIFRoaXMgdGVzdCBjb21wcmVoZW5zaXZlbHkgZXZhbHVhdGVzIGNvbXBpbGVyIG9wdGltaXphdGlvbnMgZm9yOgovLyAtIE11bHRpLWRpbWVuc2lvbmFsIGFycmF5IGFjY2VzcyBwYXR0ZXJucyBhbmQgYWRkcmVzcyBjYWxjdWxhdGlvbi4KLy8gLSBMb29wIGludGVyY2hhbmdlLCBmdXNpb24sIGFuZCB0aWxpbmcgZm9yIGltcHJvdmVkIGNhY2hlIHBlcmZvcm1hbmNlLgovLyAtIFN0cmVuZ3RoIHJlZHVjdGlvbiBhbmQgaW5kdWN0aW9uIHZhcmlhYmxlIGFuYWx5c2lzIGluIG5lc3RlZCBsb29wcy4KLy8gLSBWZWN0b3JpemF0aW9uIG9mIGFyaXRobWV0aWMgb3BlcmF0aW9ucyBvbiBhcnJheSBlbGVtZW50cyAoaWYgYXBwbGljYWJsZSkuCi8vIC0gQ29tcGxleCBkYXRhIGRlcGVuZGVuY2llcyBhbmQgdGhlaXIgaW1wYWN0IG9uIGxvb3AgcGFyYWxsZWxpemF0aW9uLgovLyAtIEJyYW5jaCBwcmVkaWN0aW9uIHdpdGhpbiBsb29wIGJvZGllcyBmb3IgZGF0YS1kZXBlbmRlbnQgb3BlcmF0aW9ucy4KLy8gLSBDb3JyZWN0IGhhbmRsaW5nIG9mIGFycmF5IGJvdW5kcyBhbmQgbWVtb3J5IGFjY2Vzcy4KCmNvbnN0IFNJWkU6IGkzMiA9IDQwOwpjb25zdCBIQUxGX1NJWkU6IGkzMiA9IDIwOwoKZm4gaW5pdF9tYXRyaXgobWF0OiBbW2kzMjsgNDBdOyA0MF0sIHNlZWQ6IGkzMikgLT4gW1tpMzI7IDQwXTsgNDBdIHsKICAgIGxldCBtdXQgaTogaTMyID0gMDsKICAgIGxldCBtdXQgbmV3X21hdDogW1tpMzI7IDQwXTsgNDBdID0gbWF0OwogICAgd2hpbGUgKGkgPCBTSVpFKSB7CiAgICAgICAgbGV0IG11dCBqOiBpMzIgPSAwOwogICAgICAgIHdoaWxlIChqIDwgU0laRSkgewogICAgICAgICAgICBuZXdfbWF0W2kgYXMgdXNpemVdW2ogYXMgdXNpemVdID0gKGkgKiBTSVpFICsgaiArIHNlZWQpICUgMTAwOwogICAgICAgICAgICBqID0gaiArIDE7CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KICAgIHJldHVybiBuZXdfbWF0Owp9CgpmbiBtYXRyaXhfbXVsdGlwbHkoYTogW1tpMzI7IDQwXTsgNDBdLCBiOiBbW2kzMjsgNDBdOyA0MF0pIC0+IFtbaTMyOyA0MF07IDQwXSB7CiAgICBsZXQgbXV0IHJlc3VsdDogW1tpMzI7IDQwXTsgNDBdID0gW1swOyA0MF07IDQwXTsKICAgIGxldCBtdXQgaTogaTMyID0gMDsKICAgIHdoaWxlIChpIDwgU0laRSkgewogICAgICAgIGxldCBtdXQgajogaTMyID0gMDsKICAgICAgICB3aGlsZSAoaiA8IFNJWkUpIHsKICAgICAgICAgICAgLy8gVXNlIHUzMiBmb3IgaW50ZXJtZWRpYXRlIG11bHRpcGx5LWFkZCB0byBlbXVsYXRlIHR3bydzLWNvbXBsZW1lbnQgd3JhcHBpbmcKICAgICAgICAgICAgLy8gd2l0aG91dCBjaGFuZ2luZyB0aGUgYXJyYXkgZWxlbWVudCB0eXBlcyAoc3RpbGwgaTMyKS4gVGhpcyBhdm9pZHMgcGFuaWMKICAgICAgICAgICAgLy8gZnJvbSBzaWduZWQgb3ZlcmZsb3cgaW4gZGVidWcgd2hpbGUgcHJlc2VydmluZyBiaXR3aXNlIHdyYXBwaW5nIHNlbWFudGljcy4KICAgICAgICAgICAgbGV0IG11dCBzdW1fdTogdTMyID0gMHUzMjsKICAgICAgICAgICAgbGV0IG11dCBrOiBpMzIgPSAwOwogICAgICAgICAgICB3aGlsZSAoayA8IFNJWkUpIHsKICAgICAgICAgICAgICAgIGxldCBhX3U6IHUzMiA9IGFbaSBhcyB1c2l6ZV1bayBhcyB1c2l6ZV0gYXMgdTMyOwogICAgICAgICAgICAgICAgbGV0IGJfdTogdTMyID0gYltrIGFzIHVzaXplXVtqIGFzIHVzaXplXSBhcyB1MzI7CiAgICAgICAgICAgICAgICBzdW1fdSA9IHN1bV91ICsgKGFfdSAqIGJfdSk7CiAgICAgICAgICAgICAgICBrID0gayArIDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVzdWx0W2kgYXMgdXNpemVdW2ogYXMgdXNpemVdID0gc3VtX3UgYXMgaTMyOwogICAgICAgICAgICBqID0gaiArIDE7CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7Cn0KCmZuIGFwcGx5X3N0ZW5jaWwobWF0OiBbW2kzMjsgNDBdOyA0MF0pIC0+IFtbaTMyOyA0MF07IDQwXSB7CiAgICBsZXQgbXV0IHJlc3VsdDogW1tpMzI7IDQwXTsgNDBdID0gW1swOyA0MF07IDQwXTsKICAgIGxldCBtdXQgaTogaTMyID0gMTsKICAgIHdoaWxlIChpIDwgU0laRSAtIDEpIHsKICAgICAgICBsZXQgbXV0IGo6IGkzMiA9IDE7CiAgICAgICAgd2hpbGUgKGogPCBTSVpFIC0gMSkgewogICAgICAgICAgICBsZXQgbXV0IHN1bTogaTMyID0gMDsKICAgICAgICAgICAgc3VtID0gc3VtICsgbWF0W2kgYXMgdXNpemUtMV1baiBhcyB1c2l6ZS0xXTsKICAgICAgICAgICAgc3VtID0gc3VtICsgbWF0W2kgYXMgdXNpemUtMV1baiBhcyB1c2l6ZV07CiAgICAgICAgICAgIHN1bSA9IHN1bSArIG1hdFtpIGFzIHVzaXplLTFdW2ogYXMgdXNpemUrMV07CiAgICAgICAgICAgIHN1bSA9IHN1bSArIG1hdFtpIGFzIHVzaXplXVtqIGFzIHVzaXplLTFdOwogICAgICAgICAgICBzdW0gPSBzdW0gKyBtYXRbaSBhcyB1c2l6ZV1baiBhcyB1c2l6ZV0gKiAtODsKICAgICAgICAgICAgc3VtID0gc3VtICsgbWF0W2kgYXMgdXNpemVdW2ogYXMgdXNpemUrMV07CiAgICAgICAgICAgIHN1bSA9IHN1bSArIG1hdFtpIGFzIHVzaXplKzFdW2ogYXMgdXNpemUtMV07CiAgICAgICAgICAgIHN1bSA9IHN1bSArIG1hdFtpIGFzIHVzaXplKzFdW2ogYXMgdXNpemVdOwogICAgICAgICAgICBzdW0gPSBzdW0gKyBtYXRbaSBhcyB1c2l6ZSsxXVtqIGFzIHVzaXplKzFdOwogICAgICAgICAgICByZXN1bHRbaSBhcyB1c2l6ZV1baiBhcyB1c2l6ZV0gPSBzdW0gLyAzOwogICAgICAgICAgICBqID0gaiArIDE7CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7Cn0KCmZuIHRyYW5zcG9zZV9hbmRfYWRkKG1hdDogW1tpMzI7IDQwXTsgNDBdKSAtPiBbW2kzMjsgNDBdOyA0MF0gewogICAgbGV0IG11dCByZXN1bHQ6IFtbaTMyOyA0MF07IDQwXSA9IG1hdDsKICAgIGxldCBtdXQgaTogaTMyID0gMDsKICAgIHdoaWxlIChpIDwgU0laRSkgewogICAgICAgIGxldCBtdXQgajogaTMyID0gaTsKICAgICAgICB3aGlsZSAoaiA8IFNJWkUpIHsKICAgICAgICAgICAgbGV0IHRlbXA6IGkzMiA9IHJlc3VsdFtpIGFzIHVzaXplXVtqIGFzIHVzaXplXTsKICAgICAgICAgICAgcmVzdWx0W2kgYXMgdXNpemVdW2ogYXMgdXNpemVdID0gcmVzdWx0W2ogYXMgdXNpemVdW2kgYXMgdXNpemVdICsgdGVtcDsKICAgICAgICAgICAgcmVzdWx0W2ogYXMgdXNpemVdW2kgYXMgdXNpemVdID0gdGVtcCArIHJlc3VsdFtqIGFzIHVzaXplXVtpIGFzIHVzaXplXTsKICAgICAgICAgICAgaiA9IGogKyAxOwogICAgICAgIH0KICAgICAgICBpID0gaSArIDE7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0Owp9CgpmbiBzdWJfbWF0cml4X3N1bShtYXQ6IFtbaTMyOyA0MF07IDQwXSkgLT4gaTMyIHsKICAgIGxldCBtdXQgdG90YWxfc3VtOiBpMzIgPSAwOwogICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgd2hpbGUgKGkgPCBIQUxGX1NJWkUpIHsKICAgICAgICBsZXQgbXV0IGo6IGkzMiA9IDA7CiAgICAgICAgd2hpbGUgKGogPCBIQUxGX1NJWkUpIHsKICAgICAgICAgICAgdG90YWxfc3VtID0gdG90YWxfc3VtICsgbWF0W2kgYXMgdXNpemVdW2ogYXMgdXNpemVdOwogICAgICAgICAgICBqID0gaiArIDE7CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KICAgIGkgPSBIQUxGX1NJWkU7CiAgICB3aGlsZSAoaSA8IFNJWkUpIHsKICAgICAgICBsZXQgbXV0IGo6IGkzMiA9IEhBTEZfU0laRTsKICAgICAgICB3aGlsZSAoaiA8IFNJWkUpIHsKICAgICAgICAgICAgdG90YWxfc3VtID0gdG90YWxfc3VtICsgbWF0W2kgYXMgdXNpemVdW2ogYXMgdXNpemVdOwogICAgICAgICAgICBqID0gaiArIDE7CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KICAgIHJldHVybiB0b3RhbF9zdW07Cn0KCmZuIGRpYWdvbmFsX3Byb2Nlc3NpbmcobWF0OiBbW2kzMjsgNDBdOyA0MF0pIC0+IGkzMiB7CiAgICBsZXQgbXV0IHJlc3VsdDogaTMyID0gMDsKICAgIGxldCBtdXQgaTogaTMyID0gMDsKICAgIHdoaWxlIChpIDwgU0laRSkgewogICAgICAgIGlmIChtYXRbaSBhcyB1c2l6ZV1baSBhcyB1c2l6ZV0gPiA1MCkgewogICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgKyBtYXRbaSBhcyB1c2l6ZV1bKFNJWkUgLSAxIC0gaSkgYXMgdXNpemVdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCAtIG1hdFtpIGFzIHVzaXplXVtpIGFzIHVzaXplXTsKICAgICAgICB9CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKfQoKZm4gbWFpbigpIHsKICAgIGxldCBtdXQgbWF0cml4X2E6IFtbaTMyOyA0MF07IDQwXSA9IFtbMDsgNDBdOyA0MF07CiAgICBsZXQgbXV0IG1hdHJpeF9iOiBbW2kzMjsgNDBdOyA0MF0gPSBbWzA7IDQwXTsgNDBdOwoKICAgIG1hdHJpeF9hID0gaW5pdF9tYXRyaXgobWF0cml4X2EsIDEyMyk7CiAgICBtYXRyaXhfYiA9IGluaXRfbWF0cml4KG1hdHJpeF9iLCA0NTYpOwoKICAgIGxldCBtdXQgbWF0cml4X2M6IFtbaTMyOyA0MF07IDQwXSA9IG1hdHJpeF9tdWx0aXBseShtYXRyaXhfYSwgbWF0cml4X2IpOwoKICAgIGxldCBtdXQgaTogaTMyID0gMDsKICAgIHdoaWxlIChpIDwgNSkgewogICAgICAgIG1hdHJpeF9jID0gYXBwbHlfc3RlbmNpbChtYXRyaXhfYyk7CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQoKICAgIGxldCBzdW0xOiBpMzIgPSBzdWJfbWF0cml4X3N1bShtYXRyaXhfYyk7CiAgICBwcmludGxuSW50KHN1bTEpOwoKICAgIGxldCBkaWFnX3JlczE6IGkzMiA9IGRpYWdvbmFsX3Byb2Nlc3NpbmcobWF0cml4X2MpOwogICAgcHJpbnRsbkludChkaWFnX3JlczEpOwoKICAgIGxldCBtdXQgbWF0cml4X2Q6IFtbaTMyOyA0MF07IDQwXSA9IHRyYW5zcG9zZV9hbmRfYWRkKG1hdHJpeF9jKTsKCiAgICBsZXQgc3VtMjogaTMyID0gc3ViX21hdHJpeF9zdW0obWF0cml4X2QpOwogICAgcHJpbnRsbkludChzdW0yKTsKCiAgICBsZXQgZGlhZ19yZXMyOiBpMzIgPSBkaWFnb25hbF9wcm9jZXNzaW5nKG1hdHJpeF9kKTsKICAgIHByaW50bG5JbnQoZGlhZ19yZXMyKTsKCiAgICBsZXQgbXV0IG1hdHJpeF9lOiBbW2kzMjsgNDBdOyA0MF0gPSBtYXRyaXhfbXVsdGlwbHkobWF0cml4X2QsIG1hdHJpeF9hKTsKCiAgICBsZXQgc3VtMzogaTMyID0gc3ViX21hdHJpeF9zdW0obWF0cml4X2UpOwogICAgcHJpbnRsbkludChzdW0zKTsKCiAgICBsZXQgbXV0IGNoZWNrc3VtOiBpMzIgPSAwOwogICAgbGV0IG11dCBqOiBpMzIgPSAwOwogICAgd2hpbGUgKGogPCBTSVpFKSB7CiAgICAgICAgbGV0IG11dCBrOiBpMzIgPSAwOwogICAgICAgIHdoaWxlIChrIDwgU0laRSkgewogICAgICAgICAgICBpZiAoKGogKyBrKSAlIDIgPT0gMCkgewogICAgICAgICAgICAgICAgY2hlY2tzdW0gPSBjaGVja3N1bSArIG1hdHJpeF9lW2ogYXMgdXNpemVdW2sgYXMgdXNpemVdOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY2hlY2tzdW0gPSBjaGVja3N1bSAtIG1hdHJpeF9lW2ogYXMgdXNpemVdW2sgYXMgdXNpemVdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGsgPSBrICsgMTsKICAgICAgICB9CiAgICAgICAgaiA9IGogKyAxOwogICAgfQogICAgcHJpbnRsbkludChjaGVja3N1bSk7CgogICAgbGV0IG11dCBtOiBpMzIgPSAwOwogICAgd2hpbGUgKG0gPCBTSVpFKSB7CiAgICAgICAgbGV0IG11dCByb3dfbWF4OiBpMzIgPSAtOTk5OTk5OwogICAgICAgIGxldCBtdXQgbjogaTMyID0gMDsKICAgICAgICB3aGlsZSAobiA8IFNJWkUpIHsKICAgICAgICAgICAgaWYgKG1hdHJpeF9lW20gYXMgdXNpemVdW24gYXMgdXNpemVdID4gcm93X21heCkgewogICAgICAgICAgICAgICAgcm93X21heCA9IG1hdHJpeF9lW20gYXMgdXNpemVdW24gYXMgdXNpemVdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG4gPSBuICsgMTsKICAgICAgICB9CiAgICAgICAgcHJpbnRsbkludChyb3dfbWF4KTsKICAgICAgICBtID0gbSArIDE7CiAgICB9CgogICAgbGV0IG11dCBwOiBpMzIgPSAwOwogICAgd2hpbGUgKHAgPCBTSVpFKSB7CiAgICAgICAgbGV0IG11dCBjb2xfbWluOiBpMzIgPSA5OTk5OTk7CiAgICAgICAgbGV0IG11dCBxOiBpMzIgPSAwOwogICAgICAgIHdoaWxlIChxIDwgU0laRSkgewogICAgICAgICAgICBpZiAobWF0cml4X2VbcSBhcyB1c2l6ZV1bcCBhcyB1c2l6ZV0gPCBjb2xfbWluKSB7CiAgICAgICAgICAgICAgICBjb2xfbWluID0gbWF0cml4X2VbcSBhcyB1c2l6ZV1bcCBhcyB1c2l6ZV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcSA9IHEgKyAxOwogICAgICAgIH0KICAgICAgICBwcmludGxuSW50KGNvbF9taW4pOwogICAgICAgIHAgPSBwICsgMTsKICAgIH0KCiAgICBsZXQgbXV0IHRlbXBfbWF0OiBbW2kzMjsgNDBdOyA0MF0gPSBtYXRyaXhfYTsKICAgIGxldCBtdXQgcjogaTMyID0gMDsKICAgIHdoaWxlIChyIDwgU0laRSkgewogICAgICAgIGxldCBtdXQgczogaTMyID0gMDsKICAgICAgICB3aGlsZSAocyA8IFNJWkUpIHsKICAgICAgICAgICAgbGV0IHRlbXBfdmFsOiBpMzIgPSB0ZW1wX21hdFtyIGFzIHVzaXplXVtzIGFzIHVzaXplXTsKICAgICAgICAgICAgdGVtcF9tYXRbciBhcyB1c2l6ZV1bcyBhcyB1c2l6ZV0gPSB0ZW1wX21hdFtzIGFzIHVzaXplXVtyIGFzIHVzaXplXTsKICAgICAgICAgICAgdGVtcF9tYXRbcyBhcyB1c2l6ZV1bciBhcyB1c2l6ZV0gPSB0ZW1wX3ZhbDsKICAgICAgICAgICAgcyA9IHMgKyAxOwogICAgICAgIH0KICAgICAgICByID0gciArIDE7CiAgICB9CgogICAgbGV0IG11dCBmaW5hbF9zdW06IGkzMiA9IDA7CiAgICBsZXQgbXV0IHQ6IGkzMiA9IDA7CiAgICB3aGlsZSAodCA8IFNJWkUpIHsKICAgICAgICBsZXQgbXV0IHU6IGkzMiA9IDA7CiAgICAgICAgd2hpbGUgKHUgPCBTSVpFKSB7CiAgICAgICAgICAgIGZpbmFsX3N1bSA9IGZpbmFsX3N1bSArIHRlbXBfbWF0W3QgYXMgdXNpemVdW3UgYXMgdXNpemVdOwogICAgICAgICAgICB1ID0gdSArIDE7CiAgICAgICAgfQogICAgICAgIHQgPSB0ICsgMTsKICAgIH0KICAgIHByaW50bG5JbnQoZmluYWxfc3VtKTsKICAgIGV4aXQoMCk7Cn0K", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (41, "comprehensive41", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (42, "comprehensive42", 2, "LyoKVGVzdCBQYWNrYWdlOiBTZW1hbnRpYy0yClRlc3QgVGFyZ2V0OiBjb21wcmVoZW5zaXZlCkF1dGhvcjogV2VueGluIFpoZW5nClRpbWU6IDIwMjUtMDgtMTcKVmVyZGljdDogUGFzcwpUZXN0IE5hbWU6IEN1c3RvbSBNZW1vcnkgQWxsb2NhdG9yIFNpbXVsYXRpb24KU3VtbWFyeTogVGhpcyB0ZXN0IGNvbXByZWhlbnNpdmVseSBldmFsdWF0ZXMgY29tcGlsZXIgb3B0aW1pemF0aW9ucyBmb3I6CkRldGFpbHM6ClNpbXVsYXRlZCBwb2ludGVyIGFyaXRobWV0aWMgYW5kIG1lbW9yeSBtYW5hZ2VtZW50IHRocm91Z2ggYXJyYXkgbWFuaXB1bGF0aW9uLgpDb21wbGV4IGxpbmtlZC1saXN0IGRhdGEgc3RydWN0dXJlIHVwZGF0ZXMgd2l0aGluIGEgbGFyZ2UgYnVmZmVyLgpMb29wLWludGVuc2l2ZSBhbGxvY2F0aW9uIGFuZCBkZWFsbG9jYXRpb24gcGF0dGVybnMgdG8gdGVzdCBwZXJmb3JtYW5jZS4KTWFuYWdlbWVudCBvZiBtZW1vcnkgZnJhZ21lbnRhdGlvbiBhbmQgY29hbGVzY2luZyBsb2dpYy4KT3B0aW1pemF0aW9uIG9mIGRlZXBseSBuZXN0ZWQgY29uZGl0aW9uYWwgc3RhdGVtZW50cyBmb3IgYmxvY2sgbWFuYWdlbWVudC4KU2NvcGUgcmVzb2x1dGlvbiBmb3IgdmFyaWFibGVzIGFjcm9zcyBkaWZmZXJlbnQgYWxsb2NhdGlvbiBwaGFzZXMuCiovCgovLyBjb21wcmVoZW5zaXZlNDIucnggLSBDdXN0b20gTWVtb3J5IEFsbG9jYXRvciBTaW11bGF0aW9uCi8vIFRoaXMgdGVzdCBjb21wcmVoZW5zaXZlbHkgZXZhbHVhdGVzIGNvbXBpbGVyIG9wdGltaXphdGlvbnMgZm9yOgovLyAtIFNpbXVsYXRlZCBwb2ludGVyIGFyaXRobWV0aWMgYW5kIG1lbW9yeSBtYW5hZ2VtZW50IHRocm91Z2ggYXJyYXkgbWFuaXB1bGF0aW9uLgovLyAtIENvbXBsZXggbGlua2VkLWxpc3QgZGF0YSBzdHJ1Y3R1cmUgdXBkYXRlcyB3aXRoaW4gYSBsYXJnZSBidWZmZXIuCi8vIC0gTG9vcC1pbnRlbnNpdmUgYWxsb2NhdGlvbiBhbmQgZGVhbGxvY2F0aW9uIHBhdHRlcm5zIHRvIHRlc3QgcGVyZm9ybWFuY2UuCi8vIC0gTWFuYWdlbWVudCBvZiBtZW1vcnkgZnJhZ21lbnRhdGlvbiBhbmQgY29hbGVzY2luZyBsb2dpYy4KLy8gLSBPcHRpbWl6YXRpb24gb2YgZGVlcGx5IG5lc3RlZCBjb25kaXRpb25hbCBzdGF0ZW1lbnRzIGZvciBibG9jayBtYW5hZ2VtZW50LgovLyAtIFNjb3BlIHJlc29sdXRpb24gZm9yIHZhcmlhYmxlcyBhY3Jvc3MgZGlmZmVyZW50IGFsbG9jYXRpb24gcGhhc2VzLgoKZm4gbWFpbigpIHsKICAgIGxldCBtdXQgaGVhcDogW2kzMjsgMTAyNF0gPSBbMDsgMTAyNF07CiAgICBsZXQgbXV0IGZyZWVfbGlzdF9oZWFkOiBpMzIgPSAwOwogICAgLy8gVG90YWwgbnVtYmVyIG9mIGJsb2NrcyBpbiB0aGUgaGVhcCAoaGVhcF9zaXplIC8gYmxvY2tfc2l6ZSkKICAgIGxldCB0b3RhbF9ibG9ja3M6IGkzMiA9IDY0OyAvLyAxMDI0IC8gMTYKCiAgICBmbiBpbml0X2hlYXAoaGVhcDogJm11dCBbaTMyOyAxMDI0XSwgZnJlZV9saXN0X2hlYWQ6ICZtdXQgaTMyKSB7CiAgICAgICAgbGV0IGhlYXBfc2l6ZTogaTMyID0gMTAyNDsKICAgICAgICBsZXQgYmxvY2tfc2l6ZTogaTMyID0gMTY7CiAgICAgICAgbGV0IG51bV9ibG9ja3M6IGkzMiA9IGhlYXBfc2l6ZSAvIGJsb2NrX3NpemU7CiAgICAgICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgICAgIHdoaWxlIChpIDwgbnVtX2Jsb2NrcykgewogICAgICAgICAgICBsZXQgY3VycmVudF9hZGRyOiBpMzIgPSBpICogYmxvY2tfc2l6ZTsKICAgICAgICAgICAgaGVhcFtjdXJyZW50X2FkZHIgYXMgdXNpemVdID0gKGkgKyAxKSAqIGJsb2NrX3NpemU7IC8vIE5leHQgcG9pbnRlcgogICAgICAgICAgICBpID0gaSArIDE7CiAgICAgICAgfQogICAgICAgIGhlYXBbKChudW1fYmxvY2tzIC0gMSkgKiBibG9ja19zaXplKSBhcyB1c2l6ZV0gPSAtMTsgLy8gRW5kIG9mIGxpc3QKICAgICAgICAqZnJlZV9saXN0X2hlYWQgPSAwOwogICAgfQoKICAgIGZuIGFsbG9jKGhlYXA6ICZtdXQgW2kzMjsgMTAyNF0sIGZyZWVfbGlzdF9oZWFkOiAmbXV0IGkzMikgLT4gaTMyIHsKICAgICAgICBpZiAoKmZyZWVfbGlzdF9oZWFkID09IC0xKSB7CiAgICAgICAgICAgIHJldHVybiAtMTsgLy8gT3V0IG9mIG1lbW9yeQogICAgICAgIH0KICAgICAgICBsZXQgYmxvY2tfYWRkcjogaTMyID0gKmZyZWVfbGlzdF9oZWFkOwogICAgICAgICpmcmVlX2xpc3RfaGVhZCA9IGhlYXBbYmxvY2tfYWRkciBhcyB1c2l6ZV07CiAgICAgICAgaGVhcFtibG9ja19hZGRyIGFzIHVzaXplXSA9IC0yOyAvLyBNYXJrIGFzIGFsbG9jYXRlZAogICAgICAgIHJldHVybiBibG9ja19hZGRyOwogICAgfQoKICAgIGZuIGZyZWUoaGVhcDogJm11dCBbaTMyOyAxMDI0XSwgZnJlZV9saXN0X2hlYWQ6ICZtdXQgaTMyLCBhZGRyOiBpMzIpIHsKICAgICAgICBoZWFwW2FkZHIgYXMgdXNpemVdID0gKmZyZWVfbGlzdF9oZWFkOwogICAgICAgICpmcmVlX2xpc3RfaGVhZCA9IGFkZHI7CiAgICB9CgogICAgaW5pdF9oZWFwKCZtdXQgaGVhcCwgJm11dCBmcmVlX2xpc3RfaGVhZCk7CgogICAgbGV0IG11dCBhbGxvY2F0aW9uczogW2kzMjsgNjRdID0gWzA7IDY0XTsKICAgIGxldCBtdXQgaTogaTMyID0gMDsKICAgIGxldCBtdXQgc3VjY2Vzc2Z1bF9hbGxvY3M6IGkzMiA9IDA7CgogICAgd2hpbGUgKGkgPCA2NCkgewogICAgICAgIGxldCBhZGRyOiBpMzIgPSBhbGxvYygmbXV0IGhlYXAsICZtdXQgZnJlZV9saXN0X2hlYWQpOwogICAgICAgIGlmIChhZGRyICE9IC0xKSB7CiAgICAgICAgICAgIGFsbG9jYXRpb25zW2kgYXMgdXNpemVdID0gYWRkcjsKICAgICAgICAgICAgc3VjY2Vzc2Z1bF9hbGxvY3MgPSBzdWNjZXNzZnVsX2FsbG9jcyArIDE7CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICBpID0gMDsKICAgIHdoaWxlIChpIDwgMzIpIHsKICAgICAgICBpZiAoaSAlIDIgPT0gMCkgewogICAgICAgICAgICBmcmVlKCZtdXQgaGVhcCwgJm11dCBmcmVlX2xpc3RfaGVhZCwgYWxsb2NhdGlvbnNbaSBhcyB1c2l6ZV0pOwogICAgICAgICAgICBhbGxvY2F0aW9uc1tpIGFzIHVzaXplXSA9IC0xOwogICAgICAgIH0KICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgaSA9IDA7CiAgICB3aGlsZSAoaSA8IDE2KSB7CiAgICAgICAgbGV0IGFkZHI6IGkzMiA9IGFsbG9jKCZtdXQgaGVhcCwgJm11dCBmcmVlX2xpc3RfaGVhZCk7CiAgICAgICAgaWYgKGFkZHIgIT0gLTEpIHsKICAgICAgICAgICAgbGV0IG11dCBqOiBpMzIgPSAwOwogICAgICAgICAgICBsZXQgbXV0IHBsYWNlZDogYm9vbCA9IGZhbHNlOwogICAgICAgICAgICB3aGlsZSAoaiA8IDY0KSB7CiAgICAgICAgICAgICAgICBpZiAoYWxsb2NhdGlvbnNbaiBhcyB1c2l6ZV0gPT0gLTEgJiYgIXBsYWNlZCkgewogICAgICAgICAgICAgICAgICAgIGFsbG9jYXRpb25zW2ogYXMgdXNpemVdID0gYWRkcjsKICAgICAgICAgICAgICAgICAgICBwbGFjZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaiA9IGogKyAxOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICBsZXQgbXV0IGFjdGl2ZV9ibG9ja3M6IGkzMiA9IDA7CiAgICBpID0gMDsKICAgIHdoaWxlIChpIDwgNjQpIHsKICAgICAgICBpZiAoYWxsb2NhdGlvbnNbaSBhcyB1c2l6ZV0gIT0gLTEpIHsKICAgICAgICAgICAgYWN0aXZlX2Jsb2NrcyA9IGFjdGl2ZV9ibG9ja3MgKyAxOwogICAgICAgIH0KICAgICAgICBpID0gaSArIDE7CiAgICB9CgogICAgLy8gQ29tcHV0ZSBmcmFnbWVudGF0aW9uIG1ldHJpYyB3aGVuIGVub3VnaCBibG9ja3MgYXJlIGFjdGl2ZS4KICAgIC8vIEhvaXN0ZWQgdmFyaWFibGUgdG8gYXZvaWQgc2NvcGUgZXJyb3IgJiBndWFyZCBhZ2FpbnN0IGRpdmlkZS1ieS16ZXJvLgogICAgbGV0IG11dCBmcmFnbWVudGF0aW9uX21ldHJpYzogaTMyID0gMDsgLy8gMCBtZWFucyBlaXRoZXIgZnVsbHkgdXNlZCBvciBub3QgY29tcHV0ZWQuCiAgICBpZiAoYWN0aXZlX2Jsb2NrcyA+IDQwKSB7CiAgICAgICAgbGV0IG11dCBtYXhfY29udGlndW91c19mcmVlOiBpMzIgPSAwOwogICAgICAgIGxldCBtdXQgY3VycmVudF9jb250aWd1b3VzOiBpMzIgPSAwOwogICAgICAgIGxldCBtdXQgY3VycmVudF9wdHI6IGkzMiA9IGZyZWVfbGlzdF9oZWFkOwogICAgICAgIHdoaWxlIChjdXJyZW50X3B0ciAhPSAtMSkgewogICAgICAgICAgICBjdXJyZW50X2NvbnRpZ3VvdXMgPSBjdXJyZW50X2NvbnRpZ3VvdXMgKyAxOwogICAgICAgICAgICBsZXQgbmV4dF9wdHI6IGkzMiA9IGhlYXBbY3VycmVudF9wdHIgYXMgdXNpemVdOwogICAgICAgICAgICBpZiAobmV4dF9wdHIgIT0gY3VycmVudF9wdHIgKyAxNikgewogICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRfY29udGlndW91cyA+IG1heF9jb250aWd1b3VzX2ZyZWUpIHsKICAgICAgICAgICAgICAgICAgICBtYXhfY29udGlndW91c19mcmVlID0gY3VycmVudF9jb250aWd1b3VzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY3VycmVudF9jb250aWd1b3VzID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICBjdXJyZW50X3B0ciA9IG5leHRfcHRyOwogICAgICAgIH0KICAgICAgICAvLyBTYWZlIGRlbm9taW5hdG9yOiByZW1haW5pbmcgZnJlZSBibG9ja3MuIElmIHplcm8sIGZyYWdtZW50YXRpb24gaXMgZGVmaW5lZCBhcyAwLgogICAgICAgIGxldCByZW1haW5pbmdfZnJlZTogaTMyID0gdG90YWxfYmxvY2tzIC0gYWN0aXZlX2Jsb2NrczsgLy8gY291bGQgYmUgMAogICAgICAgIGlmIChyZW1haW5pbmdfZnJlZSA+IDApIHsKICAgICAgICAgICAgZnJhZ21lbnRhdGlvbl9tZXRyaWMgPSBtYXhfY29udGlndW91c19mcmVlICogMTAwIC8gcmVtYWluaW5nX2ZyZWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZnJhZ21lbnRhdGlvbl9tZXRyaWMgPSAwOyAvLyBObyBmcmVlIHNwYWNlIC0+IHRyZWF0IGFzIG5vIG1lYXN1cmFibGUgZnJhZ21lbnRhdGlvbi4KICAgICAgICB9CiAgICB9CgogICAgaWYgKGFjdGl2ZV9ibG9ja3MgPCA0OCkgewogICAgICAgIGxldCBtdXQgaTogaTMyID0gMzI7CiAgICAgICAgd2hpbGUgKGkgPCA2NCkgewogICAgICAgICAgICBpZiAoaSAlIDMgPT0gMCkgewogICAgICAgICAgICAgICAgaWYgKGFsbG9jYXRpb25zW2kgYXMgdXNpemVdICE9IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgZnJlZSgmbXV0IGhlYXAsICZtdXQgZnJlZV9saXN0X2hlYWQsIGFsbG9jYXRpb25zW2kgYXMgdXNpemVdKTsKICAgICAgICAgICAgICAgICAgICBhbGxvY2F0aW9uc1tpIGFzIHVzaXplXSA9IC0xOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGkgPSBpICsgMTsKICAgICAgICB9CiAgICB9CgogICAgbGV0IG11dCBmaW5hbF9jaGVja19zdW06IGkzMiA9IDA7CiAgICBpID0gMDsKICAgIHdoaWxlIChpIDwgMTAyNCkgewogICAgICAgIGlmIChoZWFwW2kgYXMgdXNpemVdID09IC0yKSB7CiAgICAgICAgICAgIGZpbmFsX2NoZWNrX3N1bSA9IGZpbmFsX2NoZWNrX3N1bSArIGk7CiAgICAgICAgfQogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICBwcmludGxuSW50KGZyYWdtZW50YXRpb25fbWV0cmljKTsgLy8gMCBpZiAobm90IGNvbXB1dGVkIG9yIGZ1bGx5IGFsbG9jYXRlZCkKICAgIHByaW50bG5JbnQoZmluYWxfY2hlY2tfc3VtKTsKICAgIGV4aXQoMCk7Cn0K", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (43, "comprehensive43", 2, "LyoKVGVzdCBQYWNrYWdlOiBTZW1hbnRpYy0yClRlc3QgVGFyZ2V0OiBjb21wcmVoZW5zaXZlCkF1dGhvcjogV2VueGluIFpoZW5nClRpbWU6IDIwMjUtMDgtMTcKVmVyZGljdDogUGFzcwpUZXN0IE5hbWU6IFNpbXBsZSBTdGFjay1CYXNlZCBJbnRlcnByZXRlcgpTdW1tYXJ5OiBUaGlzIHRlc3QgY29tcHJlaGVuc2l2ZWx5IGV2YWx1YXRlcyBjb21waWxlciBvcHRpbWl6YXRpb25zIGZvcjoKRGV0YWlsczoKTGFyZ2Ugc3dpdGNoLWxpa2UgZGlzcGF0Y2ggbG9vcHMgZm9yIGluc3RydWN0aW9uIHByb2Nlc3NpbmcuCkFycmF5IG1hbmlwdWxhdGlvbiBmb3Igc3RhY2sgYW5kIHByb2dyYW0gbWVtb3J5LgpEZWVwbHkgbmVzdGVkIGZ1bmN0aW9uIGNhbGxzIGFuZCByZWN1cnNpb24gc2ltdWxhdGlvbi4KQ29tcGxleCBjb25kaXRpb25hbCBsb2dpYyBmb3IganVtcHMgYW5kIGNvbnRyb2wgZmxvdy4KUGVyZm9ybWFuY2Ugb2YgaW50ZWdlciBhcml0aG1ldGljIGFuZCBjb21wYXJpc29ucy4KTXV0YWJpbGl0eSBhbmFseXNpcyBpbiBmdW5jdGlvbnMgbW9kaWZ5aW5nIHNoYXJlZCBzdGF0ZS4KKi8KCi8vIGNvbXByZWhlbnNpdmU0My5yeCAtIFNpbXBsZSBTdGFjay1CYXNlZCBJbnRlcnByZXRlcgovLyBUaGlzIHRlc3QgY29tcHJlaGVuc2l2ZWx5IGV2YWx1YXRlcyBjb21waWxlciBvcHRpbWl6YXRpb25zIGZvcjoKLy8gLSBMYXJnZSBzd2l0Y2gtbGlrZSBkaXNwYXRjaCBsb29wcyBmb3IgaW5zdHJ1Y3Rpb24gcHJvY2Vzc2luZy4KLy8gLSBBcnJheSBtYW5pcHVsYXRpb24gZm9yIHN0YWNrIGFuZCBwcm9ncmFtIG1lbW9yeS4KLy8gLSBEZWVwbHkgbmVzdGVkIGZ1bmN0aW9uIGNhbGxzIGFuZCByZWN1cnNpb24gc2ltdWxhdGlvbi4KLy8gLSBDb21wbGV4IGNvbmRpdGlvbmFsIGxvZ2ljIGZvciBqdW1wcyBhbmQgY29udHJvbCBmbG93LgovLyAtIFBlcmZvcm1hbmNlIG9mIGludGVnZXIgYXJpdGhtZXRpYyBhbmQgY29tcGFyaXNvbnMuCi8vIC0gTXV0YWJpbGl0eSBhbmFseXNpcyBpbiBmdW5jdGlvbnMgbW9kaWZ5aW5nIHNoYXJlZCBzdGF0ZS4KCmZuIG1haW4oKSB7CiAgICBsZXQgbXV0IHByb2dyYW06IFtpMzI7IDI1Nl0gPSBbMDsgMjU2XTsKICAgIGxldCBtdXQgc3RhY2s6IFtpMzI7IDI1Nl0gPSBbMDsgMjU2XTsKICAgIGxldCBtdXQgc3A6IGkzMiA9IC0xOwogICAgbGV0IG11dCBwYzogaTMyID0gMDsKICAgIGxldCBtdXQgaGFsdDogYm9vbCA9IGZhbHNlOwoKICAgIC8vIE9wY29kZXM6IDE6UFVTSCwgMjpQT1AsIDM6QURELCA0OlNVQiwgNTpNVUwsIDY6RElWLCA3OkpNUCwgODpKWiwgOTpKTlosIDEwOkVRLCAxMTpMVCwgMTI6R1QsIDEzOlBSSU5ULCAxNDpIQUxULCAxNTpEVVAKCiAgICBmbiBsb2FkX3Byb2dyYW0ocHJvZzogJm11dCBbaTMyOyAyNTZdKSB7CiAgICAgICAgLy8gQ2FsY3VsYXRlIGZhY3RvcmlhbCBvZiA4CiAgICAgICAgcHJvZ1swXSA9IDE7IHByb2dbMV0gPSA4OyAgICAgICAvLyBQVVNIIDggKG4pCiAgICAgICAgcHJvZ1syXSA9IDE7IHByb2dbM10gPSAxOyAgICAgICAvLyBQVVNIIDEgKHJlc3VsdCkKICAgICAgICAvLyBMb29wIHN0YXJ0IChwYz00KQogICAgICAgIHByb2dbNF0gPSAxNTsgICAgICAgICAgICAgICAgICAgLy8gRFVQIChkdXBsaWNhdGUgbikKICAgICAgICBwcm9nWzVdID0gMTsgcHJvZ1s2XSA9IDE7ICAgICAgIC8vIFBVU0ggMQogICAgICAgIHByb2dbN10gPSAxMTsgICAgICAgICAgICAgICAgICAgLy8gTFQgKG4gPCAxPykKICAgICAgICBwcm9nWzhdID0gOTsgcHJvZ1s5XSA9IDE0OyAgICAgIC8vIEpOWiB0byBsb29wX2VuZCAocGM9MTgpCiAgICAgICAgLy8gaWYgbiA8IDEsIGp1bXAgdG8gcHJpbnQKICAgICAgICBwcm9nWzEwXSA9IDc7IHByb2dbMTFdID0gMjA7ICAgICAvLyBKTVAgdG8gcHJpbnRfcmVzdWx0IChwYz0zMCkKICAgICAgICAvLyBsb29wX2JvZHkgKHBjPTEyKQogICAgICAgIHByb2dbMTJdID0gNTsgICAgICAgICAgICAgICAgICAgLy8gTVVMIChyZXN1bHQgPSByZXN1bHQgKiBuKQogICAgICAgIHByb2dbMTNdID0gMTsgcHJvZ1sxNF0gPSAtMTsgICAgLy8gUFVTSCAtMQogICAgICAgIHByb2dbMTVdID0gMzsgICAgICAgICAgICAgICAgICAgLy8gQUREIChuID0gbiAtIDEpCiAgICAgICAgcHJvZ1sxNl0gPSA3OyBwcm9nWzE3XSA9IDQ7ICAgICAgLy8gSk1QIHRvIGxvb3Bfc3RhcnQgKHBjPTQpCiAgICAgICAgLy8gbG9vcF9lbmQgKHBjPTE4KQogICAgICAgIHByb2dbMThdID0gMjsgICAgICAgICAgICAgICAgICAgLy8gUE9QIChuKQogICAgICAgIHByb2dbMTldID0gNzsgcHJvZ1syMF0gPSAxMjsgICAgIC8vIEpNUCB0byBsb29wX2JvZHkgKHBjPTEyKQogICAgICAgIC8vIHByaW50X3Jlc3VsdCAocGM9MjEpCiAgICAgICAgcHJvZ1syMV0gPSAxMzsgICAgICAgICAgICAgICAgICAvLyBQUklOVCByZXN1bHQKICAgICAgICBwcm9nWzIyXSA9IDE0OyAgICAgICAgICAgICAgICAgIC8vIEhBTFQKCiAgICAgICAgLy8gU29tZSBkZWFkIGNvZGUgdG8gaW5jcmVhc2UgY29tcGxleGl0eQogICAgICAgIGxldCBtdXQgaTogaTMyID0gMzA7CiAgICAgICAgd2hpbGUgKGkgPCAyNTApIHsKICAgICAgICAgICAgcHJvZ1tpIGFzIHVzaXplXSA9IDE7CiAgICAgICAgICAgIHByb2dbaSBhcyB1c2l6ZSsxXSA9IGk7CiAgICAgICAgICAgIHByb2dbaSBhcyB1c2l6ZSsyXSA9IDE1OwogICAgICAgICAgICBwcm9nW2kgYXMgdXNpemUrM10gPSAyOwogICAgICAgICAgICBpID0gaSArIDQ7CiAgICAgICAgfQogICAgfQoKICAgIC8vIEhpZGRlbiBFcnJvcjogVGhpcyBmdW5jdGlvbiBpcyBkZWNsYXJlZCB0byB0YWtlIGFuIGltbXV0YWJsZSBwcm9ncmFtIGFycmF5LAogICAgLy8gYnV0IGl0IHRyaWVzIHRvIG1vZGlmeSBpdC4gVGhpcyBzaG91bGQgY2F1c2UgYSBtdXRhYmlsaXR5IGNvbmZsaWN0IGVycm9yLgogICAgZm4gc2VsZl9tb2RpZnlfY29kZShwcm9nOiAmbXV0IFtpMzI7IDI1Nl0sIHBjOiBpMzIpIHsKICAgICAgICBpZiAocGMgPiAxMCAmJiBwcm9nW3BjIGFzIHVzaXplLTFdID09IDE1KSB7IC8vIElmIChwcmV2aW91cyBpbnN0cnVjdGlvbiB3YXMgRFVQKQogICAgICAgICAgICBwcm9nW3BjIGFzIHVzaXplXSA9IDI7IC8vIENoYW5nZSBuZXh0IGluc3RydWN0aW9uIHRvIFBPUAogICAgICAgIH0KICAgIH0KCiAgICBsb2FkX3Byb2dyYW0oJm11dCBwcm9ncmFtKTsKCiAgICB3aGlsZSAoIWhhbHQpIHsKICAgICAgICBsZXQgaW5zdHJ1Y3Rpb246IGkzMiA9IHByb2dyYW1bcGMgYXMgdXNpemVdOwogICAgICAgIHBjID0gcGMgKyAxOwoKICAgICAgICAvLyBUaGlzIGNhbGwgaW50cm9kdWNlcyB0aGUgaGlkZGVuIGVycm9yLgogICAgICAgIHNlbGZfbW9kaWZ5X2NvZGUoJm11dCBwcm9ncmFtLCBwYyk7CgogICAgICAgIGlmIChpbnN0cnVjdGlvbiA9PSAxKSB7IC8vIFBVU0gKICAgICAgICAgICAgbGV0IHZhbHVlOiBpMzIgPSBwcm9ncmFtW3BjIGFzIHVzaXplXTsKICAgICAgICAgICAgcGMgPSBwYyArIDE7CiAgICAgICAgICAgIHNwID0gc3AgKyAxOwogICAgICAgICAgICBzdGFja1tzcCBhcyB1c2l6ZV0gPSB2YWx1ZTsKICAgICAgICB9IGVsc2UgaWYgKGluc3RydWN0aW9uID09IDIpIHsgLy8gUE9QCiAgICAgICAgICAgIHNwID0gc3AgLSAxOwogICAgICAgIH0gZWxzZSBpZiAoaW5zdHJ1Y3Rpb24gPT0gMykgeyAvLyBBREQKICAgICAgICAgICAgbGV0IGI6IGkzMiA9IHN0YWNrW3NwIGFzIHVzaXplXTsKICAgICAgICAgICAgc3AgPSBzcCAtIDE7CiAgICAgICAgICAgIGxldCBhOiBpMzIgPSBzdGFja1tzcCBhcyB1c2l6ZV07CiAgICAgICAgICAgIHN0YWNrW3NwIGFzIHVzaXplXSA9IGEgKyBiOwogICAgICAgIH0gZWxzZSBpZiAoaW5zdHJ1Y3Rpb24gPT0gNCkgeyAvLyBTVUIKICAgICAgICAgICAgbGV0IGI6IGkzMiA9IHN0YWNrW3NwIGFzIHVzaXplXTsKICAgICAgICAgICAgc3AgPSBzcCAtIDE7CiAgICAgICAgICAgIGxldCBhOiBpMzIgPSBzdGFja1tzcCBhcyB1c2l6ZV07CiAgICAgICAgICAgIHN0YWNrW3NwIGFzIHVzaXplXSA9IGEgLSBiOwogICAgICAgIH0gZWxzZSBpZiAoaW5zdHJ1Y3Rpb24gPT0gNSkgeyAvLyBNVUwKICAgICAgICAgICAgbGV0IGI6IGkzMiA9IHN0YWNrW3NwIGFzIHVzaXplXTsKICAgICAgICAgICAgc3AgPSBzcCAtIDE7CiAgICAgICAgICAgIGxldCBhOiBpMzIgPSBzdGFja1tzcCBhcyB1c2l6ZV07CiAgICAgICAgICAgIHN0YWNrW3NwIGFzIHVzaXplXSA9IGEgKiBiOwogICAgICAgIH0gZWxzZSBpZiAoaW5zdHJ1Y3Rpb24gPT0gNikgeyAvLyBESVYKICAgICAgICAgICAgbGV0IGI6IGkzMiA9IHN0YWNrW3NwIGFzIHVzaXplXTsKICAgICAgICAgICAgc3AgPSBzcCAtIDE7CiAgICAgICAgICAgIGxldCBhOiBpMzIgPSBzdGFja1tzcCBhcyB1c2l6ZV07CiAgICAgICAgICAgIHN0YWNrW3NwIGFzIHVzaXplXSA9IGEgLyBiOwogICAgICAgIH0gZWxzZSBpZiAoaW5zdHJ1Y3Rpb24gPT0gNykgeyAvLyBKTVAKICAgICAgICAgICAgcGMgPSBwcm9ncmFtW3BjIGFzIHVzaXplXTsKICAgICAgICB9IGVsc2UgaWYgKGluc3RydWN0aW9uID09IDgpIHsgLy8gSloKICAgICAgICAgICAgbGV0IHZhbDogaTMyID0gc3RhY2tbc3AgYXMgdXNpemVdOwogICAgICAgICAgICBzcCA9IHNwIC0gMTsKICAgICAgICAgICAgaWYgKHZhbCA9PSAwKSB7CiAgICAgICAgICAgICAgICBwYyA9IHByb2dyYW1bcGMgYXMgdXNpemVdOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcGMgPSBwYyArIDE7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGluc3RydWN0aW9uID09IDkpIHsgLy8gSk5aCiAgICAgICAgICAgIGxldCB2YWw6IGkzMiA9IHN0YWNrW3NwIGFzIHVzaXplXTsKICAgICAgICAgICAgc3AgPSBzcCAtIDE7CiAgICAgICAgICAgIGlmICh2YWwgIT0gMCkgewogICAgICAgICAgICAgICAgcGMgPSBwcm9ncmFtW3BjIGFzIHVzaXplXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHBjID0gcGMgKyAxOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChpbnN0cnVjdGlvbiA9PSAxMCkgeyAvLyBFUQogICAgICAgICAgICBsZXQgYjogaTMyID0gc3RhY2tbc3AgYXMgdXNpemVdOwogICAgICAgICAgICBzcCA9IHNwIC0gMTsKICAgICAgICAgICAgbGV0IGE6IGkzMiA9IHN0YWNrW3NwIGFzIHVzaXplXTsKICAgICAgICAgICAgaWYgKGEgPT0gYikgeyBzdGFja1tzcCBhcyB1c2l6ZV0gPSAxOyB9IGVsc2UgeyBzdGFja1tzcCBhcyB1c2l6ZV0gPSAwOyB9CiAgICAgICAgfSBlbHNlIGlmIChpbnN0cnVjdGlvbiA9PSAxMSkgeyAvLyBMVAogICAgICAgICAgICBsZXQgYjogaTMyID0gc3RhY2tbc3AgYXMgdXNpemVdOwogICAgICAgICAgICBzcCA9IHNwIC0gMTsKICAgICAgICAgICAgbGV0IGE6IGkzMiA9IHN0YWNrW3NwIGFzIHVzaXplXTsKICAgICAgICAgICAgaWYgKGEgPCBiKSB7IHN0YWNrW3NwIGFzIHVzaXplXSA9IDE7IH0gZWxzZSB7IHN0YWNrW3NwIGFzIHVzaXplXSA9IDA7IH0KICAgICAgICB9IGVsc2UgaWYgKGluc3RydWN0aW9uID09IDEyKSB7IC8vIEdUCiAgICAgICAgICAgIGxldCBiOiBpMzIgPSBzdGFja1tzcCBhcyB1c2l6ZV07CiAgICAgICAgICAgIHNwID0gc3AgLSAxOwogICAgICAgICAgICBsZXQgYTogaTMyID0gc3RhY2tbc3AgYXMgdXNpemVdOwogICAgICAgICAgICBpZiAoYSA+IGIpIHsgc3RhY2tbc3AgYXMgdXNpemVdID0gMTsgfSBlbHNlIHsgc3RhY2tbc3AgYXMgdXNpemVdID0gMDsgfQogICAgICAgIH0gZWxzZSBpZiAoaW5zdHJ1Y3Rpb24gPT0gMTMpIHsgLy8gUFJJTlQKICAgICAgICAgICAgcHJpbnRsbkludChzdGFja1tzcCBhcyB1c2l6ZV0pOwogICAgICAgIH0gZWxzZSBpZiAoaW5zdHJ1Y3Rpb24gPT0gMTQpIHsgLy8gSEFMVAogICAgICAgICAgICBoYWx0ID0gdHJ1ZTsKICAgICAgICB9IGVsc2UgaWYgKGluc3RydWN0aW9uID09IDE1KSB7IC8vIERVUAogICAgICAgICAgICBsZXQgdmFsOiBpMzIgPSBzdGFja1tzcCBhcyB1c2l6ZV07CiAgICAgICAgICAgIHNwID0gc3AgKyAxOwogICAgICAgICAgICBzdGFja1tzcCBhcyB1c2l6ZV0gPSB2YWw7CiAgICAgICAgfQoKICAgICAgICBpZiAocGMgPCAwIHx8IHBjID49IDI1NikgewogICAgICAgICAgICBoYWx0ID0gdHJ1ZTsKICAgICAgICB9CiAgICB9CiAgICBleGl0KDApOwp9Cg==", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (44, "comprehensive44", 2, "LyoKVGVzdCBQYWNrYWdlOiBTZW1hbnRpYy0yClRlc3QgVGFyZ2V0OiBjb21wcmVoZW5zaXZlCkF1dGhvcjogV2VueGluIFpoZW5nClRpbWU6IDIwMjUtMDgtMTcKVmVyZGljdDogUGFzcwpUZXN0IE5hbWU6IE11bHRpLUFnZW50IFN5c3RlbSBTaW11bGF0aW9uClN1bW1hcnk6IFRoaXMgdGVzdCBjb21wcmVoZW5zaXZlbHkgZXZhbHVhdGVzIGNvbXBpbGVyIG9wdGltaXphdGlvbnMgZm9yOgpEZXRhaWxzOgpDb21wbGV4IG9iamVjdC1saWtlIHN0cnVjdHVyZXMgdXNpbmcgYXJyYXlzIGFuZCBzdHJ1Y3RzLgpTaW11bGF0aW9uIG9mIHBhcmFsbGVsIGJlaGF2aW9yIGFuZCBpbnRlcmFjdGlvbiBpbiBhIHNpbmdsZSB0aHJlYWQuCkFkdmFuY2VkIG11bHRpLWRpbWVuc2lvbmFsIGFycmF5IGFjY2VzcyBhbmQgdXBkYXRlcy4KQnJhbmNoIHByZWRpY3Rpb24gZm9yIGFnZW50IGRlY2lzaW9uLW1ha2luZyBsb2dpYy4KTG9vcCB1bnJvbGxpbmcgYW5kIG9wdGltaXphdGlvbiBmb3Igc3RhdGUgdXBkYXRlIGN5Y2xlcy4KRnVuY3Rpb24gY2FsbCBvdmVyaGVhZCB3aXRoIGNvbXBsZXggc3RhdGUgcGFzc2luZy4KKi8KCi8vIGNvbXByZWhlbnNpdmU0NC5yeCAtIE11bHRpLUFnZW50IFN5c3RlbSBTaW11bGF0aW9uCi8vIFRoaXMgdGVzdCBjb21wcmVoZW5zaXZlbHkgZXZhbHVhdGVzIGNvbXBpbGVyIG9wdGltaXphdGlvbnMgZm9yOgovLyAtIENvbXBsZXggb2JqZWN0LWxpa2Ugc3RydWN0dXJlcyB1c2luZyBhcnJheXMgYW5kIHN0cnVjdHMuCi8vIC0gU2ltdWxhdGlvbiBvZiBwYXJhbGxlbCBiZWhhdmlvciBhbmQgaW50ZXJhY3Rpb24gaW4gYSBzaW5nbGUgdGhyZWFkLgovLyAtIEFkdmFuY2VkIG11bHRpLWRpbWVuc2lvbmFsIGFycmF5IGFjY2VzcyBhbmQgdXBkYXRlcy4KLy8gLSBCcmFuY2ggcHJlZGljdGlvbiBmb3IgYWdlbnQgZGVjaXNpb24tbWFraW5nIGxvZ2ljLgovLyAtIExvb3AgdW5yb2xsaW5nIGFuZCBvcHRpbWl6YXRpb24gZm9yIHN0YXRlIHVwZGF0ZSBjeWNsZXMuCi8vIC0gRnVuY3Rpb24gY2FsbCBvdmVyaGVhZCB3aXRoIGNvbXBsZXggc3RhdGUgcGFzc2luZy4KCmZuIG1haW4oKSB7CiAgICBzdHJ1Y3QgQWdlbnQgewogICAgICAgIGlkOiBpMzIsCiAgICAgICAgeDogaTMyLAogICAgICAgIHk6IGkzMiwKICAgICAgICBlbmVyZ3k6IGkzMiwKICAgICAgICB0YXJnZXRfeDogaTMyLAogICAgICAgIHRhcmdldF95OiBpMzIsCiAgICAgICAgc3RhdGU6IGkzMiwgLy8gMDogaWRsZSwgMTogbW92aW5nLCAyOiBjb2xsZWN0aW5nCiAgICB9CgogICAgbGV0IG11dCB3b3JsZDogW1tpMzI7IDY0XTsgNjRdID0gW1swOyA2NF07IDY0XTsKICAgIGxldCBtdXQgYWdlbnRzOiBbQWdlbnQ7IDMyXSA9IFtBZ2VudCB7CiAgICAgICAgaWQ6IDAsCiAgICAgICAgeDogMCwKICAgICAgICB5OiAwLAogICAgICAgIGVuZXJneTogMCwKICAgICAgICB0YXJnZXRfeDogMCwKICAgICAgICB0YXJnZXRfeTogMCwKICAgICAgICBzdGF0ZTogMCwKICAgIH07IDMyXTsKICAgIGxldCBudW1fYWdlbnRzOiBpMzIgPSAzMjsKICAgIGxldCB3b3JsZF9zaXplOiBpMzIgPSA2NDsKCiAgICBmbiBpbml0X3dvcmxkKHdvcmxkOiAmbXV0IFtbaTMyOyA2NF07IDY0XSwgYWdlbnRzOiAmbXV0IFtBZ2VudDsgMzJdKSB7CiAgICAgICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgICAgIHdoaWxlIChpIDwgNjQpIHsKICAgICAgICAgICAgbGV0IG11dCBqOiBpMzIgPSAwOwogICAgICAgICAgICB3aGlsZSAoaiA8IDY0KSB7CiAgICAgICAgICAgICAgICB3b3JsZFtpIGFzIHVzaXplXVtqIGFzIHVzaXplXSA9IChpICogaiArIGkgKyBqKSAlIDEwMDsgLy8gUmVzb3VyY2UgZGVuc2l0eQogICAgICAgICAgICAgICAgaiA9IGogKyAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGkgPSBpICsgMTsKICAgICAgICB9CgogICAgICAgIGkgPSAwOwogICAgICAgIHdoaWxlIChpIDwgMzIpIHsKICAgICAgICAgICAgYWdlbnRzW2kgYXMgdXNpemVdLmlkID0gaTsKICAgICAgICAgICAgYWdlbnRzW2kgYXMgdXNpemVdLnggPSAoaSAqIDEzKSAlIDY0OwogICAgICAgICAgICBhZ2VudHNbaSBhcyB1c2l6ZV0ueSA9IChpICogMzEpICUgNjQ7CiAgICAgICAgICAgIGFnZW50c1tpIGFzIHVzaXplXS5lbmVyZ3kgPSAxMDA7CiAgICAgICAgICAgIGFnZW50c1tpIGFzIHVzaXplXS5zdGF0ZSA9IDA7CiAgICAgICAgICAgIGkgPSBpICsgMTsKICAgICAgICB9CiAgICB9CgogICAgZm4gZmluZF9uZXdfdGFyZ2V0KGFnZW50OiAmQWdlbnQsIHdvcmxkOiAmW1tpMzI7IDY0XTsgNjRdKSAtPiBpMzIgewogICAgICAgIGxldCBtdXQgYmVzdF94OiBpMzIgPSAtMTsKICAgICAgICBsZXQgbXV0IGJlc3RfeTogaTMyID0gLTE7CiAgICAgICAgbGV0IG11dCBtYXhfcmVzOiBpMzIgPSAtMTsKICAgICAgICBsZXQgbXV0IGR4OiBpMzIgPSAtNTsKICAgICAgICB3aGlsZSAoZHggPD0gNSkgewogICAgICAgICAgICBsZXQgbXV0IGR5OiBpMzIgPSAtNTsKICAgICAgICAgICAgd2hpbGUgKGR5IDw9IDUpIHsKICAgICAgICAgICAgICAgIGxldCBueDogaTMyID0gKGFnZW50LnggKyBkeCArIDY0KSAlIDY0OwogICAgICAgICAgICAgICAgbGV0IG55OiBpMzIgPSAoYWdlbnQueSArIGR5ICsgNjQpICUgNjQ7CiAgICAgICAgICAgICAgICBpZiAod29ybGRbbnggYXMgdXNpemVdW255IGFzIHVzaXplXSA+IG1heF9yZXMpIHsKICAgICAgICAgICAgICAgICAgICBtYXhfcmVzID0gd29ybGRbbnggYXMgdXNpemVdW255IGFzIHVzaXplXTsKICAgICAgICAgICAgICAgICAgICBiZXN0X3ggPSBueDsKICAgICAgICAgICAgICAgICAgICBiZXN0X3kgPSBueTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGR5ID0gZHkgKyAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGR4ID0gZHggKyAxOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYmVzdF94ICogMTAwMCArIGJlc3RfeTsKICAgIH0KCiAgICBmbiB1cGRhdGVfYWdlbnQoYWdlbnQ6ICZtdXQgQWdlbnQsIHdvcmxkOiAmbXV0IFtbaTMyOyA2NF07IDY0XSkgewogICAgICAgIGlmIChhZ2VudC5lbmVyZ3kgPD0gMCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGFnZW50LmVuZXJneSA9IGFnZW50LmVuZXJneSAtIDE7CgogICAgICAgIGlmIChhZ2VudC5zdGF0ZSA9PSAwKSB7CiAgICAgICAgICAgIC8vIElkbGUKICAgICAgICAgICAgbGV0IHRhcmdldDogaTMyID0gZmluZF9uZXdfdGFyZ2V0KGFnZW50LCB3b3JsZCk7CiAgICAgICAgICAgIGFnZW50LnRhcmdldF94ID0gdGFyZ2V0IC8gMTAwMDsKICAgICAgICAgICAgYWdlbnQudGFyZ2V0X3kgPSB0YXJnZXQgJSAxMDAwOwogICAgICAgICAgICBhZ2VudC5zdGF0ZSA9IDE7CiAgICAgICAgfSBlbHNlIGlmIChhZ2VudC5zdGF0ZSA9PSAxKSB7CiAgICAgICAgICAgIC8vIE1vdmluZwogICAgICAgICAgICBpZiAoYWdlbnQueCA9PSBhZ2VudC50YXJnZXRfeCAmJiBhZ2VudC55ID09IGFnZW50LnRhcmdldF95KSB7CiAgICAgICAgICAgICAgICBhZ2VudC5zdGF0ZSA9IDI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoYWdlbnQueCA8IGFnZW50LnRhcmdldF94KSB7CiAgICAgICAgICAgICAgICAgICAgYWdlbnQueCA9IGFnZW50LnggKyAxOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhZ2VudC54ID4gYWdlbnQudGFyZ2V0X3gpIHsKICAgICAgICAgICAgICAgICAgICBhZ2VudC54ID0gYWdlbnQueCAtIDE7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKGFnZW50LnkgPCBhZ2VudC50YXJnZXRfeSkgewogICAgICAgICAgICAgICAgICAgIGFnZW50LnkgPSBhZ2VudC55ICsgMTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWdlbnQueSA+IGFnZW50LnRhcmdldF95KSB7CiAgICAgICAgICAgICAgICAgICAgYWdlbnQueSA9IGFnZW50LnkgLSAxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChhZ2VudC5zdGF0ZSA9PSAyKSB7CiAgICAgICAgICAgIC8vIENvbGxlY3RpbmcKICAgICAgICAgICAgbGV0IHJlczogaTMyID0gd29ybGRbKGFnZW50LngpIGFzIHVzaXplXVsoYWdlbnQueSkgYXMgdXNpemVdOwogICAgICAgICAgICBpZiAocmVzID4gMCkgewogICAgICAgICAgICAgICAgYWdlbnQuZW5lcmd5ID0gYWdlbnQuZW5lcmd5ICsgcmVzIC8gNTsKICAgICAgICAgICAgICAgIHdvcmxkWyhhZ2VudC54KSBhcyB1c2l6ZV1bKGFnZW50LnkpIGFzIHVzaXplXSA9CiAgICAgICAgICAgICAgICAgICAgd29ybGRbKGFnZW50LngpIGFzIHVzaXplXVsoYWdlbnQueSkgYXMgdXNpemVdIC0gcmVzIC8gMTAgLSAxOwogICAgICAgICAgICAgICAgaWYgKHdvcmxkWyhhZ2VudC54KSBhcyB1c2l6ZV1bKGFnZW50LnkpIGFzIHVzaXplXSA8IDApIHsKICAgICAgICAgICAgICAgICAgICB3b3JsZFsoYWdlbnQueCkgYXMgdXNpemVdWyhhZ2VudC55KSBhcyB1c2l6ZV0gPSAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGFnZW50LnN0YXRlID0gMDsKICAgICAgICB9CiAgICB9CgogICAgaW5pdF93b3JsZCgmbXV0IHdvcmxkLCAmbXV0IGFnZW50cyk7CgogICAgbGV0IG11dCB0aW1lX3N0ZXA6IGkzMiA9IDA7CiAgICB3aGlsZSAodGltZV9zdGVwIDwgMjAwKSB7CiAgICAgICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgICAgIHdoaWxlIChpIDwgMzIpIHsKICAgICAgICAgICAgdXBkYXRlX2FnZW50KCZtdXQgYWdlbnRzW2kgYXMgdXNpemVdLCAmbXV0IHdvcmxkKTsKICAgICAgICAgICAgaSA9IGkgKyAxOwogICAgICAgIH0KCiAgICAgICAgLy8gSGlkZGVuIEVycm9yOiBgdG90YWxfZW5lcmd5YCBpcyBkZWNsYXJlZCBhcyBpbW11dGFibGUgYnV0IGlzIG1vZGlmaWVkCiAgICAgICAgLy8gaW5zaWRlIHRoZSBsb29wLiBUaGlzIHNob3VsZCBjYXVzZSBhIG11dGFiaWxpdHkgZXJyb3IuCiAgICAgICAgaWYgKHRpbWVfc3RlcCAlIDIwID09IDApIHsKICAgICAgICAgICAgbGV0IG11dCB0b3RhbF9lbmVyZ3k6IGkzMiA9IDA7CiAgICAgICAgICAgIGxldCBtdXQgajogaTMyID0gMDsKICAgICAgICAgICAgd2hpbGUgKGogPCAzMikgewogICAgICAgICAgICAgICAgdG90YWxfZW5lcmd5ID0gdG90YWxfZW5lcmd5ICsgYWdlbnRzW2ogYXMgdXNpemVdLmVuZXJneTsKICAgICAgICAgICAgICAgIGogPSBqICsgMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBwcmludGxuSW50KHRvdGFsX2VuZXJneSk7CiAgICAgICAgfQogICAgICAgIHRpbWVfc3RlcCA9IHRpbWVfc3RlcCArIDE7CiAgICB9CgogICAgbGV0IG11dCBmaW5hbF93b3JsZF9zdW06IGkzMiA9IDA7CiAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CiAgICB3aGlsZSAoaSA8IDY0KSB7CiAgICAgICAgbGV0IG11dCBqOiBpMzIgPSAwOwogICAgICAgIHdoaWxlIChqIDwgNjQpIHsKICAgICAgICAgICAgZmluYWxfd29ybGRfc3VtID0gZmluYWxfd29ybGRfc3VtICsgd29ybGRbaSBhcyB1c2l6ZV1baiBhcyB1c2l6ZV07CiAgICAgICAgICAgIGogPSBqICsgMTsKICAgICAgICB9CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQogICAgcHJpbnRsbkludChmaW5hbF93b3JsZF9zdW0pOwogICAgZXhpdCgwKTsKfQo=", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (45, "comprehensive45", 2, "LyoKVGVzdCBQYWNrYWdlOiBTZW1hbnRpYy0yClRlc3QgVGFyZ2V0OiBjb21wcmVoZW5zaXZlCkF1dGhvcjogV2VueGluIFpoZW5nClRpbWU6IDIwMjUtMDgtMTcKVmVyZGljdDogUGFzcwpUZXN0IE5hbWU6IEFkdmFuY2VkIERhdGEgQ29tcHJlc3Npb24gKExlbXBlbC1aaXYtbGlrZSkKU3VtbWFyeTogVGhpcyB0ZXN0IGNvbXByZWhlbnNpdmVseSBldmFsdWF0ZXMgY29tcGlsZXIgb3B0aW1pemF0aW9ucyBmb3I6CkRldGFpbHM6ClN0cmluZy1saWtlIG9wZXJhdGlvbnMgb24gaW50ZWdlciBhcnJheXMuCkNvbXBsZXggc2VhcmNoIGFsZ29yaXRobXMgd2l0aGluIGEgc2xpZGluZyB3aW5kb3cuCkR5bmFtaWMgZGF0YSBzdHJ1Y3R1cmUgYmVoYXZpb3IgKGRpY3Rpb25hcnkpIHNpbXVsYXRlZCB3aXRoIGFycmF5cy4KSGlnaC1kZW1hbmQgbG9vcCBvcHRpbWl6YXRpb25zIGZvciBwYXR0ZXJuIG1hdGNoaW5nLgpQZXJmb3JtYW5jZSBvZiBhcnJheSBzbGljaW5nIGFuZCBjb3B5aW5nIHNpbXVsYXRpb25zLgpCcmFuY2hpbmcgbG9naWMgZm9yIGhhbmRsaW5nIG1hdGNoZXMgdnMuIGxpdGVyYWxzLgoqLwoKLy8gY29tcHJlaGVuc2l2ZTQ1LnJ4IC0gQWR2YW5jZWQgRGF0YSBDb21wcmVzc2lvbiAoTGVtcGVsLVppdi1saWtlKQovLyBUaGlzIHRlc3QgY29tcHJlaGVuc2l2ZWx5IGV2YWx1YXRlcyBjb21waWxlciBvcHRpbWl6YXRpb25zIGZvcjoKLy8gLSBTdHJpbmctbGlrZSBvcGVyYXRpb25zIG9uIGludGVnZXIgYXJyYXlzLgovLyAtIENvbXBsZXggc2VhcmNoIGFsZ29yaXRobXMgd2l0aGluIGEgc2xpZGluZyB3aW5kb3cuCi8vIC0gRHluYW1pYyBkYXRhIHN0cnVjdHVyZSBiZWhhdmlvciAoZGljdGlvbmFyeSkgc2ltdWxhdGVkIHdpdGggYXJyYXlzLgovLyAtIEhpZ2gtZGVtYW5kIGxvb3Agb3B0aW1pemF0aW9ucyBmb3IgcGF0dGVybiBtYXRjaGluZy4KLy8gLSBQZXJmb3JtYW5jZSBvZiBhcnJheSBzbGljaW5nIGFuZCBjb3B5aW5nIHNpbXVsYXRpb25zLgovLyAtIEJyYW5jaGluZyBsb2dpYyBmb3IgaGFuZGxpbmcgbWF0Y2hlcyB2cy4gbGl0ZXJhbHMuCgpmbiBtYWluKCkgewogICAgbGV0IG11dCBpbnB1dF9kYXRhOiBbaTMyOyA1MTJdID0gWzA7IDUxMl07CiAgICBsZXQgbXV0IGNvbXByZXNzZWRfZGF0YTogW2kzMjsgNTEyXSA9IFswOyA1MTJdOwogICAgbGV0IG11dCBjb21wcmVzc2VkX2xlbjogaTMyID0gMDsKCiAgICBmbiBnZW5lcmF0ZV9pbnB1dChkYXRhOiAmbXV0IFtpMzI7IDUxMl0pIHsKICAgICAgICBsZXQgbXV0IGk6IGkzMiA9IDA7CiAgICAgICAgd2hpbGUgKGkgPCA1MTIpIHsKICAgICAgICAgICAgaWYgKGkgJSAyMCA8IDEwKSB7CiAgICAgICAgICAgICAgICBkYXRhW2kgYXMgdXNpemVdID0gKGkgJSAxMCkgKyA2NTsgLy8gJ0EnIHRocm91Z2ggJ0onCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBkYXRhW2kgYXMgdXNpemVdID0gKGkgKiAxNyAlIDE1KSArIDk3OyAvLyAnYScgdGhyb3VnaCAnbycKICAgICAgICAgICAgfQogICAgICAgICAgICBpID0gaSArIDE7CiAgICAgICAgfQogICAgICAgIC8vIENyZWF0ZSBzb21lIGxvbmcgcmVwZWF0aW5nIHBhdHRlcm5zCiAgICAgICAgaSA9IDEwMDsKICAgICAgICB3aGlsZSAoaSA8IDEyMCkgewogICAgICAgICAgICBkYXRhW2kgYXMgdXNpemVdID0gZGF0YVtpIGFzIHVzaXplIC0gMjBdOwogICAgICAgICAgICBpID0gaSArIDE7CiAgICAgICAgfQogICAgICAgIGkgPSAzMDA7CiAgICAgICAgd2hpbGUgKGkgPCAzMzApIHsKICAgICAgICAgICAgZGF0YVtpIGFzIHVzaXplXSA9IGRhdGFbaSBhcyB1c2l6ZSAtIDMwXTsKICAgICAgICAgICAgaSA9IGkgKyAxOwogICAgICAgIH0KICAgIH0KCiAgICBmbiBmaW5kX2xvbmdlc3RfbWF0Y2goZGF0YTogJltpMzI7IDUxMl0sIGN1cnJlbnRfcG9zOiBpMzIsIHNlYXJjaF9idWZmZXJfc3RhcnQ6IGkzMikgLT4gaTMyIHsKICAgICAgICBsZXQgbXV0IGJlc3RfbWF0Y2hfbGVuOiBpMzIgPSAwOwogICAgICAgIGxldCBtdXQgYmVzdF9tYXRjaF9vZmZzZXQ6IGkzMiA9IDA7CiAgICAgICAgbGV0IG1heF9sb29rYWhlYWQ6IGkzMiA9IDE4OwoKICAgICAgICBsZXQgbXV0IGk6IGkzMiA9IGN1cnJlbnRfcG9zIC0gMTsKICAgICAgICB3aGlsZSAoaSA+PSBzZWFyY2hfYnVmZmVyX3N0YXJ0KSB7CiAgICAgICAgICAgIGxldCBtdXQgY3VycmVudF9tYXRjaF9sZW46IGkzMiA9IDA7CiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50X3BvcyArIGN1cnJlbnRfbWF0Y2hfbGVuIDwgNTEyICYmCiAgICAgICAgICAgICAgICAgIGN1cnJlbnRfbWF0Y2hfbGVuIDwgbWF4X2xvb2thaGVhZCAmJgogICAgICAgICAgICAgICAgICBkYXRhWyhpICsgY3VycmVudF9tYXRjaF9sZW4pIGFzIHVzaXplXSA9PSBkYXRhWyhjdXJyZW50X3BvcyArIGN1cnJlbnRfbWF0Y2hfbGVuKSBhcyB1c2l6ZV0pIHsKICAgICAgICAgICAgICAgIGN1cnJlbnRfbWF0Y2hfbGVuID0gY3VycmVudF9tYXRjaF9sZW4gKyAxOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoY3VycmVudF9tYXRjaF9sZW4gPiBiZXN0X21hdGNoX2xlbikgewogICAgICAgICAgICAgICAgYmVzdF9tYXRjaF9sZW4gPSBjdXJyZW50X21hdGNoX2xlbjsKICAgICAgICAgICAgICAgIGJlc3RfbWF0Y2hfb2Zmc2V0ID0gY3VycmVudF9wb3MgLSBpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGkgPSBpIC0gMTsKICAgICAgICB9CgogICAgICAgIGlmIChiZXN0X21hdGNoX2xlbiA+PSAzKSB7CiAgICAgICAgICAgIHJldHVybiAoYmVzdF9tYXRjaF9vZmZzZXQgKiAxMDAwKSArIGJlc3RfbWF0Y2hfbGVuOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMDsKICAgIH0KCiAgICBnZW5lcmF0ZV9pbnB1dCgmbXV0IGlucHV0X2RhdGEpOwoKICAgIGxldCBtdXQgY3VycmVudF9wb3M6IGkzMiA9IDA7CiAgICBsZXQgd2luZG93X3NpemU6IGkzMiA9IDEyODsKCiAgICB3aGlsZSAoY3VycmVudF9wb3MgPCA1MTIpIHsKICAgICAgICBsZXQgc2VhcmNoX2J1ZmZlcl9zdGFydDogaTMyID0gaWYgKGN1cnJlbnRfcG9zID4gd2luZG93X3NpemUpIHsKICAgICAgICAgICAgY3VycmVudF9wb3MgLSB3aW5kb3dfc2l6ZQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIDAKICAgICAgICB9OwoKICAgICAgICBsZXQgbWF0Y2hfcmVzdWx0OiBpMzIgPSBmaW5kX2xvbmdlc3RfbWF0Y2goJmlucHV0X2RhdGEsIGN1cnJlbnRfcG9zLCBzZWFyY2hfYnVmZmVyX3N0YXJ0KTsKCiAgICAgICAgaWYgKG1hdGNoX3Jlc3VsdCA+IDApIHsKICAgICAgICAgICAgbGV0IG9mZnNldDogaTMyID0gbWF0Y2hfcmVzdWx0IC8gMTAwMDsKICAgICAgICAgICAgbGV0IGxlbjogaTMyID0gbWF0Y2hfcmVzdWx0ICUgMTAwMDsKCiAgICAgICAgICAgIGNvbXByZXNzZWRfZGF0YVtjb21wcmVzc2VkX2xlbiBhcyB1c2l6ZV0gPSAxOyAvLyBUeXBlIDE6IG1hdGNoCiAgICAgICAgICAgIGNvbXByZXNzZWRfbGVuID0gY29tcHJlc3NlZF9sZW4gKyAxOwogICAgICAgICAgICBjb21wcmVzc2VkX2RhdGFbY29tcHJlc3NlZF9sZW4gYXMgdXNpemVdID0gb2Zmc2V0OwogICAgICAgICAgICBjb21wcmVzc2VkX2xlbiA9IGNvbXByZXNzZWRfbGVuICsgMTsKICAgICAgICAgICAgY29tcHJlc3NlZF9kYXRhW2NvbXByZXNzZWRfbGVuIGFzIHVzaXplXSA9IGxlbjsKICAgICAgICAgICAgY29tcHJlc3NlZF9sZW4gPSBjb21wcmVzc2VkX2xlbiArIDE7CiAgICAgICAgICAgIGN1cnJlbnRfcG9zID0gY3VycmVudF9wb3MgKyBsZW47CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gRml4ZWQ6IGRlY2xhcmUgYW5kIGFzc2lnbiBsaXRlcmFsX3ZhbHVlIG91dHNpZGUgdGhlIGlubmVyIGlmIGJsb2NrCiAgICAgICAgICAgIC8vIHRvIGVuc3VyZSBpdCBpcyBhbHdheXMgaW4gc2NvcGUuCiAgICAgICAgICAgIGxldCBsaXRlcmFsX3ZhbHVlOiBpMzIgPSBpbnB1dF9kYXRhW2N1cnJlbnRfcG9zIGFzIHVzaXplXTsKICAgICAgICAgICAgaWYgKGNvbXByZXNzZWRfbGVuIDwgNTEwKSB7CiAgICAgICAgICAgICAgICBjb21wcmVzc2VkX2RhdGFbY29tcHJlc3NlZF9sZW4gYXMgdXNpemVdID0gMDsgLy8gVHlwZSAwOiBsaXRlcmFsCiAgICAgICAgICAgICAgICBjb21wcmVzc2VkX2xlbiA9IGNvbXByZXNzZWRfbGVuICsgMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb21wcmVzc2VkX2RhdGFbY29tcHJlc3NlZF9sZW4gYXMgdXNpemVdID0gbGl0ZXJhbF92YWx1ZTsKICAgICAgICAgICAgY29tcHJlc3NlZF9sZW4gPSBjb21wcmVzc2VkX2xlbiArIDE7CiAgICAgICAgICAgIGN1cnJlbnRfcG9zID0gY3VycmVudF9wb3MgKyAxOwogICAgICAgIH0KICAgIH0KCiAgICBsZXQgbXV0IGNoZWNrc3VtOiBpMzIgPSAwOwogICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgd2hpbGUgKGkgPCBjb21wcmVzc2VkX2xlbikgewogICAgICAgIGNoZWNrc3VtID0gY2hlY2tzdW0gKyBjb21wcmVzc2VkX2RhdGFbaSBhcyB1c2l6ZV0gKiAoaSArIDEpOwogICAgICAgIGkgPSBpICsgMTsKICAgIH0KICAgIHByaW50bG5JbnQoY2hlY2tzdW0pOwogICAgcHJpbnRsbkludChjb21wcmVzc2VkX2xlbik7CiAgICBleGl0KDApOwp9Cg==", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (46, "comprehensive46", 2, "LyoKVGVzdCBQYWNrYWdlOiBTZW1hbnRpYy0yClRlc3QgVGFyZ2V0OiBjb21wcmVoZW5zaXZlCkF1dGhvcjogV2VueGluIFpoZW5nClRpbWU6IDIwMjUtMDgtMTcKVmVyZGljdDogUGFzcwpUZXN0IE5hbWU6IFJheSBUcmFjaW5nIFNjZW5lIFJlbmRlcmVyClN1bW1hcnk6IFRoaXMgdGVzdCBjb21wcmVoZW5zaXZlbHkgZXZhbHVhdGVzIGNvbXBpbGVyIG9wdGltaXphdGlvbnMgZm9yOgpEZXRhaWxzOgpGbG9hdGluZy1wb2ludC1saWtlIGNhbGN1bGF0aW9ucyB1c2luZyBzY2FsZWQgaW50ZWdlcnMuCkNvbXBsZXggZ2VvbWV0cmljIGNvbXB1dGF0aW9ucyAoaW50ZXJzZWN0aW9ucywgbm9ybWFscykuCkRlZXAgcmVjdXJzaW9uIGZvciByYXkgYm91bmNpbmcgYW5kIHJlZmxlY3Rpb25zLgpQZXJmb3JtYW5jZSBvZiB2ZWN0b3ItbGlrZSBvcGVyYXRpb25zIG9uIHNtYWxsIGFycmF5cy4KT3B0aW1pemF0aW9uIG9mIGxvb3BzIG92ZXIgcGl4ZWxzIGFuZCBvYmplY3RzLgpGdW5jdGlvbiBpbmxpbmluZyBmb3IgbWF0aCBhbmQgdXRpbGl0eSBmdW5jdGlvbnMuCiovCgovLyBjb21wcmVoZW5zaXZlNDYucnggLSBSYXkgVHJhY2luZyBTY2VuZSBSZW5kZXJlcgovLyBUaGlzIHRlc3QgY29tcHJlaGVuc2l2ZWx5IGV2YWx1YXRlcyBjb21waWxlciBvcHRpbWl6YXRpb25zIGZvcjoKLy8gLSBGbG9hdGluZy1wb2ludC1saWtlIGNhbGN1bGF0aW9ucyB1c2luZyBzY2FsZWQgaW50ZWdlcnMuCi8vIC0gQ29tcGxleCBnZW9tZXRyaWMgY29tcHV0YXRpb25zIChpbnRlcnNlY3Rpb25zLCBub3JtYWxzKS4KLy8gLSBEZWVwIHJlY3Vyc2lvbiBmb3IgcmF5IGJvdW5jaW5nIGFuZCByZWZsZWN0aW9ucy4KLy8gLSBQZXJmb3JtYW5jZSBvZiB2ZWN0b3ItbGlrZSBvcGVyYXRpb25zIG9uIHNtYWxsIGFycmF5cy4KLy8gLSBPcHRpbWl6YXRpb24gb2YgbG9vcHMgb3ZlciBwaXhlbHMgYW5kIG9iamVjdHMuCi8vIC0gRnVuY3Rpb24gaW5saW5pbmcgZm9yIG1hdGggYW5kIHV0aWxpdHkgZnVuY3Rpb25zLgoKY29uc3Qgc2NhbGU6IGkzMiA9IDgwOyAvLyBTY2FsZSBmYWN0b3IgZm9yIGZpeGVkLXBvaW50IGFyaXRobWV0aWMKZm4gbWFpbigpIHsKICAgIHN0cnVjdCBWZWMzIHsgeDogaTMyLCB5OiBpMzIsIHo6IGkzMiwgfQogICAgc3RydWN0IFJheSB7IG9yaWdpbjogVmVjMywgZGlyOiBWZWMzLCB9CiAgICBzdHJ1Y3QgU3BoZXJlIHsgY2VudGVyOiBWZWMzLCByYWRpdXM6IGkzMiwgY29sb3I6IFZlYzMsIH0KICAgIHN0cnVjdCBMaWdodCB7IHBvczogVmVjMywgaW50ZW5zaXR5OiBpMzIsIH0KCiAgICBsZXQgbXV0IHNjcmVlbjogW1tpMzI7IDY0XTsgNjRdID0gW1swOyA2NF07IDY0XTsKICAgIGxldCBtdXQgc3BoZXJlczogW1NwaGVyZTsgNF0gPSBbCiAgICAgICAgU3BoZXJlIHsgY2VudGVyOiBWZWMzIHt4OjAseTowLHo6MH0sIHJhZGl1czogMCwgY29sb3I6IFZlYzMge3g6MCx5OjAsejowfSB9OyA0CiAgICBdOwogICAgbGV0IG11dCBsaWdodHM6IFtMaWdodDsgMl0gPSBbCiAgICAgICAgTGlnaHQgeyBwb3M6IFZlYzMge3g6MCx5OjAsejowfSwgaW50ZW5zaXR5OiAwIH07IDIKICAgIF07CgogICAgZm4gc2V0dXBfc2NlbmUoc3BoZXJlczogJm11dCBbU3BoZXJlOyA0XSwgbGlnaHRzOiAmbXV0IFtMaWdodDsgMl0pIHsKICAgICAgICBzcGhlcmVzWzBdID0gU3BoZXJlIHsgY2VudGVyOiBWZWMzIHsgeDogMCwgeTogLTEgKiBzY2FsZSwgejogMyAqIHNjYWxlIH0sIHJhZGl1czogMSAqIHNjYWxlLCBjb2xvcjogVmVjMyB7IHg6IDI1NSwgeTogMCwgejogMCB9IH07CiAgICAgICAgc3BoZXJlc1sxXSA9IFNwaGVyZSB7IGNlbnRlcjogVmVjMyB7IHg6IDIgKiBzY2FsZSwgeTogMCwgejogNCAqIHNjYWxlIH0sIHJhZGl1czogMSAqIHNjYWxlLCBjb2xvcjogVmVjMyB7IHg6IDAsIHk6IDAsIHo6IDI1NSB9IH07CiAgICAgICAgc3BoZXJlc1syXSA9IFNwaGVyZSB7IGNlbnRlcjogVmVjMyB7IHg6IC0yICogc2NhbGUsIHk6IDAsIHo6IDQgKiBzY2FsZSB9LCByYWRpdXM6IDEgKiBzY2FsZSwgY29sb3I6IFZlYzMgeyB4OiAwLCB5OiAyNTUsIHo6IDAgfSB9OwogICAgICAgIHNwaGVyZXNbM10gPSBTcGhlcmUgeyBjZW50ZXI6IFZlYzMgeyB4OiAwLCB5OiAtMjAxICogc2NhbGUsIHo6IDAgfSwgcmFkaXVzOiAyMDAgKiBzY2FsZSwgY29sb3I6IFZlYzMgeyB4OiAyMDAsIHk6IDIwMCwgejogMCB9IH07CiAgICAgICAgbGlnaHRzWzBdID0gTGlnaHQgeyBwb3M6IFZlYzMgeyB4OiAtMjAgKiBzY2FsZSwgeTogMjAgKiBzY2FsZSwgejogLTIwICogc2NhbGUgfSwgaW50ZW5zaXR5OiAxNTAgfTsKICAgICAgICBsaWdodHNbMV0gPSBMaWdodCB7IHBvczogVmVjMyB7IHg6IDIwICogc2NhbGUsIHk6IDMwICogc2NhbGUsIHo6IC0xMCAqIHNjYWxlIH0sIGludGVuc2l0eTogMTIwIH07CiAgICB9CgogICAgZm4gdmVjX2RvdChhOiAmVmVjMywgYjogJlZlYzMpIC0+IGkzMiB7CiAgICAgICAgcmV0dXJuIChhLnggKiBiLnggKyBhLnkgKiBiLnkgKyBhLnogKiBiLnopIC8gc2NhbGU7CiAgICB9CgogICAgZm4gdmVjX3N1YihhOiAmVmVjMywgYjogJlZlYzMpIC0+IFZlYzMgewogICAgICAgIHJldHVybiBWZWMzIHsgeDogYS54IC0gYi54LCB5OiBhLnkgLSBiLnksIHo6IGEueiAtIGIueiB9OwogICAgfQoKICAgIGZuIGludGVyc2VjdChyYXk6ICZSYXksIHNwaGVyZTogJlNwaGVyZSkgLT4gaTMyIHsKICAgICAgICBsZXQgb2M6IFZlYzMgPSB2ZWNfc3ViKCZyYXkub3JpZ2luLCAmc3BoZXJlLmNlbnRlcik7CiAgICAgICAgbGV0IGE6IGkzMiA9IHZlY19kb3QoJnJheS5kaXIsICZyYXkuZGlyKTsKICAgICAgICBsZXQgYjogaTMyID0gMiAqIHZlY19kb3QoJm9jLCAmcmF5LmRpcik7CiAgICAgICAgbGV0IGM6IGkzMiA9IHZlY19kb3QoJm9jLCAmb2MpIC0gKHNwaGVyZS5yYWRpdXMgKiBzcGhlcmUucmFkaXVzKSAvIHNjYWxlOwogICAgICAgIGxldCBkaXNjcmltaW5hbnQ6IGkzMiA9IGIgKiBiIC0gNCAqIGEgKiBjIC8gc2NhbGU7CiAgICAgICAgaWYgKGRpc2NyaW1pbmFudCA8IDApIHsKICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIH0KICAgICAgICAvLyBTaW1wbGlmaWVkIHRvIHJldHVybiBuZWFyZXN0IGludGVyc2VjdGlvbgogICAgICAgIHJldHVybiAoLWIgLSBpc3FydChkaXNjcmltaW5hbnQpKSAvICgyICogYSAvIHNjYWxlKTsKICAgIH0KICAgIAogICAgLy8gSGlkZGVuIEVycm9yOiBgaXNxcnRgIGlzIGRlZmluZWQgYWZ0ZXIgaXQgaXMgZmlyc3QgdXNlZCBpbiBgaW50ZXJzZWN0YC4KICAgIC8vIEEgc2ltcGxlLCBzaW5nbGUtcGFzcyBjb21waWxlciB3b3VsZCBmYWlsIGhlcmUuCiAgICBmbiBpc3FydChuOiBpMzIpIC0+IGkzMiB7CiAgICAgICAgaWYgKG4gPCAwKSB7IHJldHVybiAwOyB9CiAgICAgICAgbGV0IG11dCB4OiBpMzIgPSBuOwogICAgICAgIGxldCBtdXQgeTogaTMyID0gKHggKyAxKSAvIDI7CiAgICAgICAgd2hpbGUgKHkgPCB4KSB7CiAgICAgICAgICAgIHggPSB5OwogICAgICAgICAgICB5ID0gKHggKyBuIC8geCkgLyAyOwogICAgICAgIH0KICAgICAgICByZXR1cm4geDsKICAgIH0KCiAgICBzZXR1cF9zY2VuZSgmbXV0IHNwaGVyZXMsICZtdXQgbGlnaHRzKTsKCiAgICBsZXQgd2lkdGg6IGkzMiA9IDY0OwogICAgbGV0IGhlaWdodDogaTMyID0gNjQ7CiAgICBsZXQgbXV0IHk6IGkzMiA9IDA7CiAgICB3aGlsZSAoeSA8IGhlaWdodCkgewogICAgICAgIGxldCBtdXQgeDogaTMyID0gMDsKICAgICAgICB3aGlsZSAoeCA8IHdpZHRoKSB7CiAgICAgICAgICAgIGxldCByYXlfZGlyOiBWZWMzID0gVmVjMyB7CiAgICAgICAgICAgICAgICB4OiAoeCAtIHdpZHRoIC8gMikgKiBzY2FsZSAvIHdpZHRoLAogICAgICAgICAgICAgICAgeTogKHkgLSBoZWlnaHQgLyAyKSAqIHNjYWxlIC8gaGVpZ2h0LAogICAgICAgICAgICAgICAgejogc2NhbGUKICAgICAgICAgICAgfTsKICAgICAgICAgICAgbGV0IHJheTogUmF5ID0gUmF5IHsgb3JpZ2luOiBWZWMzIHsgeDogMCwgeTogMCwgejogLTEgKiBzY2FsZSB9LCBkaXI6IHJheV9kaXIgfTsKCiAgICAgICAgICAgIGxldCBtdXQgbWluX2Rpc3Q6IGkzMiA9IDEwMDAwICogc2NhbGU7CiAgICAgICAgICAgIGxldCBtdXQgaGl0X2NvbG9yOiBWZWMzID0gVmVjMyB7IHg6IDIwLCB5OiAyMCwgejogNDAgfTsgLy8gQmFja2dyb3VuZCBjb2xvcgogICAgICAgICAgICBsZXQgbXV0IHM6IGkzMiA9IDA7CiAgICAgICAgICAgIHdoaWxlIChzIDwgNCkgewogICAgICAgICAgICAgICAgbGV0IGRpc3Q6IGkzMiA9IGludGVyc2VjdCgmcmF5LCAmc3BoZXJlc1tzIGFzIHVzaXplXSk7CiAgICAgICAgICAgICAgICBpZiAoZGlzdCA+IDAgJiYgZGlzdCA8IG1pbl9kaXN0KSB7CiAgICAgICAgICAgICAgICAgICAgbWluX2Rpc3QgPSBkaXN0OwogICAgICAgICAgICAgICAgICAgIGhpdF9jb2xvciA9IHNwaGVyZXNbcyBhcyB1c2l6ZV0uY29sb3I7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzID0gcyArIDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc2NyZWVuW3ggYXMgdXNpemVdW3kgYXMgdXNpemVdID0gKGhpdF9jb2xvci54ICsgaGl0X2NvbG9yLnkgKyBoaXRfY29sb3IueikgLyAzOwogICAgICAgICAgICB4ID0geCArIDE7CiAgICAgICAgfQogICAgICAgIHkgPSB5ICsgMTsKICAgIH0KCiAgICBsZXQgbXV0IGNoZWNrc3VtOiBpMzIgPSAwOwogICAgeSA9IDA7CiAgICB3aGlsZSAoeSA8IGhlaWdodCkgewogICAgICAgIGxldCBtdXQgeDogaTMyID0gMDsKICAgICAgICB3aGlsZSAoeCA8IHdpZHRoKSB7CiAgICAgICAgICAgIGNoZWNrc3VtID0gY2hlY2tzdW0gKyBzY3JlZW5beCBhcyB1c2l6ZV1beSBhcyB1c2l6ZV0gKiAoeCArIHkgKiB3aWR0aCk7CiAgICAgICAgICAgIHggPSB4ICsgMTsKICAgICAgICB9CiAgICAgICAgeSA9IHkgKyAxOwogICAgfQogICAgcHJpbnRsbkludChjaGVja3N1bSk7CiAgICBleGl0KDApOwp9Cg==", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (47, "comprehensive47", 2, "LyoKVGVzdCBQYWNrYWdlOiBTZW1hbnRpYy0yClRlc3QgVGFyZ2V0OiBjb21wcmVoZW5zaXZlCkF1dGhvcjogV2VueGluIFpoZW5nClRpbWU6IDIwMjUtMDgtMTcKVmVyZGljdDogUGFzcwpUZXN0IE5hbWU6IEdlbmV0aWMgQWxnb3JpdGhtIGZvciBPcHRpbWl6YXRpb24KU3VtbWFyeTogVGhpcyB0ZXN0IGNvbXByZWhlbnNpdmVseSBldmFsdWF0ZXMgY29tcGlsZXIgb3B0aW1pemF0aW9ucyBmb3I6CkRldGFpbHM6ClNpbXVsYXRpb24gb2YgZXZvbHV0aW9uYXJ5IHByb2Nlc3NlcyB3aXRoIHNlbGVjdGlvbiwgY3Jvc3NvdmVyLCBhbmQgbXV0YXRpb24uCkNvbXBsZXggZml0bmVzcyBmdW5jdGlvbiBjYWxjdWxhdGlvbnMgaW52b2x2aW5nIG5vbi1saW5lYXIgb3BlcmF0aW9ucy4KTWFuYWdlbWVudCBvZiBhIHBvcHVsYXRpb24gb2YgY2FuZGlkYXRlIHNvbHV0aW9ucyAobGFyZ2UgYXJyYXkgb2Ygc3RydWN0cykuClJhbmRvbSBudW1iZXIgZ2VuZXJhdGlvbiBhbmQgaXRzIGltcGFjdCBvbiBjb250cm9sIGZsb3cuCkxvb3AtaGVhdnkgb3BlcmF0aW9ucyBmb3IgZXZhbHVhdGluZyBhbmQgZXZvbHZpbmcgdGhlIHBvcHVsYXRpb24uClJlLXVzZSBvZiB2YXJpYWJsZXMgd2l0aCBkaWZmZXJlbnQgbWVhbmluZ3MgaW4gZGlmZmVyZW50IHNjb3Blcy4KKi8KCi8vIGNvbXByZWhlbnNpdmU0Ny5yeCAtIEdlbmV0aWMgQWxnb3JpdGhtIGZvciBPcHRpbWl6YXRpb24KLy8gVGhpcyB0ZXN0IGNvbXByZWhlbnNpdmVseSBldmFsdWF0ZXMgY29tcGlsZXIgb3B0aW1pemF0aW9ucyBmb3I6Ci8vIC0gU2ltdWxhdGlvbiBvZiBldm9sdXRpb25hcnkgcHJvY2Vzc2VzIHdpdGggc2VsZWN0aW9uLCBjcm9zc292ZXIsIGFuZCBtdXRhdGlvbi4KLy8gLSBDb21wbGV4IGZpdG5lc3MgZnVuY3Rpb24gY2FsY3VsYXRpb25zIGludm9sdmluZyBub24tbGluZWFyIG9wZXJhdGlvbnMuCi8vIC0gTWFuYWdlbWVudCBvZiBhIHBvcHVsYXRpb24gb2YgY2FuZGlkYXRlIHNvbHV0aW9ucyAobGFyZ2UgYXJyYXkgb2Ygc3RydWN0cykuCi8vIC0gUmFuZG9tIG51bWJlciBnZW5lcmF0aW9uIGFuZCBpdHMgaW1wYWN0IG9uIGNvbnRyb2wgZmxvdy4KLy8gLSBMb29wLWhlYXZ5IG9wZXJhdGlvbnMgZm9yIGV2YWx1YXRpbmcgYW5kIGV2b2x2aW5nIHRoZSBwb3B1bGF0aW9uLgovLyAtIFJlLXVzZSBvZiB2YXJpYWJsZXMgd2l0aCBkaWZmZXJlbnQgbWVhbmluZ3MgaW4gZGlmZmVyZW50IHNjb3Blcy4KCmZuIG1haW4oKSB7CiAgICBzdHJ1Y3QgQ2hyb21vc29tZSB7CiAgICAgICAgZ2VuZXM6IFtpMzI7IDE2XSwKICAgICAgICBmaXRuZXNzOiBpMzIsCiAgICB9CgogICAgbGV0IG11dCBwb3B1bGF0aW9uOiBbQ2hyb21vc29tZTsgNjRdID0gW0Nocm9tb3NvbWUgewogICAgICAgIGdlbmVzOiBbMDsgMTZdLAogICAgICAgIGZpdG5lc3M6IDAsCiAgICB9OyA2NF07CiAgICBsZXQgbXV0IHJuZ19zZWVkOiBpMzIgPSAxMjM0NTsKCiAgICBmbiBwc2V1ZG9fcmFuZChzZWVkOiAmbXV0IGkzMikgLT4gaTMyIHsKICAgICAgICAqc2VlZCA9ICgqc2VlZCAqIDEyNyArIDE2Nzc3MzM3KSAmIDE2Nzc3MjE1OwogICAgICAgIHJldHVybiAqc2VlZDsKICAgIH0KCiAgICBmbiBpbml0X3BvcHVsYXRpb24ocG9wOiAmbXV0IFtDaHJvbW9zb21lOyA2NF0sIHNlZWQ6ICZtdXQgaTMyKSB7CiAgICAgICAgbGV0IG11dCBpOiB1c2l6ZSA9IDA7CiAgICAgICAgd2hpbGUgKGkgPCA2NCkgewogICAgICAgICAgICBsZXQgbXV0IGo6IHVzaXplID0gMDsKICAgICAgICAgICAgd2hpbGUgKGogPCAxNikgewogICAgICAgICAgICAgICAgcG9wW2kgYXMgdXNpemVdLmdlbmVzW2ogYXMgdXNpemVdID0gcHNldWRvX3JhbmQoc2VlZCkgJSAyMDAgLSAxMDA7CiAgICAgICAgICAgICAgICBqID0gaiArIDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaSA9IGkgKyAxOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBGaXRuZXNzIGZ1bmN0aW9uOiB0cnkgdG8gbWFrZSBnZW5lcyBzdW0gdG8gYSB0YXJnZXQsIHdpdGggcGVuYWx0aWVzCiAgICBmbiBjYWxjdWxhdGVfZml0bmVzcyhjaHJvbTogJm11dCBDaHJvbW9zb21lKSB7CiAgICAgICAgbGV0IHRhcmdldF9zdW06IGkzMiA9IDUwMDsKICAgICAgICBsZXQgbXV0IHN1bTogaTMyID0gMDsKICAgICAgICBsZXQgbXV0IHBlbmFsdHk6IGkzMiA9IDA7CiAgICAgICAgbGV0IG11dCBpOiB1c2l6ZSA9IDA7CiAgICAgICAgd2hpbGUgKGkgPCAxNikgewogICAgICAgICAgICBzdW0gPSBzdW0gKyBjaHJvbS5nZW5lc1tpIGFzIHVzaXplXTsKICAgICAgICAgICAgaWYgKGNocm9tLmdlbmVzW2kgYXMgdXNpemVdID4gOTAgfHwgY2hyb20uZ2VuZXNbaSBhcyB1c2l6ZV0gPCAtOTApIHsKICAgICAgICAgICAgICAgIHBlbmFsdHkgPSBwZW5hbHR5ICsgKGNocm9tLmdlbmVzW2kgYXMgdXNpemVdICogY2hyb20uZ2VuZXNbaSBhcyB1c2l6ZV0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGkgPSBpICsgMTsKICAgICAgICB9CiAgICAgICAgbGV0IGRpZmY6IGkzMiA9IHRhcmdldF9zdW0gLSBzdW07CiAgICAgICAgY2hyb20uZml0bmVzcyA9IC0oZGlmZiAqIGRpZmYpIC0gcGVuYWx0eTsgLy8gTWF4aW1pemUgZml0bmVzcyAoY2xvc2VyIHRvIDAgaXMgYmV0dGVyKQogICAgfQoKICAgIGZuIGV2YWx1YXRlX3BvcHVsYXRpb24ocG9wOiAmbXV0IFtDaHJvbW9zb21lOyA2NF0pIHsKICAgICAgICBsZXQgbXV0IGk6IHVzaXplID0gMDsKICAgICAgICB3aGlsZSAoaSA8IDY0KSB7CiAgICAgICAgICAgIGNhbGN1bGF0ZV9maXRuZXNzKCZtdXQgcG9wW2kgYXMgdXNpemVdKTsKICAgICAgICAgICAgaSA9IGkgKyAxOwogICAgICAgIH0KICAgIH0KCiAgICBmbiBzZWxlY3Rpb24ocG9wOiAmW0Nocm9tb3NvbWU7IDY0XSwgc2VlZDogJm11dCBpMzIpIC0+IGkzMiB7CiAgICAgICAgbGV0IHRvdXJuYW1lbnRfc2l6ZTogaTMyID0gNTsKICAgICAgICBsZXQgbXV0IGJlc3RfaW5kZXg6IGkzMiA9IC0xOwogICAgICAgIGxldCBtdXQgYmVzdF9maXRuZXNzOiBpMzIgPSAtOTk5OTk5OTk7CiAgICAgICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgICAgIHdoaWxlIChpIDwgdG91cm5hbWVudF9zaXplKSB7CiAgICAgICAgICAgIGxldCBpZHg6IHVzaXplID0gcHNldWRvX3JhbmQoc2VlZCkgYXMgdXNpemUgJSA2NDsKICAgICAgICAgICAgaWYgKHBvcFtpZHggYXMgdXNpemVdLmZpdG5lc3MgPiBiZXN0X2ZpdG5lc3MpIHsKICAgICAgICAgICAgICAgIGJlc3RfZml0bmVzcyA9IHBvcFtpZHggYXMgdXNpemVdLmZpdG5lc3M7CiAgICAgICAgICAgICAgICBiZXN0X2luZGV4ID0gaWR4IGFzIGkzMjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpID0gaSArIDE7CiAgICAgICAgfQogICAgICAgIHJldHVybiBiZXN0X2luZGV4OwogICAgfQoKICAgIGZuIGNyb3Nzb3ZlcigKICAgICAgICBwYXJlbnQxOiAmQ2hyb21vc29tZSwKICAgICAgICBwYXJlbnQyOiAmQ2hyb21vc29tZSwKICAgICAgICBjaGlsZDogJm11dCBDaHJvbW9zb21lLAogICAgICAgIHNlZWQ6ICZtdXQgaTMyLAogICAgKSB7CiAgICAgICAgbGV0IGNyb3Nzb3Zlcl9wb2ludDogaTMyID0gcHNldWRvX3JhbmQoc2VlZCkgJSAxNjsKICAgICAgICBsZXQgbXV0IGk6IHVzaXplID0gMDsKICAgICAgICB3aGlsZSAoaSA8IDE2KSB7CiAgICAgICAgICAgIGlmIChpIDwgY3Jvc3NvdmVyX3BvaW50IGFzIHVzaXplKSB7CiAgICAgICAgICAgICAgICBjaGlsZC5nZW5lc1tpIGFzIHVzaXplXSA9IHBhcmVudDEuZ2VuZXNbaSBhcyB1c2l6ZV07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjaGlsZC5nZW5lc1tpIGFzIHVzaXplXSA9IHBhcmVudDIuZ2VuZXNbaSBhcyB1c2l6ZV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaSA9IGkgKyAxOwogICAgICAgIH0KICAgIH0KCiAgICBmbiBtdXRhdGUoY2hyb206ICZtdXQgQ2hyb21vc29tZSwgc2VlZDogJm11dCBpMzIpIHsKICAgICAgICBsZXQgbXV0YXRpb25fcmF0ZTogaTMyID0gMTA7IC8vIG91dCBvZiAxMDAKICAgICAgICBsZXQgbXV0IGk6IHVzaXplID0gMDsKICAgICAgICB3aGlsZSAoaSA8IDE2KSB7CiAgICAgICAgICAgIGlmIChwc2V1ZG9fcmFuZChzZWVkKSAlIDEwMCA8IG11dGF0aW9uX3JhdGUpIHsKICAgICAgICAgICAgICAgIGNocm9tLmdlbmVzW2kgYXMgdXNpemVdID0gY2hyb20uZ2VuZXNbaSBhcyB1c2l6ZV0gKyAocHNldWRvX3JhbmQoc2VlZCkgJSAyMCAtIDEwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpID0gaSArIDE7CiAgICAgICAgfQogICAgfQoKICAgIGluaXRfcG9wdWxhdGlvbigmbXV0IHBvcHVsYXRpb24sICZtdXQgcm5nX3NlZWQpOwoKICAgIGxldCBtdXQgZ2VuZXJhdGlvbjogaTMyID0gMDsKICAgIHdoaWxlIChnZW5lcmF0aW9uIDwgNTApIHsKICAgICAgICBldmFsdWF0ZV9wb3B1bGF0aW9uKCZtdXQgcG9wdWxhdGlvbik7CiAgICAgICAgbGV0IG11dCBuZXdfcG9wdWxhdGlvbjogW0Nocm9tb3NvbWU7IDY0XSA9IFtDaHJvbW9zb21lIHsKICAgICAgICAgICAgZ2VuZXM6IFswOyAxNl0sCiAgICAgICAgICAgIGZpdG5lc3M6IDAsCiAgICAgICAgfTsgNjRdOwoKICAgICAgICBsZXQgbXV0IGk6IHVzaXplID0gMDsKICAgICAgICB3aGlsZSAoaSA8IDY0KSB7CiAgICAgICAgICAgIGxldCBwMV9pZHg6IHVzaXplID0gc2VsZWN0aW9uKCZwb3B1bGF0aW9uLCAmbXV0IHJuZ19zZWVkKSBhcyB1c2l6ZTsKICAgICAgICAgICAgbGV0IHAyX2lkeDogdXNpemUgPSBzZWxlY3Rpb24oJnBvcHVsYXRpb24sICZtdXQgcm5nX3NlZWQpIGFzIHVzaXplOwogICAgICAgICAgICBjcm9zc292ZXIoCiAgICAgICAgICAgICAgICAmcG9wdWxhdGlvbltwMV9pZHggYXMgdXNpemVdLAogICAgICAgICAgICAgICAgJnBvcHVsYXRpb25bcDJfaWR4IGFzIHVzaXplXSwKICAgICAgICAgICAgICAgICZtdXQgbmV3X3BvcHVsYXRpb25baSBhcyB1c2l6ZV0sCiAgICAgICAgICAgICAgICAmbXV0IHJuZ19zZWVkLAogICAgICAgICAgICApOwogICAgICAgICAgICBtdXRhdGUoJm11dCBuZXdfcG9wdWxhdGlvbltpIGFzIHVzaXplXSwgJm11dCBybmdfc2VlZCk7CiAgICAgICAgICAgIGkgPSBpICsgMTsKICAgICAgICB9CgogICAgICAgIC8vIEhpZGRlbiBFcnJvcjogVGhlIHZhcmlhYmxlIGBpYCBpcyByZS1kZWNsYXJlZCBpbiB0aGlzIGlubmVyIHNjb3BlLAogICAgICAgIC8vIHNoYWRvd2luZyB0aGUgb3V0ZXIgYGlgLiBBIGNvbXBpbGVyIHNob3VsZCBjYXRjaCB0aGlzIHJlLWRlY2xhcmF0aW9uCiAgICAgICAgLy8gaW4gdGhlIHNhbWUgZnVuY3Rpb24gYmxvY2suCiAgICAgICAgbGV0IG11dCBpOiB1c2l6ZSA9IDA7CiAgICAgICAgd2hpbGUgKGkgPCA2NCkgewogICAgICAgICAgICBwb3B1bGF0aW9uW2kgYXMgdXNpemVdID0gbmV3X3BvcHVsYXRpb25baSBhcyB1c2l6ZV07CiAgICAgICAgICAgIGkgPSBpICsgMTsKICAgICAgICB9CiAgICAgICAgZ2VuZXJhdGlvbiA9IGdlbmVyYXRpb24gKyAxOwogICAgfQoKICAgIGV2YWx1YXRlX3BvcHVsYXRpb24oJm11dCBwb3B1bGF0aW9uKTsKICAgIGxldCBtdXQgYmVzdF9maXRuZXNzOiBpMzIgPSAtOTk5OTk5OTk7CiAgICBsZXQgbXV0IGk6IHVzaXplID0gMDsKICAgIHdoaWxlIChpIDwgNjQpIHsKICAgICAgICBpZiAocG9wdWxhdGlvbltpIGFzIHVzaXplXS5maXRuZXNzID4gYmVzdF9maXRuZXNzKSB7CiAgICAgICAgICAgIGJlc3RfZml0bmVzcyA9IHBvcHVsYXRpb25baSBhcyB1c2l6ZV0uZml0bmVzczsKICAgICAgICB9CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQogICAgcHJpbnRsbkludChiZXN0X2ZpdG5lc3MpOwogICAgZXhpdCgwKTsKfQo=", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (48, "comprehensive48", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (49, "comprehensive49", 2, "", 0);
INSERT INTO TestCases (test_case_id, test_case_disp_name, problem_phase, source_code_base64, verdict) VALUES (50, "comprehensive50", 2, "LyoKVGVzdCBQYWNrYWdlOiBTZW1hbnRpYy0yClRlc3QgVGFyZ2V0OiBjb21wcmVoZW5zaXZlCkF1dGhvcjogV2VueGluIFpoZW5nClRpbWU6IDIwMjUtMDgtMTcKVmVyZGljdDogUGFzcwpUZXN0IE5hbWU6IEludHJpY2F0ZSBTdGF0ZSBNYWNoaW5lIGFuZCBQcm90b2NvbCBTaW11bGF0aW9uClN1bW1hcnk6IFRoaXMgdGVzdCBjb21wcmVoZW5zaXZlbHkgZXZhbHVhdGVzIGNvbXBpbGVyIG9wdGltaXphdGlvbnMgZm9yOgpEZXRhaWxzOgpTdGF0ZSB0cmFuc2l0aW9uIGxvZ2ljIGluIGEgY29tcGxleCwgbXVsdGktc3RhdGUgZmluaXRlIGF1dG9tYXRvbgpPcHRpbWl6YXRpb24gb2YgYXJyYXkgbG9va3VwcyBmb3Igc3RhdGUgdHJhbnNpdGlvbiB0YWJsZXMKQnJhbmNoIHByZWRpY3Rpb24gZm9yIGhhbmRsaW5nIHZhcmlvdXMgaW5wdXQgZXZlbnRzIGFuZCBzdGF0ZSBjaGFuZ2VzCkRlZXBseSBuZXN0ZWQgZnVuY3Rpb24gY2FsbHMgZm9yIHByb2Nlc3NpbmcgcHJvdG9jb2wgbWVzc2FnZXMKSW50ZWdlciBhcml0aG1ldGljIGZvciBjaGVja3N1bXMgYW5kIHNlcXVlbmNlIG51bWJlciB2YWxpZGF0aW9uCkxvb3Agb3B0aW1pemF0aW9uIGZvciBwcm9jZXNzaW5nIHN0cmVhbXMgb2YgaW5wdXQgZGF0YQpIYW5kbGluZyBvZiBlcnJvciBzdGF0ZXMgYW5kIHJlY292ZXJ5IHBhdGhzIGluIHRoZSBzdGF0ZSBtYWNoaW5lLgoqLwoKLy8gY29tcHJlaGVuc2l2ZTUwLnJ4IC0gSW50cmljYXRlIFN0YXRlIE1hY2hpbmUgYW5kIFByb3RvY29sIFNpbXVsYXRpb24KLy8gVGhpcyB0ZXN0IGNvbXByZWhlbnNpdmVseSBldmFsdWF0ZXMgY29tcGlsZXIgb3B0aW1pemF0aW9ucyBmb3I6Ci8vIC0gU3RhdGUgdHJhbnNpdGlvbiBsb2dpYyBpbiBhIGNvbXBsZXgsIG11bHRpLXN0YXRlIGZpbml0ZSBhdXRvbWF0b24KLy8gLSBPcHRpbWl6YXRpb24gb2YgYXJyYXkgbG9va3VwcyBmb3Igc3RhdGUgdHJhbnNpdGlvbiB0YWJsZXMKLy8gLSBCcmFuY2ggcHJlZGljdGlvbiBmb3IgaGFuZGxpbmcgdmFyaW91cyBpbnB1dCBldmVudHMgYW5kIHN0YXRlIGNoYW5nZXMKLy8gLSBEZWVwbHkgbmVzdGVkIGZ1bmN0aW9uIGNhbGxzIGZvciBwcm9jZXNzaW5nIHByb3RvY29sIG1lc3NhZ2VzCi8vIC0gSW50ZWdlciBhcml0aG1ldGljIGZvciBjaGVja3N1bXMgYW5kIHNlcXVlbmNlIG51bWJlciB2YWxpZGF0aW9uCi8vIC0gTG9vcCBvcHRpbWl6YXRpb24gZm9yIHByb2Nlc3Npbmcgc3RyZWFtcyBvZiBpbnB1dCBkYXRhCi8vIC0gSGFuZGxpbmcgb2YgZXJyb3Igc3RhdGVzIGFuZCByZWNvdmVyeSBwYXRocyBpbiB0aGUgc3RhdGUgbWFjaGluZS4KCmZuIG1haW4oKSB7CiAgICBsZXQgbXV0IHN0YXRlOiBpMzIgPSAwOyAvLyAwOiBJRExFLCAxOiBDT05ORUNUSU5HLCAyOiBDT05ORUNURUQsIDM6IERJU0NPTk5FQ1RJTkcsIDQ6IEVSUk9SCiAgICBsZXQgbXV0IHNlcXVlbmNlX251bWJlcjogaTMyID0gMDsKICAgIGxldCBtdXQgbGFzdF9hY2s6IGkzMiA9IC0xOwogICAgbGV0IG11dCByZXRyYW5zbWlzc2lvbl9jb3VudDogaTMyID0gMDsKCiAgICBsZXQgbXV0IGlucHV0X3N0cmVhbTogW2kzMjsgNjBdID0gWzA7IDYwXTsKICAgIGxldCBtdXQgaTogdXNpemUgPSAwOwogICAgd2hpbGUgKGkgPCA2MCkgewogICAgICAgIGlucHV0X3N0cmVhbVtpIGFzIHVzaXplXSA9IGkgYXMgaTMyICUgODsKICAgICAgICBpID0gaSArIDE7CiAgICB9CiAgICAvLyBFdmVudCB0eXBlczogMDogUkVRX0NPTk5FQ1QsIDE6IEFDS19DT05ORUNULCAyOiBEQVRBLCAzOiBBQ0tfREFUQSwgNDogUkVRX0RJU0NPTk5FQ1QsIDU6IEFDS19ESVNDT05ORUNULCA2OiBUSU1FT1VULCA3OiBDT1JSVVBUX0RBVEEKCiAgICBpID0gMDsKICAgIHdoaWxlIChpIDwgNjApIHsKICAgICAgICBsZXQgZXZlbnQ6IGkzMiA9IGlucHV0X3N0cmVhbVtpIGFzIHVzaXplXTsKICAgICAgICBsZXQgbXV0IHBheWxvYWQ6IGkzMiA9ICBpIGFzIGkzMiAqIDEwOwoKICAgICAgICBzdGF0ZSA9IHByb2Nlc3NfZXZlbnQoc3RhdGUsIGV2ZW50LCBwYXlsb2FkLCBzZXF1ZW5jZV9udW1iZXIsIGxhc3RfYWNrLCByZXRyYW5zbWlzc2lvbl9jb3VudCk7CgogICAgICAgIGlmIChzdGF0ZSA9PSAxKSB7IC8vIENPTk5FQ1RJTkcKICAgICAgICAgICAgc2VxdWVuY2VfbnVtYmVyID0gMDsKICAgICAgICAgICAgbGFzdF9hY2sgPSAtMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAoc3RhdGUgPT0gMikgeyAvLyBDT05ORUNURUQKICAgICAgICAgICAgICAgIGlmIChldmVudCA9PSAyKSB7IC8vIERBVEEKICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZV9udW1iZXIgPSBzZXF1ZW5jZV9udW1iZXIgKyAxOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQgPT0gMykgeyAvLyBBQ0tfREFUQQogICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2FjayA9IHBheWxvYWQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKHN0YXRlID09IDQpIHsgLy8gRVJST1IKICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgY29tcGlsZSBlcnJvci4gVGhlIHZhcmlhYmxlIGBuZXdfc3RhdGVgIGlzIGRlZmluZWQgaW4gYSBkaWZmZXJlbnQgc2NvcGUuCiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGludGVudGlvbiBtaWdodCBiZSB0byByZXNldCB0aGUgc3RhdGUsIGJ1dCBpdCdzIGFjY2Vzc2luZyBhbiBvdXQtb2Ytc2NvcGUgdmFyaWFibGUuCiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAwOyAvLyBDb21waWxlIEVycm9yOiBgbmV3X3N0YXRlYCBpcyBub3QgZGVmaW5lZCBpbiB0aGlzIHNjb3BlCiAgICAgICAgICAgICAgICAgICAgcmV0cmFuc21pc3Npb25fY291bnQgPSAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAobGFzdF9hY2sgPCBzZXF1ZW5jZV9udW1iZXIgLSA1KSB7CiAgICAgICAgICAgIHJldHJhbnNtaXNzaW9uX2NvdW50ID0gcmV0cmFuc21pc3Npb25fY291bnQgKyAxOwogICAgICAgICAgICBpZiAocmV0cmFuc21pc3Npb25fY291bnQgPiAzKSB7CiAgICAgICAgICAgICAgICBzdGF0ZSA9IDQ7IC8vIEVSUk9SCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcHJpbnRsbkludChzdGF0ZSk7CiAgICAgICAgaSA9IGkgKyAxOwogICAgfQogICAgZXhpdCgwKTsKfQoKZm4gcHJvY2Vzc19ldmVudChjdXJyZW50X3N0YXRlOiBpMzIsIGV2ZW50OiBpMzIsIHBheWxvYWQ6IGkzMiwgc2VxOiBpMzIsIGFjazogaTMyLCByZXRfY291bnQ6IGkzMikgLT4gaTMyIHsKICAgIGxldCBtdXQgbmV3X3N0YXRlOiBpMzIgPSBjdXJyZW50X3N0YXRlOwoKICAgIGlmIChjdXJyZW50X3N0YXRlID09IDApIHsgLy8gSURMRQogICAgICAgIGlmIChldmVudCA9PSAwKSB7IC8vIFJFUV9DT05ORUNUCiAgICAgICAgICAgIG5ld19zdGF0ZSA9IDE7IC8vIENPTk5FQ1RJTkcKICAgICAgICB9CiAgICB9IGVsc2UgewogICAgICAgIGlmIChjdXJyZW50X3N0YXRlID09IDEpIHsgLy8gQ09OTkVDVElORwogICAgICAgICAgICBpZiAoZXZlbnQgPT0gMSkgeyAvLyBBQ0tfQ09OTkVDVAogICAgICAgICAgICAgICAgbmV3X3N0YXRlID0gMjsgLy8gQ09OTkVDVEVECiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoZXZlbnQgPT0gNikgeyAvLyBUSU1FT1VUCiAgICAgICAgICAgICAgICAgICAgbmV3X3N0YXRlID0gMDsgLy8gSURMRQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKGN1cnJlbnRfc3RhdGUgPT0gMikgeyAvLyBDT05ORUNURUQKICAgICAgICAgICAgICAgIGlmIChldmVudCA9PSAyKSB7IC8vIERBVEEKICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGVfY2hlY2tzdW0ocGF5bG9hZCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJvY2VzcyBkYXRhCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3N0YXRlID0gNDsgLy8gRVJST1IKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmIChldmVudCA9PSAzKSB7IC8vIEFDS19EQVRBCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkID4gYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgd2luZG93CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQgPT0gNCkgeyAvLyBSRVFfRElTQ09OTkVDVAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3N0YXRlID0gMzsgLy8gRElTQ09OTkVDVElORwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50ID09IDcpIHsgLy8gQ09SUlVQVF9EQVRBCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3N0YXRlID0gNDsgLy8gRVJST1IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmIChjdXJyZW50X3N0YXRlID09IDMpIHsgLy8gRElTQ09OTkVDVElORwogICAgICAgICAgICAgICAgICAgIGlmIChldmVudCA9PSA1KSB7IC8vIEFDS19ESVNDT05ORUNUCiAgICAgICAgICAgICAgICAgICAgICAgIG5ld19zdGF0ZSA9IDA7IC8vIElETEUKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQgPT0gNikgeyAvLyBUSU1FT1VUCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfc3RhdGUgPSAwOyAvLyBJRExFCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50X3N0YXRlID09IDQpIHsgLy8gRVJST1IKICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW4gYSByZWFsIHNjZW5hcmlvLCB0aGlzIG1pZ2h0IHRyaWdnZXIgYSByZXNldC4KICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGVyZSwgd2UganVzdCBzdGF5IGluIHRoZSBlcnJvciBzdGF0ZS4KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gY29tcGxleF9zdGF0ZV9sb2dpYyhuZXdfc3RhdGUsIGV2ZW50LCBwYXlsb2FkKTsKfQoKZm4gdmFsaWRhdGVfY2hlY2tzdW0ocGF5bG9hZDogaTMyKSAtPiBib29sIHsKICAgIC8vIEEgc2ltcGxlLCBidXQgcG90ZW50aWFsbHkgcGVyZm9ybWFuY2UtaW50ZW5zaXZlIGNoZWNrc3VtIGxvZ2ljCiAgICBsZXQgbXV0IGNoZWNrc3VtOiBpMzIgPSAwOwogICAgbGV0IG11dCBpOiBpMzIgPSAxOwogICAgd2hpbGUgKGkgPD0gcGF5bG9hZCkgewogICAgICAgIGlmIChwYXlsb2FkICUgaSA9PSAwKSB7CiAgICAgICAgICAgIGNoZWNrc3VtID0gY2hlY2tzdW0gKyBpOwogICAgICAgIH0KICAgICAgICBpID0gaSArIDE7CiAgICB9CiAgICByZXR1cm4gY2hlY2tzdW0gJSAyID09IDA7Cn0KCmZuIGNvbXBsZXhfc3RhdGVfbG9naWMoc3RhdGU6IGkzMiwgZXZlbnQ6IGkzMiwgcGF5bG9hZDogaTMyKSAtPiBpMzIgewogICAgbGV0IG11dCBmaW5hbF9zdGF0ZTogaTMyID0gc3RhdGU7CiAgICBpZiAoZXZlbnQgPT0gNikgeyAvLyBUSU1FT1VUCiAgICAgICAgaWYgKHN0YXRlID09IDIpIHsgLy8gQ09OTkVDVEVECiAgICAgICAgICAgIGZpbmFsX3N0YXRlID0gcGVyZm9ybV9yZWNvdmVyeShzdGF0ZSwgcGF5bG9hZCk7CiAgICAgICAgfQogICAgfQoKICAgIGxldCBtdXQgaTogaTMyID0gMDsKICAgIGxldCBtdXQgdGVtcF92YWw6IGkzMiA9IHBheWxvYWQ7CiAgICB3aGlsZSAoaSA8IDUpIHsKICAgICAgICB0ZW1wX3ZhbCA9IHRlbXBfdmFsIC8gKGkgKyAyKSArIGkgKiBpOwogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICBpZiAodGVtcF92YWwgJSAxMCA9PSAwKSB7CiAgICAgICAgaWYgKGZpbmFsX3N0YXRlICE9IDQpIHsKICAgICAgICAgICAgZmluYWxfc3RhdGUgPSA0OyAvLyBFUlJPUgogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBmaW5hbF9zdGF0ZTsKfQoKZm4gcGVyZm9ybV9yZWNvdmVyeShzdGF0ZTogaTMyLCBwYXlsb2FkOiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgbXV0IHJlY292ZXJ5X3Njb3JlOiBpMzIgPSAwOwogICAgbGV0IG11dCBpOiBpMzIgPSAwOwogICAgd2hpbGUgKGkgPCAxMCkgewogICAgICAgIHJlY292ZXJ5X3Njb3JlID0gcmVjb3Zlcnlfc2NvcmUgKyAocGF5bG9hZCAlIChpICsgMSkpOwogICAgICAgIGkgPSBpICsgMTsKICAgIH0KCiAgICBpZiAocmVjb3Zlcnlfc2NvcmUgPiAyMCkgewogICAgICAgIHJldHVybiBzdGF0ZTsgLy8gUmVjb3Zlcnkgc3VjY2Vzc2Z1bAogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gNDsgLy8gUmVjb3ZlcnkgZmFpbGVkLCBnbyB0byBFUlJPUiBzdGF0ZQogICAgfQp9CgpmbiBhbm90aGVyX2xheWVyX29mX3Byb3RvY29sKGV2ZW50OiBpMzIsIGRhdGE6IGkzMikgLT4gaTMyIHsKICAgIGxldCBtdXQgcmVzdWx0OiBpMzIgPSBkYXRhOwogICAgaWYgKGV2ZW50ID09IDIpIHsgLy8gREFUQQogICAgICAgIGxldCBtdXQgaTogaTMyID0gMDsKICAgICAgICB3aGlsZSAoaSA8IDUpIHsKICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgaTsKICAgICAgICAgICAgaSA9IGkgKyAxOwogICAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGV2ZW50ID09IDMpIHsgLy8gQUNLX0RBVEEKICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0IC0gMTA7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKfQoKZm4geWV0X2Fub3RoZXJfcHJvdG9jb2xfZnVuY3Rpb24odmFsMTogaTMyLCB2YWwyOiBpMzIpIC0+IGkzMiB7CiAgICBsZXQgbXV0IGludGVybWVkaWF0ZTogaTMyID0gdmFsMSArIHZhbDI7CiAgICBsZXQgbXV0IGs6IGkzMiA9IDA7CiAgICB3aGlsZSAoayA8IDMpIHsKICAgICAgICBpbnRlcm1lZGlhdGUgPSBhbm90aGVyX2xheWVyX29mX3Byb3RvY29sKGssIGludGVybWVkaWF0ZSk7CiAgICAgICAgayA9IGsgKyAxOwogICAgfQogICAgcmV0dXJuIGludGVybWVkaWF0ZTsKfQoKZm4gcHJvY2Vzc19jb21wbGV4X3BhY2tldChhOiBpMzIsIGI6IGkzMiwgYzogaTMyKSAtPiBpMzIgewogICAgbGV0IHJlczE6IGkzMiA9IHlldF9hbm90aGVyX3Byb3RvY29sX2Z1bmN0aW9uKGEsIGIpOwogICAgbGV0IHJlczI6IGkzMiA9IHlldF9hbm90aGVyX3Byb3RvY29sX2Z1bmN0aW9uKGIsIGMpOwogICAgbGV0IHJlczM6IGkzMiA9IHlldF9hbm90aGVyX3Byb3RvY29sX2Z1bmN0aW9uKGEsIGMpOwogICAgcmVzMSAtIHJlczIgKyByZXMzCn0K", 0);
